[
{
	"uri": "https://redhawksdr.github.io/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": " Description REDHAWK is a software-defined radio (SDR) framework designed to support the development, deployment, and management of real-time software radio applications. To support the design and development of software applications, REDHAWK provides tools that allow development and testing of software modules called \u0026ldquo;Components\u0026rdquo; and composition of Components into \u0026ldquo;Waveform Applications\u0026rdquo; that can be seamlessly deployed on a single computer or multiple network-enabled computers.\nThe REDHAWK integrated development environment (IDE) provides tools to support development of REDHAWK software. The development and deployment of REDHAWK Applications are aided by graphical editors and drag-and-drop Waveform construction. The IDE allows users to interact with and control multiple running REDHAWK instances and applications.\nRecent Announcements Release of REDHAWK 2.2.6 (LTS) (April 2020) Release of Core Assets (June 2019) Release of REDHAWK 2.0.8 (LTS) (February 2018) License REDHAWK is licensed under a combination of the GNU Lesser General Public License (LGPL), the Eclipse Public License (EPL), the Apache (v.2.0) License, the Python Software Foundation (PSF) license agreement, Mozilla Public License (v.1.1), and the GNU General Public License (GPL). For more information, refer to the LICENSE file in the respective repositories. REDHAWK documentation is licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License. REDHAWK documentation is built with Hugo which is licensed under the Apache License 2.0 and uses the Hugo DocDock Theme, licensed under the MIT License.\nCopyright This work is protected by Copyright. For updated copyright information, refer to the Copyright file.\n"
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.0-lts/release-notes-2.0.8/",
	"title": "REDHAWK Release Notes - 2.0.8",
	"tags": [],
	"description": "",
	"content": " The effort in REDHAWK 2.0.8 focused on:\n Core Framework\n Preventing sb.DataSink from adding an empty timestamp when it receives EOS in an empty packet. Adding inline header comments documenting C++ BulkIO input stream, output stream, and data block APIs. Fixing improperly scoped locks in Core Framework control. Implementing several C++ fixes to allow REDHAWK to compile on newer compilers. Correcting default property kinds in the DTD and XSD so they are no longer out of sync with the behavior of the Core Framework and the ICD. Adding new behavior to the C++ input stream API: It is now possible to \u0026ldquo;peek\u0026rdquo; into data sets that have reached EOS by setting consume to 0 when using read or tryread. Patching omniORBpy to prevent possible segfaults in multithreaded code. Correcting behavior so readonly property kind properties for Devices and Services can now be modified during deployment using Device Configuration Descriptor (dcd.xml) file.  IDE\n Resolving issue so when launching Waveforms containing references to mistyped properties, the IDE displays all the properties including the property that had a mis-matched override in the SAD file. Removing old code generation templates for REDHAWK 1.8 from the IDE. Old IDE diagrams for Waveforms and Nodes from pre-2.0.0 were also removed. Adding M2Eclipse to the REDHAWK IDE, which provides tooling to work with Maven-based projects such as the REDHAWK Enterprise Integration assets.  Documentation\n Adding documentation to the REDHAWK Manual regarding naming elements in structures such that element names can be reused across different structures. Adding documentation explaining how to use the Allocation Manager.  REDHAWK Enterprise Integration\n Enhancing the REDHAWK Enterprise Integration Demo GUI by adding support for Raster and Line plots from time- or fft-based data using Sigplot, using JTransforms with REDHAWK Websocket to perform FFT, cleaning up the Demo GUI, and updating screenshots and documentation to include new FFT and Raster functionality in the GUI. Adding a helper method to dynamically connect two Components; Improving methods used to set REDHAWK Properties; and Adding AllocationFactory to ease users’ ability to generate allocations. Adding functionality in REDHAWK REST and Websocket to support JAAS-based method level access.   Fixes The following IDE and Core Framework fixes were completed in REDHAWK 2.0.8.\nRelease notes for Core Assets are available on Github (https://github.com/RedhawkSDR/) in each Core Asset repository.\nCore Framework Fixes The following Core Framework bug fixes were completed in REDHAWK 2.0.8.\n Persona and programmable device pattern code generators compile correctly. C++ components using the RH_LogEventAppender threw an exception during shutdown when the event service was terminated before the component. Properties set as \u0026ldquo;commandline\u0026rdquo; are appropriately overridden on deployment. Removed traceback messages from qtbrowse. sb.DataSink no longer stores invalid timestamps. Assembly controller properties can be renamed (and overridden) at the Application level. Fixed improperly scoped locks in Core Framework control. Fixed several C++ constructs that do not compile on newer versions of gcc. To maintain backwards compatibility, updated the XSD/DTD default value for kind and configurationkind from \u0026ldquo;property\u0026rdquo; to \u0026ldquo;configure\u0026rdquo;. Listing registrants for an unknown event channel returns an empty list. Readonly property kind properties for Devices and Services can now be modified during deployment using Device Configuration Descriptor (dcd.xml) file.  Special Resolutions The following previously reported Known Issues have been closed in REDHAWK 2.0.8 with the following resolutions:\n Won’t Fix  Unit test for Devices in 1.8.X returns Component object - This issue is not present in REDHAWK 2.0+ series. Struct_from_props fails during allocate_capacity in python device - This behavior is not an error.  Fixed By Other Issue  GPP Valgrind Results - Fixed by improvements made to the GPP during development in the REDHAWK 2.0 series.  Cannot Reproduce  –enableOctave test failed on codegen test test_02_EvaluateUnitTests [Component: octaveTest0]   IDE Fixes The following IDE bug fixes were completed in REDHAWK 2.0.8.\n An error is now displayed when attempting code generation with an unsupported template type. Fixed an issue to ensure that only appropriate menu items to the current selection are displayed in context menus. In the Port Monitor View, corrected the display of data rates for low-rate data streams. The Launch Waveform wizard search capability now assumes a leading wildcard character. Double-quote entries for property string values are now always treated as empty strings. In the PRF editor, the Remove Value button is now correctly enabled. Resolved errors when adding and removing Devices and Services using the Devices tab in the Node editor. Resolved title text discrepancies in the Properties View. The context menu for a Domain Manager no longer shows \u0026ldquo;Connect\u0026rdquo; if the Domain Manager is already connected. Fixed issue to ensure that simple properties that are not of type \u0026ldquo;property\u0026rdquo; cannot be assigned the command-line attribute. In the Properties tab of the SAD editor, the members of properties belonging to the assembly controller no longer display an external ID. Corrected a code issue internal to the IDE during the code generation process. When attempting to perform a \u0026ldquo;Display SRI\u0026rdquo; action on a Tuner with no applicable Ports, an error message is now displayed. Displaying SRI for a FrontEnd tuner no longer prevents other IDEs from also displaying the SRI. Ensured that when plotting SDDS ports, a conneciton ID can be specified. This also corrects issues with plotting for SDDS Ports on FEI multi-out Devices. Improved error handling when a query of a resource’s Properties returns unexpected results. Corrected an issue where values could not be added to a struct sequence in the Properties tab of the SAD editor. Deleting a resource in the Target SDR now closes any associated open editors. Limited refreshes of underline Port model objects. Corrected an NPE that occurred when using the Redhawk Import wizard for a shared library project. Ensured that deleting a Component instantiation only cleans up the hosting Component placement if there are no remaining sibling instantiations. Removed shared libraries from the Property browser. Deleting an aggregate Device removed references from associated compositepartofdevice tags. When adding Ports using the Port tab in the SPD editor, an NPE is no longer logged. When launching a Domain Manager with a name that is duplicated in another running Domain, the IDE now always shows an error. Resolved ClassCastException when launching Waveforms containing references to mistyped properties. Corrected an issue where the IDE could hang or become sluggish while using the CORBA Name Browser view. Corrected the default property kind in the DTD schema for PRF files. The IDE now allows configuring ’property’ kind properties that have the ’commandline’ attribute set. The IDE now passes the initial value of ’property’ kind properties to initializeProperties() when resources are launched in the Sandbox. In the Properties tab of the SAD editor, overriding the values of properties is no longer allowed when it does not make sense (for example, allocation properties). Negative numbers are no longer allowed in values for complex unsigned properties. Parsing of complex boolean properties was also corrected. Added the Logging Configuration Plugin appendix to the help and corrected the link to the List of Acronyms appendix. Corrected an error that occurred when the value of a simpleref inside a structref in a SAD file did not make sense for the referenced property type. Resources now report an error if they receive a non-sequence value for a simple sequence property. Fixed incorrect validation message for structs containing a sequence with no values while also containing a simple with a default value. Corrected an NPE that occurred when saving a SAD or DCD file with no name. When installing IDL projects with sudo privileges, the permissions are set on the installed artifacts such that they are visible to non-root users on the system. Added the Eclipse p2 director application to the REDHAWK Explorer product. Resources now show errors associated with any of their properties. An internal IDE model was corrected to prevent a compilation error. Fixed issue to ensure Data List is not enabled for unsupported Ports. Fixed issue to ensure that Play Port is not enabled for unsupported Ports. Fixed issue to ensure that Snapshot is not enabled for unsupported Ports. Fixed issue to ensure that the profile for a running Domain Manager, Waveform, or Device manager cannot be edited. Fixed issue to ensure that the Domain Waveform associated with a local Waveform cannot be edited. Fixed issue to ensure that the exec params for a launched resource in the Sandbox cannot be edited. Fixed issue to ensure that the implementation ID for a launched resource in the Sandbox cannot be edited. After listening to an event channel, the IDE now correctly releases all internal resources. Event channels can now be listened to from the CORBA Name Browser view. Fixed issue to correct an NPE so it does not occur while interacting with the CORBA Name Browser view. Text on the IDE splash screen is now correctly displayed and not truncated.  Special Resolutions The following previously reported Known Issues have been closed in REDHAWK 2.0.8 with the following resolutions:\n Cannot Reproduce  Generate button temporarily disabled on SPD editor - Cannot Reproduce SAD editor properties tab allows setting external IDs on struct / struct seq members - Cannot Reproduce   Documentation Improvements/Fixes The following documentation new features/improvements/fixes were completed in REDHAWK 2.0.8.\n Updated the REDHAWK SCA and ICD documents to describe duplicate Device and DeviceManager registration behavior. Fixed display of level 5 headings. Added Octave information to installation information in the REDHAWK Manual. Added a note about avoiding reserved names in the REDHAWK IDL Project section of the REDHAWK Manual. Corrected incorrect reference of redhawk-connect-name with redhawk-connection-name in the REDHAWK REST section of the REDHAWK Enterprise Integration User Guide. Fixed trivial grammar issue in Logging Configuration Plugin Appendix. Added REDHAWK Jaxrs Security Filter chapter to REDHAWK Enterprise Integration User Guide to explain how to configure role-based access to individual REST endpoints. REDHAWK Enterprise Integration documentation to explain how to configure Jetty w/ Jacorb. Added required naming conventions to the REDHAWK Manual. Added space after REDHAWK graphic on REDHAWK Overview title page. Removed Additional Documentation section from Download page. Corrected dashes in the sample code in the Setting Up the REDHAWK Repository section of the REDHAWK Manual.  "
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/components/rh.amfmpmbasebanddemod.readme/",
	"title": "rh.AmFmPmBasebandDemod",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.AmFmPmBasebandDemod Description Contains the source and build script for the REDHAWK rh.AmFmPmBasebandDemod component. This component performs angle demodulation on complex baseband input signals.\nInstallation This asset requires the rh.dsp shared library. This shared library must be installed in order to build and run this asset. To build from source, run the build.sh script. To install to $SDRROOT run, build.sh install.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/components/rh.arbitraryrateresampler.readme/",
	"title": "rh.ArbitraryRateResampler",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.ArbitraryRateResampler Description Contains the source and build script for the REDHAWK rh.ArbitraryRateResampler component. This component resamples a data stream at output rates which are not limited to integer multiples of the input sampling rate. This component can increase or decrease the sample rate. No anti-aliasing filtering is included, so users must use this component with caution when decreasing the sampling rate to avoid aliasing or pre-filter themselves in an upstream component if required.\nInstallation This asset requires the rh.dsp shared library, which must be installed in order to build and run this asset. To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/components/rh.dataconverter.readme/",
	"title": "rh.DataConverter",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.DataConverter Description The rh.DataConverter component is used to convert between BulkIO data types in REDHAWK. With proper configuration, the rh.DataConverter component can convert between any of the following data types; Char, Octet, Unsigned Short, Short, Float and Double. The rh.DataConverter component is also capable of converting real data into complex data, and similarly complex data to real data.\nInstallation This asset requires the rh.fftlib shared library. This shared library must be installed in order to build and run this asset. To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install. Note: root privileges (sudo) may be required to install.\nUsage To use the rh.DataConverter component, connect an input port to the desired input data stream that matches the input data type. Connect the output to the output port of the desired output type. Only one input port can be active at a time, but the data can be converted to multiple output types at the same time. If scaling is desired, fixed point output scaling can be enabled by the scaleOutput boolean. For floating point scaling or normalization, use the floatingPointRange and normalize_floating_point properties. The rh.DataConverter can also do real to complex and complex to real transformations. The output type (real/complex/passthrough) is controlled with the outputType property. If a transform is required, the properties controlling that transform are specified in the transformProperties property.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/waveforms/rh.fm_rbds_demo.readme/",
	"title": "rh.FM_RBDS_demo",
	"tags": [],
	"description": "",
	"content": " REDHAWK FM_RBDS_demo Description Contains the source and build script for the REDHAWK FM_RBDS_demo waveform. This waveform processes the RBDS digitial message present in broadcast FM radio signals. This waveform tunes and filters the signal, performs a BPSK demodulation, then decodes the RBDS data.\nInstallation This is a waveform project; therefore, it does not need to be built. It must be installed into the $SDRROOT/dom/waveforms directory. To install it, open the project in the REDHAWK IDE and drag it into the Target SDR folder.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/waveforms/rh.fm_mono_demo.readme/",
	"title": "rh.FM_mono_demo",
	"tags": [],
	"description": "",
	"content": " REDHAWK FM_mono_demo Description Contains the source and build script for the REDHAWK FM_mono_demo waveform. This waveform processes the mono audio channel of broadcast FM Radio.\nInstallation This is a waveform project; therefore, it does not need to be built. It must be installed into the $SDRROOT/dom/waveforms directory. To install it, open the project in the REDHAWK IDE and drag it into the Target SDR folder.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/components/rh.filereader.readme/",
	"title": "rh.FileReader",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.FileReader Description Contains the source and build script for the REDHAWK rh.FileReader component. The rh.FileReader component reads data from a file on the SCA or local file system, and streams the data out a BulkIO output port.\nInstallation This asset requires the rh.blueFileLib and rh.RedhawkDevUtils shared libraries. These shared libraries must be installed in order to build and run this asset. To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install. Note: root privileges (sudo) may be required to install.\nUsage To use rh.FileReader, configure the source_uri property with the path to the file (or directory of files) to be read. Configure the file_format property with the value appropriate for the input file(s). For files that do not contain a header with sample rate and/or frequency information, configure the sample_rate property with the sample rate and center_frequency with the center frequency of the data. Connect an output port of the appropriate type to the intended consumer of the data stream. To begin playback, configure the playback_state property to PLAY and ensure the component has been started.\nThe BLUEFILE and WAV options for the file_format property rely on the file header for the full description of the data to be read. Each other option fully describes the data to be read, and most options have up to four components:\n Mode: SCALAR (Real) or COMPLEX Atom size: 8 (Char/Octet), 16 (Short), 32 (Long/Float), or 64 (Double) Data type: Unsigned integer, Signed integer, Floating-point Byte Order: Big or Little Endian  All possible file_format property values are listed in the table below.\n   Label Value Mode Atom Size Data Type Byte Order     BLUE/PLATINUM FILE BLUEFILE Header defined Header defined Header defined Header defined   WAV WAV Scalar Header defined Header defined Little Endian   XML XML Scalar 8 Char (Signed Integer) N/A   SCALAR OCTET (8o) OCTET Scalar 8 Unsigned Integer N/A   SCALAR CHAR (8t) CHAR Scalar 8 Signed Integer N/A   SCALAR USHORT Little Endian (16or) USHORT_LITTLE_ENDIAN Scalar 16 Unsigned Integer Little Endian   SCALAR USHORT Big Endian (16o) USHORT_BIG_ENDIAN Scalar 16 Unsigned Integer Big Endian   SCALAR SHORT Little Endian(16tr) SHORT_LITTLE_ENDIAN Scalar 16 Signed Integer Little Endian   SCALAR SHORT Big Endian (16t) SHORT_BIG_ENDIAN Scalar 16 Signed Integer Big Endian   SCALAR ULONG Little Endian(32or) ULONG_LITTLE_ENDIAN Scalar 32 Unsigned Integer Little Endian   SCALAR ULONG Big Endian (32o) ULONG_BIG_ENDIAN Scalar 32 Unsigned Integer Big Endian   SCALAR LONG Little Endian (32tr) LONG_LITTLE_ENDIAN Scalar 32 Signed Integer Little Endian   SCALAR LONG Big Endian (32t) LONG_BIG_ENDIAN Scalar 32 Signed Integer Big Endian   SCALAR FLOAT Little Endian(32fr) FLOAT_LITTLE_ENDIAN Scalar 32 Floating-point Little Endian   SCALAR FLOAT Big Endian (32f) FLOAT_BIG_ENDIAN Scalar 32 Floating-point Big Endian   SCALAR DOUBLE Little Endian (64fr) DOUBLE_LITTLE_ENDIAN Scalar 64 Floating-point Little Endian   SCALAR DOUBLE Big Endian (64f) DOUBLE_BIG_ENDIAN Scalar 64 Floating-point Big Endian   COMPLEX OCTET (8o) COMPLEX_OCTET Complex 8 Unsigned Integer N/A   COMPLEX CHAR (8t) COMPLEX_CHAR Complex 8 Signed Integer N/A   COMPLEX USHORT Little Endian (16or) COMPLEX_USHORT_LITTLE_ENDIAN Complex 16 Unsigned Integer Little Endian   COMPLEX USHORT Big Endian (16o) COMPLEX_USHORT_BIG_ENDIAN Complex 16 Unsigned Integer Big Endian   COMPLEX SHORT Little Endian(16tr) COMPLEX_SHORT_LITTLE_ENDIAN Complex 16 Signed Integer Little Endian   COMPLEX SHORT Big Endian (16t) COMPLEX_SHORT_BIG_ENDIAN Complex 16 Signed Integer Big Endian   COMPLEX ULONG Little Endian(32or) COMPLEX_ULONG_LITTLE_ENDIAN Complex 32 Unsigned Integer Little Endian   COMPLEX ULONG Big Endian (32o) COMPLEX_ULONG_BIG_ENDIAN Complex 32 Unsigned Integer Big Endian   COMPLEX LONG Little Endian (32tr) COMPLEX_LONG_LITTLE_ENDIAN Complex 32 Signed Integer Little Endian   COMPLEX LONG Big Endian (32t) COMPLEX_LONG_BIG_ENDIAN Complex 32 Signed Integer Big Endian   COMPLEX FLOAT Little Endian(32fr) COMPLEX_FLOAT_LITTLE_ENDIAN Complex 32 Floating-point Little Endian   COMPLEX FLOAT Big Endian (32f) COMPLEX_FLOAT_BIG_ENDIAN Complex 32 Floating-point Big Endian   COMPLEX DOUBLE Little Endian (64fr) COMPLEX_DOUBLE_LITTLE_ENDIAN Complex 64 Floating-point Little Endian   COMPLEX DOUBLE Big Endian (64f) COMPLEX_DOUBLE_BIG_ENDIAN Complex 64 Floating-point Big Endian    The desired output byte order is specified using the output_bulkio_byte_order property, which defaults to host byte order. If the byte order of the input file is different than that of the desired output byte order, byte swapping will occur.\nThe advanced_properties, default_timestamp, and default_sri struct properties, as well as the default_sri_keywords struct sequence property are available to support more complicated use cases. Each of the features available are documented in the description of each property when viewing the Properties Descriptor XML file (FileReader.prf.xml).\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/components/rh.filewriter.readme/",
	"title": "rh.FileWriter",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.FileWriter Description Contains the source and build script for the REDHAWK rh.FileWriter component. The rh.FileWriter component receives streaming data from the BulkIO provides (input) ports and writes the data to a file on the SCA or local file system.\nInstallation This asset requires the rh.blueFileLib and rh.RedhawkDevUtils shared libraries. These shared libraries must be installed in order to build and run this asset. To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install. Note: root privileges (sudo) may be required to install.\nUsage To use rh.FileWriter, connect an input port to the desired input data stream that matches the input data type. Configure the destination_uri property with the path to the file to be written, and optionally, the destination_uri_suffix, if a suffix is desired. Select the desired format for the output file using the file_format property. Ensure the recording_enabled property is set to true, which is the default value.\nThere are several keywords that can be used to insert stream- or data-specific information into the file name. Any SRI Keyword name with percent symbols (%) on either side will be replaced with the value of the SRI Keyword. Other pre-defined keywords for string replacement are listed below:\n   Keyword string Description     %STREAMID% Stream ID   %TIMESTAMP% Timestamp of the first sample of the file   %TIMESTAMP_NO_FRACT% Timestamp without fractional component   %SYSTEM_TIMESTAMP% System time   %SYSTEM_TIMESTAMP_NO_FRACT% System time without fractional component   %COMP_NS_NAME% Naming service name   %EXTENSION% \u0026ldquo;bluefile\u0026rdquo; or \u0026ldquo;raw\u0026rdquo; based on file_format prop   %MODE% \u0026ldquo;real\u0026rdquo; for Scalar or \u0026ldquo;cplx\u0026rdquo; for Complex   %SR% The sample rate in Hz   %DT% The data type and format (described below)   %COL_RF% COL_RF SRI Keyword   %CHAN_RF% CHAN_RF SRI Keyword   %COLRF_HZ% Integer COL_RF keyword followed by \u0026ldquo;Hz\u0026rdquo;   %CHANRF_HZ% Integer CHAN_RF keyword followed by \u0026ldquo;Hz\u0026rdquo;   %CF_HZ% Integer CHAN_RF (or COL_RF) followed by \u0026ldquo;Hz\u0026rdquo;    By default, the data is written to the file without byte swapping and the byte order is assumed to be host byte order. Use the input_bulkio_byte_order and swap_bytes properties to alter this behavior as desired. The byte order of the host is provided by the host_byte_order property.\nThe data format tag (%DT%) is based on the BulkIO input port and the byte order of the data being written. The byte order is determined using the input_bulkio_byte_order and swap_bytes properties.\n   Data Format Tag Input Data/Port Type Byte Order Written to File     8t Char or XML input Big or Little Endian   8o Octet input Big or Little Endian   16t Short input Big Endian   16tr Short input Little Endian   16o Unsigned Short input Big Endian   16or Unsigned Short input Little Endian   32f 32-bit Float input Big Endian   32fr 32-bit Float input Little Endian   64f 64-bit Double input Big Endian   64fr 64-bit Double input Little Endian    The advanced_properties struct property and the recording_timer struct sequence property are available to support more complicated use cases. Each of the features available are documented in the description of each property when viewing the Properties Descriptor XML file (FileWriter.prf.xml).\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/devices/rh.fmrdssimulator.readme/",
	"title": "rh.FmRdsSimulator",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.FmRdsSimulator Description Contains the source and build script for the REDHAWK rh.FmRdsSimulator device. This device is designed to be used in conjunction with the libRfSimulators library. Using the simulator library, this FRONTEND Interfaces compliant REDHAWK device will generate FM modulated mono or stereo audio with RDS encoded PI (Call Sign), PS (Short Text), and RT (Full Text) data.\nAdditional documentation is available within the libRfSimulators README.\nInstallation This asset requires the libRfSimulators shared library, which must be installed in order to build and run this asset. To build and run from source, run the build.sh script. To install to $SDRROOT, run build.sh install.\nNotes The Simulator creates a processing thread for each station within the currently visible 2.28 Mhz bandwidth (even if bandwidth is set smaller). Since each of these threads is resampling a wav file, FM modulating, encoding RDS, and upsampling to 2.28 Msps a non-trivial amount of CPU is used.\nFEI Compliance Test Results See the FEI Compliance Results document.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/components/rh.hardlimit.readme/",
	"title": "rh.HardLimit",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.HardLimit Description Contains the source and build script for the REDHAWK rh.HardLimit component. This component thresholds data so that all data is between the upper and lower limit as specified by the properties.\nInstallation To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/devices/rh.msdd.readme/",
	"title": "rh.MSDD",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.MSDD Description Contains the source and build script for the REDHAWK rh.MSDD device. This device is a FRONTEND Interfaces compliant device for the Midwest Microwave MSDD-3000\u0026frasl;6000 receiver.\nInstallation To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install. Note: root privileges (sudo) may be required to install.\nTroubleshooting The msdd_configuration property is used to setup the basic network connectivity between the MSDD hardware and the REDHAWK device. In this struct property, the IP and port of the MSDD must be setup in order the software to connect.\nFEI Compliance Test Results See the FEI Compliance Results document.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/components/rh.rbdsdecoder.readme/",
	"title": "rh.RBDSDecoder",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.RBDSDecoder Description Contains the source and build script for the REDHAWK rh.RBDSDecoder component. This component decodes RBDS data from broadcast FM using the RBDS Standard Specification.\nInstallation To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/devices/rh.rtl2832u.readme/",
	"title": "rh.RTL2832U",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.RTL2832U Description Contains the source and build script for the REDHAWK rh.RTL2832U device. Realtek RTL2832U usb dongle device using librtlsdr. Supports various tuners, including Elonics E4000, Rafael Micro R820T and R828D, Fitipower FC0012 and FC0013, and FCI FC2580.\nDependencies This device depends on the RTL SDR library, version 0.5.2.\nInstallation This asset requires the librtlsdr library. This must be installed in order to build and run this asset. To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install.\nUsage Prior to launching this device, the LD_LIBRARY_PATH may need to be updated to include the librtlsdr library (i.e. export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib).\nThere is currently a bug where the RTL interface may not work when the device debug level is set at \u0026lsquo;DEBUG\u0026rsquo; or \u0026lsquo;TRACE\u0026rsquo;. If issues occur and your debug level is at \u0026lsquo;DEBUG\u0026rsquo; or \u0026lsquo;TRACE\u0026rsquo;, try and set the debug level as \u0026lsquo;INFO\u0026rsquo;.\nFEI Compliance Test Results See the FEI Compliance Results document.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/libraries/rh.redhawkdevutils.readme/",
	"title": "rh.RedhawkDevUtils",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.RedhawkDevUtils Description Contains the source and build script for the REDHAWK rh.RedhawkDevUtils shared library.\nInstallation To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/components/rh.siggen.readme/",
	"title": "rh.SigGen",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.SigGen Description Contains the source and build script for the REDHAWK rh.SigGen component, a signal generator that creates different output signals based on its configuration. It contains an implementation in each of the supported languages (Python, C++, Java) as an example of a component with multiple implementations.\nInstallation To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/components/rh.sinksdds.readme/",
	"title": "rh.SinkSDDS",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.SinkSDDS Table of Contents  Description Installation Design Properties SRI Keywords Known Issues  Description The rh.SinkSDDS component takes in a single BulkIO stream on one of the three input ports and serves a single SDDS stream over the provided multicast or unicast address. The component is currently limited to a single stream. The component performs a BulkIO attach call on any existing connections at start and calls attach on any dynamically made connections during runtime. BulkIO SRI is used to set the SDDS header information unless overridden via properties, and the SRI is passed across the SDDS BulkIO connection to any downstream components. See the Properties section for information on overriding SDDS header values and the SRI Keywords section for information on KEYWORDs created.\nInstallation To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install. Note: root privileges (sudo) may be required to install.\nDesign The code is divided into two main classes, the component class and the templated BulkIOToSDDS processor class. The component class contains three instances of the processor class, one for each port type: float, short, and octet.\nThe component class is responsible for the following actions:\n Stream listeners - The component class registers new stream listeners and removes stream listeners for each port so that it can provide the appropriate processor with the new stream. It is also the only entity aware of all three BulkIO to SDDS processors so it ensures that only a single stream is active when new streams come in. Property callbacks - Using the setPropertyConfigureImpl API, the component class intercepts the REDHAWK configure call for the struct properties and ensures that the component is not running when trying to set these properties. New Connection Listener - When a new dynamic connection is made after the component is already running, the SRI and BulkIO Attach calls need to be made. The component class informs the processor classes of new dynamic connections so this may occur. Socket creation - The component class is responsible for creating the unicast or multicast socket connection and throwing an appropriate exception if the socket cannot be opened. A successful socket creation is then handed down to the processor classes to reference. Start/Stop API - The component class overrides the start/stop REDHAWK calls so that it can create the socket and start the appropriate processors. During stop, it cleans up the processor threads and closes the socket. The traditional service function/process thread is not used by this component.  The BulkIOToSDDSProcessor class is a templated class so that it can handle any of the current port types. It is responsible for the following actions:\n Pulling data from BulkIO - Using the stream API, the processor will attempt to pull exactly 1024 bytes, the SDDS payload size, from the BulkIO stream. This may not always be the case due to end of streams, SRI changes, and so forth, which is discussed in more depth below. Setting SDDS header values - Fields such as, but not limited to the SDDS timing, frequency, and complex field are derived from the BulkIO SRI. Optionally a user may override these fields. Pushing SDDS Packets - Using the socket connection passed in from the component class, the processor class will push SDDS packets down to the kernel using the sendmsg API and the scatter/gather approach. The scatter/gather approach allows the packet to be divided into three separate arrays:  SDDS Header Template - The class has a single SDDS header that is updated for each packet. SDDS Payload - Read from BulkIO; this is usually 1024; however, can be less on an EOS or SRI change. Zero Padding - Generally not used, but in cases where the SDDS Payload is less than 1024, the packet is padded.   Properties Properties and their descriptions are below. Struct props are shown with their struct properties in a table below:\nnetwork_settings - Settings for the network connection.\n   Struct Property Description     interface The network interface you intend to be present or blank if no check is needed. Do not include the VLAN in the interface name. (For example, for eth0.28 the interface should be set to \u0026ldquo;eth0\u0026rdquo; NOT \u0026ldquo;eth0.28\u0026rdquo;).   ip_address For the unicast case, this is the destination IP address to send the UDP packets. For the multicast case, this is the multicast group.   port UDP port used to publish data. (default SDDS port is: 29495)   vlan UDP port used to publish data.    sdds_settings - Settings related to standard fields in the SDDS Packet or data portion that cannot be derived from BulkIO metadata.\n   Struct Property Description     standard_format The SF (Standard Format) field is used to identify whether or not the packet conforms to the SDDS standard. For SDDS standard packets, the SF bit shall be set to a value of 1. The SF bit shall be set to a value of zero for non-standard packets.   original_format The OF (Original Format) field identifies the original format of the data transmitted. If the data was originally offset binary and has been converted to 2\u0026rsquo;s complement, the OF value is set to one. Otherwise, the data is 2\u0026rsquo;s complement and has not been converted and the OF value is set to zero.   spectral_sense The SS (Spectral Sense) field identifiees whether or not the spectral sense has been inverted from the original input. The SS value is set to one if the spectral sense has been inverted. The SS value is set to zero if the spectral sense has not been inverted.   endian_representation The endianness (Big or Little) of the data portion of the SDDS packet. Defaults to Network Byte Order (Big Endian). This will also affect the SRI keyword DATA_REF_STR and set it appropriately.    sdds_attach_settings - Settings related to the BulkIO based SDDS Attach and detach API.\n   Struct Property Description     time_tag_valid Used only in the attach call. The attach call is made prior to the bulkIO TimeStamp being available so the true BULKIO::TCS_VALID flag cannot be checked. This is only used during the call to attach.   user_id Used as a parameter to the attach call.   downstream_give_sri_priority Informs downstream components, via the BULKIO_SRI_PRIORITY keyword, to override the xdelta and real/complex mode found in the SDDS Packet header in place of the xdelta and mode found in the supplied SRI.    override_sdds_header - Used to optionally override values in the SDDS header which would otherwise be derived from BulkIO metadata or set to a reasonable value.\n   Struct Property Description     enabled If true, the values in this struct will override the default values used by this component. Each property should have a description which explains what values would otherwise be used.   dmode The data mode field identifies the structure of the data field. See the full specification for details. Unless overridden, this is set to 1 for byte samples, 2 for shorts, and 0 for floats as floats are not part of the standadr.   bps The number of bits per sample where the sample size in this case is only refering to the size of the native type used eg. byte, short, float. Bytes are 8, Shorts 16, and since only 5 bits are available, a float is labeled as 31 rather than 32. Unless overridden, this is derived from the sizeof call on the native bulkIO packet type.   cx Denotes if the data portion of the packet represents real (0) or complex (1) values. Unless overridden, this is derived from the mode field within the SRI.   msv Denotes if the samples within this packet span a 1-millisecond boundry. Unless overridden, this field is not used and set to zero.   ttv Time Tag Valid field denotes if the values stored within the Time Tag information fields (Time Tag, Time Tag Extension) are valid. Unless overridden, this is derived from the tcstatus field of BulkIO Timestamps and is set to true if equal to TCS_VALID and false otherwise.   sscv Synchronous Sample Clock Valid field is 1 if the SSC information fields (dfdt and frequency) are valid and zero otherwise. Unless overridden, this is always set to 1.   msptr Points to the first sample in the data field that occurred after the 1-millisecond event. Unless overridden, this is always set to 0.   msdel The 1-ms Delta is the time difference between the 1-millisecond event and the first positive going transistion of the SSC that occurred after the 1-millisecond event. Unless overridden, this is always set to 0.   frequency The frequency field contains the frequency of the SSC. This value represents the instantaneous frqeuency of the SSC associated with the first sample of the frame. Unless overridden, this is derived from the xdelta found in the SRI.   dfdt This field measures the rate at which the frequency is changing. The value represents the delta between the instantaneous frequency of the last SSC of the packet and the instantaneous frequency of the first SSC of the packet divided by the packet duration. Unless overridden, this is set to 0.0.    SRI Keywords The SinkSDDS component does not check for or react to any specific keywords. Any keywords which exist in the given SRI are forwarded to downstream components unless they are the same keywords written to by SinkSDDS in which case SinkSDDS will override the values.\n BULKIO_SRI_PRIORITY - If the sdds_attach_settings::downstream_give_sri_priority property is set to true, the BULKIO_SRI_PRIORITY keyword will be set with a value of one. If the sdds_attach_settings::downstream_give_sri_priority property is set to false, the BULKIO_SRI_PRIORITY keyword will not be added. DATA_REF_STR - If the sdds_settings::endian_representation property is set to LITTLE_ENDIAN (0) the DATA_REF_STR keyword will be set to 43981 (0xABCD) while if the sdds_settings::endian_representation property is set to BIG_ENDIAN (1) the DATA_REF_STR keyword will be set to 52651 (0xCDAB).  Known Issues  Calculation of dfdt field - Currently the dfdt field in the SDDS header defaults to zero unless overridden by the user. The dfdt field is supposed to represent the change in sample clock frequency in units of Hz/sec between the first and last sample in the SDDS packet. This exact information is not found in BulkIO, so a direct mapping is not possible; however, BulkIO does allow you to check if multiple timestamps are available. Some estimation based on that may be possible. Change of BulkIO Mode - Changing the BulkIO mode field mid-stream is not recommended, a user should send an EOS and start a new stream with the changed mode. The component will gracefully deal with a mode change though with the following outcomes. Going from Real-\u0026gt;Complex this will cause 1 SDDS packets worth of data to have an incorrect time stamp. Going from Complex-\u0026gt;Real will cause a single packet to be erroneously padded with zeros.  "
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/components/rh.sinkvita49.readme/",
	"title": "rh.SinkVITA49",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.SinkVITA49 Description Contains the source and build script for the REDHAWK rh.SinkVITA49 component. The rh.SinkVITA49 component creates a UDP/multicast or TCP VITA49 packet stream and converts the data and SRI Keywords to IF data packets and Context packets for use within/between/outside of a REDHAWK domain application.\nInstallation This asset requires the rh.VITA49 shared library. This shared library must be installed in order to build and run this asset. To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install. Note: root privileges (sudo) may be required to install.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/components/rh.sourcesdds.readme/",
	"title": "rh.SourceSDDS",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.SourceSDDS Table of Contents  Description Installation Design Properties Usage Unimplemented Optimizations  Description The rh.SourceSDDS consumes a single SDDS formatted multicast or unicast UDP stream and outputs it via the corresponding BulkIO port. The component provides a number of status properties including buffer monitoring of both kernel space socket and internal component buffers. Source IP and port information may either be expressed via the attachment override property or via the BulkIO SDDS ports attach call. See the properties and SRI section for details on how to configure the components advanced optimizations and the list of SRI keywords checked for within the component.\nInstallation To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install. Note: root privileges (sudo) may be required to install.\nDesign The design goals for this component were to provide a clean, easy to follow, SourceSDDS implementation that could not only ingest at the expected data rates but also provide status metrics for the data flow, multi-cast configuration debugging, and test cases to profile the max ingest speed.\nThe dataflow and source code can be broken up into four distict sections; component logic, socket reader, internal buffers, and the SDDS to bulkIO processor. The component class has no service loop and instead starts two threads on start; the socket reader and the SDDS to BulkIO processor. The socket reader thread pulls a user defined number of SDDS packets off the socket at a time and places them into the shared buffer for the SDDS to BulkIO thread to consume and push out the BulkIO ports.\nProperties Properties and their descriptions are below, struct props are shown with their struct properties in a table below:\n_advancedoptimizations - A set of optimizations that may help adjust throughput performance. The defaults values work well for most systems.\n   Struct Property Description     buffer_size The maximum number of elements (SDDS Packets) which can be held within the internal buffer. If there is down stream back pressure this buffer will start to fill first and provide pressure on the socket buffer if full. Current fullness is displayed within status struct   udp_socket_buffer_size The socket buffer size requested via a call to setsockopt. Once the socket is opened, the user provided value will be replaced with the true value returned by the kernel. Note that the actual value set will depend on system configuration; in addition, the kernel will double the value to allow space for bookkeeping overhead.   pkts_per_socket_read The maximum number of SDDS packets read per read of the socket. The recvmmsg system call is used to read multiple UDP packets per system call, and a non-blocking socket used so at most, pkts_per_socket_read will be read.   sdds_pkts_per_bulkio_push The number of SDDS packets to aggregate per BulkIO pushpacket call. Note that situations such as a TTV change, or packet drops may cause push packets to occur before the desired size is achieved. Increasing this value will improve throughput performance but impact latency. It also has an affect on timing precision as only the first SDDS packet in the group\u0026rsquo;s time stamp is preserved in the BulkIO call.   socket_read_thread_affinity Set using the same bitmask syntax (eg. FFFFFFFF) as taskset and limits the CPU affinity of the thread which reads from the socket to only the specified CPUs. If externally set, this property will update to reflect the actual thread affinity   sdds_to_bulkio_thread_affinity Set using the same bitmask syntax (eg. FFFFFFFF) as taskset and limits the CPU affinity of the thread which consumes packets from the internal buffer, and makes the call to pushpacket   socket_read_thread_priority If set to non-zero, the scheduler type for the socket reader thread will be set to Round Robin and the priority set to the provided value using the pthread_setschedparam call. Note that rtprio privileges will need to be given to user running the component and that in most cases, this feature is not needed to keep up with data rates.   sdds_to_bulkio_thread_priority If set to non-zero, the scheduler type for the SDDS to BulkIO processor thread will be set to Round Robin and the priority set to the provided value using the pthread_setschedparam call. Note that rtprio privileges will need to be given to user running the component and that in most cases, this feature is not needed to keep up with data rates.   check_for_duplicate_sender If true, the source address of each SDDS packet will be checked and a warning printed if two different hosts are sending packets on the same multicast address. This is used primarily to debug the network configuration and can impact performance so is disabled by default.    _attachmentoverride - Used in place of the SDDS Port to establish a multicast or unicast connection to a specific host and port. If enabled, this will overrule calls to attach however any SRI received from the attach port will be used.\n   Struct Property Description     enabled Denotes if the attachment override values should be used.   ip_address For the unicast case this is the IP address of the network interface to bind to where the address of 0.0.0.0 is acceptable. For the multicast case this is the multicast group to join.   vlan VLAN of the interface carrying the SDDS traffic. Ignored if set to 0.   port Source port of SDDS traffic (default SDDS port is: 29495)   endianness The endianness (Big or Little) of the data portion of the SDDS packet. Defaults to Network Byte Order (Big Endian)    interface - The network interface you intend to be present or blank if no check is needed. Do not include the VLAN in the interface name. (eg. For eth0.28 the interface should be set to \u0026ldquo;eth0\u0026rdquo; NOT \u0026ldquo;eth0.28\u0026rdquo;).\n_advancedconfiguration - Configuration options that affect when and how to forward SDDS packets to BulkIO\n   Struct Property Description     push_on_ttv If set to true, a push packet will occur on any state change of the SDDS Time Tag Valid (TTV) flag. Eg. If TTV goes from True to False, all currently buffered data will be sent with a push packet and the next packet will start with the TTV False data. The TCS_INVALID flag will be set in the BulkIO timing field if the TTV flag is false.   wait_on_ttv If set to true, no BulkIO packets will be pushed unless the SDDS Time Tag Valid (TTV) flag is set to true. Any packets missed due to invalid Time Tag will be counted as dropped / missed packets.    status - A read only status structure to monitor the components performance as well as dropped packets and timing slips.\n   Struct Property Description     expected_sequence_number The next SDDS sequence number expected. Useful to confirm SDDS packets are being received.   dropped_packets The number of lost SDDS packets. For simplicity, the calculation includes the optional checksum packets in the lost SDDS packet count (sent every 31 packets) so it may not reflect the exact number of dropped packets if checksum packets are not used (and they never are).   bits_per_sample The size (in bits) of the SDDS sample datatype which is derived from the bps field in the SDDS header. Values map from: (8 -\u0026gt; Byte), (16 -\u0026gt; Short), (32 -\u0026gt; Float)   empty_buffers_available The number of empty SDDS buffers in the internal buffer that are available to the socket reader. Note empty_buffers_available + buffers_to_work may be less than the total buffer size as the socket reader pops off pkts_per_socket_read and the BulkIO thread pops sdds_pkts_per_bulkio_push.   buffers_to_work The number of full SDDS buffers in the internal buffer that need to be converted to BulkIO by the SDDS to BulkIO processor. Note empty_buffers_available + buffers_to_work may be less than the total buffer size as the socket reader pops off pkts_per_socket_read and the BulkIO thread pops sdds_pkts_per_bulkio_push.   udp_socket_buffer_queue The current size of the kernels UDP buffer for the specific IP and port in use by this component. The data is parsed from /proc/net/udp. Note that multiple consumers may read from the same IP and socket and will appear to have unique lines the /proc/net/udp file however; the kernel keeps a single buffer for all consumers so this property reflects the max value of \u0026ldquo;fullness\u0026rdquo; as the slowest process will cause all processes to miss packets.   num_udp_socket_readers The number of consumers on this socket. The data is parsed from /proc/net/udp.   input_address The current host IP address in use either via the attachment override or attach call.   input_port The current host port in use either via the attachment override or attach call.   input_vlan The current host vlan in use either via the attachment override or attach call.   input_endianness The endianness set either via SRI keywords or attachment override.   input_samplerate The current samplerate, derived from either the SRI or the frequency field of the SDDS packet. The sample rate supplied by the attach call is ignored!   input_stream_id The stream id set via SRI. A default is used if no stream ID is passed via SRI.   time_slips The number of time slips which have occurred. A time slip could be either a single time slip event or an accumulated time slip. A single time slip event is defined as the SDDS timestamps between two SDDS packets exceeding a one sample delta. (eg. there was one sample time lag or lead between consecutive packets) An accumulated time slip is defined as the absolute value of the time error accumulator exceeding 0.000001 seconds. The time error accumulator is a running total of the delta between the expected (1/sample_rate) and actual time stamps and should always hover around zero.   num_packets_dropped_by_nic Read from /sys/class/[interface]/statistics/rx_dropped, indicates the number of packets received by the network device that are not forwarded to the upper layers for packet processing. This is NOT an indication of full buffers but instead a hint that something may be missconfigured as the NIC is receiving packets it does not know what to do with. See the network driver for the exact meaning of this value.   interface The network interface currently in use by the component for consuming data from the network.    Usage SourceSDDS ingests network SDDS and outputs BULKIO data as octet, short, or float. The component receives information on how and where to consume the network data either from receiving and attach() and pushSRI() call in the dataSddsIn port or by using the attachment_override property. The component has a property for the network \u0026ldquo;interface\u0026rdquo; indicating which network interface on the host computer must be used in order to receive the network data. If the interface is left blank the component will try to resolve the correct interface based on the IP address and VLAN of the desired incoming data. Once the component has acquired the network stream it will remove the the SDDS network headers package the data as BULKIO and push it out the appropriate BULKIO port.\nSRI SRI can be fed into the SDDS port for the purpose of overriding the SDDS header, setting a stream ID, and passing along keywords. By default, the xdelta/sample rate is derived from the SDDS header. The sample rate supplied with the attach call is always ignored. Optionally, you may override the xdelta via keywords. Below is the list of keywords that are read by this component and its response.\n BULKIO_SRI_PRIORITY or use_BULKIO_SRI or sddsPacketAlt - Used to override the xdelta and real/complex mode found in the SDDS Packet header in place of the xdelta and mode found in the supplied SRI. dataRef or DATA_REF_STR - Used to set the endianness of the SDDS data portion. A string value of \u0026ldquo;43981\u0026rdquo; or \u0026ldquo;1234\u0026rdquo; will map to little endian while \u0026ldquo;52651\u0026rdquo; or \u0026ldquo;4321\u0026rdquo; will map to big endian.  Unimplemented Optimizations This is a short list of additional optimizations which were considered but not implemented. Generally the reason for not implementing them was a choice of code simplicity / maintainability over increased performance. The current performance seems fast enough and I was hesitant to add the additional complexity if there was no driving factor. If in the future there is a driving factor behind increasing performance further, here is where I would start.\n Wait free, lock free queue - Thread contention is likely the largest factor holding back speed. In C++11 and boost 1.55 there are wait free, lock free queues which could be used. A possible C++0x compliant queue can be found here  but is untested. Using a lock free queue would allow the socket reader thread to more quickly get back to reading the socket as packets are generally dropped when one cannot service the socket fast enough.\n Plain pointers over smart pointers - Smart pointers are used to simplify memory management however smart pointers are twice the size of a standard pointer and when dropped out of scope cause a write to the internal reference counter.\n Circular buffer over deque - deques are pretty fast as they allocate memory in chunks but they still require some memory allocation on the fly and are not contiguous which may impact cache performance. If you ditch the smart pointers, it may make sense to ditch the deque in place of a circular buffer. Some limited testing was done using a circular buffer with smart pointers but no obvious performance difference was seen.\n Reduce number of memcopies in SDDS to BulkIO thread - Currently, a memcopy occurs pulling the data portion of the SDDS Packet out and into the BulkIO packet. This memcopy could be avoided if the SDDS Data is copied into a contiguous portion of memory right off of the socket. This is possible with two changes. The pool of SDDS Packets data portions would need to be constructed in a contiguous block; this would require changes to the SmartPacketBuffer. To get the socket to write into two different memory blocks a second iovec would be made. Then one could directly point to to the internal buffer on the push packet as long as the push packet did not span the end of the memory block.\n  "
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/components/rh.sourcevita49.readme/",
	"title": "rh.SourceVITA49",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.SourceVITA49 Description Contains the source and build script for the REDHAWK rh.SourceVITA49 component. The rh.SourceVITA49 component connects to a UDP/multicast or TCP VITA49 packet stream and converts the headers to SRI Keywords and data to the BULKIO interface of the user\u0026rsquo;s choice for use within REDHAWK domain applications.\nInstallation This asset requires the rh.VITA49 shared library. This shared library must be installed in order to build and run this asset. To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install. Note: root privileges (sudo) may be required to install.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/components/rh.tunefilterdecimate.readme/",
	"title": "rh.TuneFilterDecimate",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.TuneFilterDecimate Description Contains the source and build script for the REDHAWK rh.TuneFilterDecimate component. This component selects a narrowband cut from an input signal. Tuning, filtering and decimation are used to remove noise and interference in other frequency bands and reduce the sampling rate for more efficient downstream processing.\nInstallation This asset requires the rh.dsp and rh.fftlib shared libraries. These must be installed in order to build and run this asset. To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/devices/rh.usrp_uhd.readme/",
	"title": "rh.USRP_UHD",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.USRP_UHD Description Contains the source and build script for the REDHAWK rh.USRP_UHD device. This device is a FRONTEND Interfaces compliant device for the USRP that requires the UHD host code and supporting libraries to be installed.\nInstallation This asset requires the uhd library, which must be installed in order to build and run this asset. To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install. Note: root privileges (sudo) may be required to install.\nTroubleshooting The UHD software will raise a RuntimeError exception when the firmware and/or fpga image flashed to the USRP hardware is incompatible with the UHD software installed on the host system. To ensure that the firmware and fpga image are compatible with the UHD software, run the uhd_usrp_probe command and check for a RuntimeError to occur. If no error occurs, everything is compatible.\nIt may be necessary to identify the specific USRP target hardware when running uhd_usrp_probe. For example, uhd_usrp_probe --args=\u0026quot;addr=192.168.10.2\u0026quot; may be used to target a network-attached USRP where 192.168.10.2 is the IP address of the USRP hardware.\nIf there is an error, the message should indicate how to go about fixing the error. Typically, the solution is to flash the USRP hardware with compatible firmware and/or a compatible fpga image. The firmware and fpga images are available by installing the uhd-firmware package using yum or rpm. This package is included with REDHAWK yum repository, but must be installed explicitly.\nThe RuntimeError should be similar to one of the following examples:\nUSRP X3xx Series\nRuntimeError: Expected FPGA compatibility number 19, but got 13: The FPGA image on your device is not compatible with this host code build. Download the appropriate FPGA images for this version of UHD. Please run: \u0026quot;/usr/lib64/uhd/utils/uhd_images_downloader.py\u0026quot; Then burn a new image to the on-board flash storage of your USRP X3xx device using the image loader utility. Use this command: \u0026quot;/usr/bin/uhd_image_loader\u0026quot; --args=\u0026quot;type=x300,addr=192.168.10.2\u0026quot; For more information, refer to the UHD manual: http://files.ettus.com/manual/page_usrp_x3x0.html#x3x0_flash  USRP N2xx Series\nRuntimeError: Please update the firmware and FPGA images for your device. See the application notes for USRP2/N-Series for instructions. Expected FPGA compatibility number 11, but got 10: The FPGA build is not compatible with the host code build. Please run: \u0026quot;/usr/local/lib/uhd/utils/uhd_images_downloader.py\u0026quot; \u0026quot;/usr/local/lib/uhd/utils/usrp_n2xx_simple_net_burner\u0026quot; \\ --addr=\u0026quot;192.168.10.2\u0026quot;  Note: The path to the UHD utilities mentioned in the messages above may be different on your system. The path will typically begin with /usr or /usr/local, and the library may either be in lib or lib64.\nHardware Compatibility UHD versions prior to 3.9.0 only support a subset of the X300/X310 hardware and firmware. X3xx devices with a hardware revision number from 0 to 6 and a firmware version of 3.x or lower will work with UHD prior to 3.9.0. Firmware version 4.0 or later, as well as hardware revision number 7 or later, require UHD version 3.9.0 or later.\nFEI Compliance Test Results See the FEI Compliance Results document.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/libraries/rh.vita49.readme/",
	"title": "rh.VITA49",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.VITA49 Description Contains the source and build script for the REDHAWK rh.VITA49 shared library.\nInstallation To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install. Note: root privileges (sudo) may be required to install.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/components/rh.agc.readme/",
	"title": "rh.agc",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.agc Description Contains the source and build script for the REDHAWK rh.agc component. This component provides automatic gain control to normalize power levels for real or complex signals.\nInstallation This asset requires the rh.dsp shared library. This must be installed in order to build and run this asset. To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/components/rh.autocorrelate.readme/",
	"title": "rh.autocorrelate",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.autocorrelate Description Contains the source and build script for the REDHAWK rh.autocorrelate component. This component is a frequency domain implementation of a windowed autocorrelation algorithm. This algorithm works by windowing the input data to break it up into separate frames. Each frame is independently autocorrelated with each other using a \u0026quot;full\u0026quot; autocorrelation, which includes the full transient response. This is efficiently computed in the frequency domain.\nInstallation This asset requires the rh.dsp and rh.fftlib shared libraries. These must be installed in order to build and run this asset. To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/waveforms/rh.basic_components_demo.readme/",
	"title": "rh.basic_components_demo",
	"tags": [],
	"description": "",
	"content": " REDHAWK basic_components_demo Description Contains the source and build script for the REDHAWK basic_components_demo waveform. This waveform is an example using a few core assets. Data from an rh.SigGen is created and manipulated to demonstrate the use of REDHAWK.\nInstallation This is a waveform project; therefore, it does not need to be built. It must be installed into the $SDRROOT/dom/waveforms directory. To install it, open the project in the REDHAWK IDE and drag it into the Target SDR folder.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/libraries/rh.bluefilelib.readme/",
	"title": "rh.blueFileLib",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.blueFileLib Description Contains the source and build script for the REDHAWK rh.blueFileLib shared library.\nInstallation To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/libraries/rh.dsp.readme/",
	"title": "rh.dsp",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.dsp Description Contains the source and build script for the REDHAWK rh.dsp shared library.\nInstallation To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/components/rh.fastfilter.readme/",
	"title": "rh.fastfilter",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.fastfilter Description Contains the source and build script for the REDHAWK rh.fastfilter component. This component is a FIR filter implementation using the FFT-based overlap-add technique.\nInstallation This asset requires the rh.dsp and rh.fftlib shared libraries. These must be installed in order to build and run this asset. To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/components/rh.fcalc.readme/",
	"title": "rh.fcalc",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.fcalc Description Contains the source and build script for the REDHAWK rh.fcalc component. This component allows users to perform calculations on one or two input streams simultaneously on an element by element basis. Set the equation property for the function you wish to calculate with the variable a as the first input and b as the second input.\nInstallation To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/libraries/rh.fftlib.readme/",
	"title": "rh.fftlib",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.fftlib Description Contains the source and build script for the REDHAWK rh.fftlib shared library.\nInstallation To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/components/rh.psd.readme/",
	"title": "rh.psd",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.psd Description Contains the source and build script for the REDHAWK rh.psd component. FFT-based power spectral density (PSD) component that transforms data from the time domain to the frequency domain. Output data is framed data where each frame contains the frequency domain representation of a subsection of the input.\nInstallation This asset requires the rh.dsp and rh.fftlib shared libraries. These must be installed in order to build and run this asset. To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/components/rh.psk_soft.readme/",
	"title": "rh.psk_soft",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.psk_soft Description Contains the source and build script for the REDHAWK rh.psk_soft PSK demodulator component. The component takes complex baseband pre-d data and does a PSK demodulation of either BPSK, QPSK, or 8-PSK and outputs symbols and bits. Input must be an integer number of samples per symbol (recommended 8-10).\nInstallation To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/waveforms/rh.short_file_to_float_file.readme/",
	"title": "rh.short_file_to_float_file",
	"tags": [],
	"description": "",
	"content": " REDHAWK short_file_to_float_file Description Contains the source and build script for the REDHAWK short_file_to_float_file waveform. This waveform reads in a file containing shorts, converts them to floats in REDHAWK and then writes out the file. This waveform uses three components, rh.FileReader, rh.DataConverter, and rh.FileWriter.\nInstallation This is a waveform project; therefore, it does not need to be built. It must be installed into the $SDRROOT/dom/waveforms directory. To install it, open the project in the REDHAWK IDE and drag it into the Target SDR folder.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/components/rh.sinksocket.readme/",
	"title": "rh.sinksocket",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.sinksocket Table of Contents  Description Properties Installation Usage  Description The rh.sinksocket component reads data from BulkIO ports and writes the same data to all TCP connections. Each rh.sinksocket component can operate multiple TCP connections (TCP clients or servers).\nThe Properties section explains how to configure the component and monitor its data throughput. The component supports the following configurations:\n TCP mode (client or server) IP address (for TCP client mode) ports whether Nagle\u0026rsquo;s algorithm for combining TCP packets is allowed whether and how endian byte reordering is done  Properties The following table describes the top level properties of rh.sinksocket.\n   NAME TYPE ACCESS DESCRIPTION     total_bytes double readonly Number of bytes sent over the network by all connections combined.   bytes_per_sec float readonly Bytes-per-second, for data sent over the network, for all connections combined.   Connections [Connection] read/write A list of data structures, each defining an rh.sinksocket Connection.   ConnectionStats [ConnectionStat] readonly A list of data structures, each with information about a TCP connection.    The following table describes the properties within a single Connection. If an rh.sinksocket is created without properties specified by the user, a single Connection is created with the default values given in the table.\n   NAME TYPE DEFAULT DESCRIPTION     connection_type string server Enumerated values: client, server.Set whether rh.sinksocket is a TCP client or server.   ip_address string \u0026quot;\u0026quot; If this Connection is a TCP client, set the IP address to which it will connect.If this Connection is a TCP server, this value is ignored.   ports [ushort] [32191] If this Connection is a TCP client, set the list of port numbers to which rh.sinksocket will connect.If this Connection is a TCP server, set the list of port numbers on which rh.sinksocket will listen.   tcp_nodelays [boolean] [false] If tcp_nodelay is true, prevent the TCP connection from combining packets with Nagle\u0026rsquo;s algorithm.   byte_swap [ushort] [0] Reorder bytes of integer values between little-endian and big-endian representation.Values: - 0: no byte swapping - 1: byte swap according to the data size for each port - \u0026lt;num\u0026gt;: swap bytes as if the data type length was \u0026lt;num\u0026gt;    An rh.sinksocket Connection contains a set of TCP connections. Each TCP connection corresponds to a TCP port number. These numbers are listed in the ports list. The byte_swap and tcp_nodelays lists relate to the ports list like associative arrays. That is, the first element of each corresponds to the same TCP connection. The same is true for the nth element of each list.\nThe following table describes the properties within a single ConnectionStat. Each ConnectionStat contains information about one of the TCP connections within an rh.sinksocket Connection.\n   NAME TYPE DESCRIPTION     ip_address string The IP address of the Connection. If the Connection is type server, this value will be blank.   port ushort The TCP port of the connection.   status string The status of the connection.Enumerated values: startup, not_connected, connected, error.   bytes_per_second float Number of bytes sent over the network by the connection.   bytes_sent double Bytes-per-second, for data sent over the network, for the connection.    Installation The following procedure explains how to install rh.sinksocket from source. rh.sinksocket is one of the REDHAWK basic assets. For information about how to install the REDHAWK basic assets from RPMs, refer to the REDHAWK Manual.\n Ensure OSSIEHOME and SDRROOT are both set. For a standard install, enter the following commands to set them:  $ cd /etc/profile.d $ . redhawk.sh $ . redhawk-sdrroot.sh  To build and install rh.sinksocket, enter the following commands:  $ cd /path/to/redhawk/assets $ cd $(find . -name sinksocket) $ ./build.sh install  The rh.sinksocket executable is created in the cpp subdirectory, and then the component is installed to SDRROOT.\nUsage The following examples explain how to use the rh.sinksocket component.\n Example 1: rh.sinksocket as a server in the REDHAWK sandbox Example 2: rh.sinksocket as a client in the REDHAWK sandbox Example 3: rh.sinksocket as a server in a REDHAWK waveform Example 4: rh.sinksocket as a client in a REDHAWK waveform  All of the examples configure the component to use two ports. One port does not swap byte endianness, while the other swaps bytes for a data word size of 2. The first port allows packet combining with Nagle\u0026rsquo;s algorithm, while the second does not. However, packet combining is not observable in these examples.\nNote: For the sandbox examples, a version of netcat must be installed.\nExample 1: rh.sinksocket as a Server in the REDHAWK Sandbox Running the Example  Save the following python code to a file named demo.py. ```python #!/usr/bin/env python  from pprint import pprint\nfrom ossie.utils import sb\nUse a StreamSource to provide demo data. streamsource = sb.StreamSource()\nCreate the rh.sinksocket. props = { \u0026lsquo;Connections\u0026rsquo;: [ { \u0026lsquo;connection_type\u0026rsquo;: \u0026lsquo;server\u0026rsquo;, \u0026lsquo;ports\u0026rsquo;: [32191, 32192], \u0026lsquo;byte_swap\u0026rsquo;: [0, 2], \u0026lsquo;tcp_nodelays\u0026rsquo;: [False, True], } ] } sinksocket = sb.launch(\u0026lsquo;rh.sinksocket\u0026rsquo;, properties=props) streamsource.connect(sinksocket, providesPortName=\u0026lsquo;dataChar_in\u0026rsquo;)\nsb.start()\nManually send data, or quit. while raw_input() != \u0026lsquo;q\u0026rsquo;: streamsource.write(\u0026lsquo;abcd..\u0026rsquo;) streamsource.close()\nDisplay connection information supported by rh.sinksocket. print \u0026lsquo;total bytes: {0}\u0026lsquo;.format(sinksocket.total_bytes) print \u0026lsquo;bytes_per_second: {0}\u0026lsquo;.format(sinksocket.bytes_per_sec) print for c in sinksocket.Connections: pprint(c, indent=4) print for c in sinksocket.ConnectionStats: pprint(c, indent=4) print\nsb.stop()\n2. Use three terminals to enter the following commands. **Note: The order of these operations is important.** * In terminal 1, enter: ```bash $ python demo.py   In terminal 2, enter:\n$ nc 127.0.0.1 32191 In terminal 3, enter:\n$ nc 127.0.0.1 32192   In terminal 1, press Enter a few times.\nEach time you press Enter, the data 'abcd..' is sent.\n In terminal 1, press q and Enter to quit.\n In terminals 2 and 3, press Ctrl-c to quit.\n  Analyzing the Output Terminal 1 displays the connection information produced by the print statements.\nTerminal 2 displays 'abcd..' equivalent to the number of times you pressed Enter before pressing q in terminal 1.\nTerminal 3 displays the information the same number of times as in terminal 2, but the order of the characters is 'badc..'. The first and second characters are swapped with each other as are the third and fourth, etc. This change occurred because the byte_swap property was set to 2.\nExample 2: rh.sinksocket as a Client in the REDHAWK Sandbox This is similar to Example 1, except that the component is a TCP client.\n To run the example, make these changes:   in demo.py, replace 'server' with 'client' below 'connection_type': 'client', add the following line: 'ip_address': '127.0.0.1', in terminals 2 and 3, add the -l flag after nc   Then, run this example in the same way as Example 1.  The order of operations is less important in this case. If rh.sinksocket is configured to expect a TCP server, and that server is unavailable, rh.sinksocket skips it. When the server comes online, rh.sinksocket automatically connects and starts/resumes sending data to it.\nExample 3: rh.sinksocket as a Server in a REDHAWK Waveform A waveform\u0026rsquo;s SAD file contains configuration information for its components. The following SAD file snippet contains the same configuration as Example 1. To use this in a SAD file, replace or insert the \u0026lt;componentproperties\u0026gt; section.\n\u0026lt;componentinstantiation id=\u0026#34;sinksocket_1\u0026#34;\u0026gt; \u0026lt;componentproperties\u0026gt; \u0026lt;structsequenceref refid=\u0026#34;Connections\u0026#34;\u0026gt; \u0026lt;structvalue\u0026gt; \u0026lt;simpleref refid=\u0026#34;Connection::connection_type\u0026#34; value=\u0026#34;server\u0026#34;/\u0026gt; \u0026lt;simpleref refid=\u0026#34;Connection::ip_address\u0026#34; value=\u0026#34;\u0026#34;/\u0026gt; \u0026lt;simplesequenceref refid=\u0026#34;Connection::byte_swap\u0026#34;\u0026gt; \u0026lt;values\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;value\u0026gt;2\u0026lt;/value\u0026gt; \u0026lt;/values\u0026gt; \u0026lt;/simplesequenceref\u0026gt; \u0026lt;simplesequenceref refid=\u0026#34;Connection::ports\u0026#34;\u0026gt; \u0026lt;values\u0026gt; \u0026lt;value\u0026gt;32191\u0026lt;/value\u0026gt; \u0026lt;value\u0026gt;32192\u0026lt;/value\u0026gt; \u0026lt;/values\u0026gt; \u0026lt;/simplesequenceref\u0026gt; \u0026lt;simplesequenceref refid=\u0026#34;Connections::tcp_nodelays\u0026#34;\u0026gt; \u0026lt;values\u0026gt; \u0026lt;value\u0026gt;false\u0026lt;/value\u0026gt; \u0026lt;value\u0026gt;true\u0026lt;/value\u0026gt; \u0026lt;/values\u0026gt; \u0026lt;/simplesequenceref\u0026gt; \u0026lt;/structvalue\u0026gt; \u0026lt;/structsequenceref\u0026gt; \u0026lt;/componentproperties\u0026gt; \u0026lt;/componentinstantiation\u0026gt; Example 4: rh.sinksocket as a Client in a REDHAWK Waveform A waveform\u0026rsquo;s SAD file contains configuration information for its components. The following SAD file snippet contains the same configuration as Example 2. To use this in a SAD file, replace or insert the \u0026lt;componentproperties\u0026gt; section.\n\u0026lt;componentinstantiation id=\u0026#34;sinksocket_1\u0026#34;\u0026gt; \u0026lt;componentproperties\u0026gt; \u0026lt;structsequenceref refid=\u0026#34;Connections\u0026#34;\u0026gt; \u0026lt;structvalue\u0026gt; \u0026lt;simpleref refid=\u0026#34;Connection::connection_type\u0026#34; value=\u0026#34;client\u0026#34;/\u0026gt; \u0026lt;simpleref refid=\u0026#34;Connection::ip_address\u0026#34; value=\u0026#34;127.0.0.1\u0026#34;/\u0026gt; \u0026lt;simplesequenceref refid=\u0026#34;Connection::byte_swap\u0026#34;\u0026gt; \u0026lt;values\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;value\u0026gt;2\u0026lt;/value\u0026gt; \u0026lt;/values\u0026gt; \u0026lt;/simplesequenceref\u0026gt; \u0026lt;simplesequenceref refid=\u0026#34;Connection::ports\u0026#34;\u0026gt; \u0026lt;values\u0026gt; \u0026lt;value\u0026gt;32191\u0026lt;/value\u0026gt; \u0026lt;value\u0026gt;32192\u0026lt;/value\u0026gt; \u0026lt;/values\u0026gt; \u0026lt;/simplesequenceref\u0026gt; \u0026lt;simplesequenceref refid=\u0026#34;Connections::tcp_nodelays\u0026#34;\u0026gt; \u0026lt;values\u0026gt; \u0026lt;value\u0026gt;false\u0026lt;/value\u0026gt; \u0026lt;value\u0026gt;true\u0026lt;/value\u0026gt; \u0026lt;/values\u0026gt; \u0026lt;/simplesequenceref\u0026gt; \u0026lt;/structvalue\u0026gt; \u0026lt;/structsequenceref\u0026gt; \u0026lt;/componentproperties\u0026gt; \u0026lt;/componentinstantiation\u0026gt;"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/waveforms/rh.socket_loopback_demo.readme/",
	"title": "rh.socket_loopback_demo",
	"tags": [],
	"description": "",
	"content": " REDHAWK socket_loopback_demo Description Contains the source and build script for the REDHAWK socket_loopback_demo waveform. This waveform puts REDHAWK data out onto a network socket using rh.sinksocket and then reads it back from the socket into REDHAWK via rh.sourcesocket.\nInstallation This is a waveform project; therefore, it does not need to be built. It must be installed into the $SDRROOT/dom/waveforms directory. To install it, open the project in the REDHAWK IDE and drag it into the Target SDR folder.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/components/rh.sourcesocket.readme/",
	"title": "rh.sourcesocket",
	"tags": [],
	"description": "",
	"content": " REDHAWK rh.sourcesocket Description Contains the source and build script for the REDHAWK rh.sourcesocket component. This component reads data from a TCP socket and writes it to a BulkIO port.\nInstallation To build from source, run the build.sh script. To install to $SDRROOT, run build.sh install.\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/waveforms/rh.vita49_loopback_demo.readme/",
	"title": "rh.vita49_loopback_demo",
	"tags": [],
	"description": "",
	"content": " REDHAWK vita49_loopback_demo Description Contains the source and build script for the REDHAWK vita49_loopback_demo waveform. This waveform uses the rh.sourceVITA49 and rh.sinkVITA49 components to demonstrate how VITA49 network data can move into and out of REDHAWK.\nInstallation This is a waveform project; therefore, it does not need to be built. It must be installed into the $SDRROOT/dom/waveforms directory. To install it, open the project in the REDHAWK IDE and drag it into the Target SDR folder.\n"
},
{
	"uri": "https://redhawksdr.github.io/manual/2.2-lts/",
	"title": "REDHAWK 2.2",
	"tags": [],
	"description": "",
	"content": "The REDHAWK Program Office commits to support each Long Term Support (LTS) baseline of the REDHAWK product for four years. An LTS baseline of REDHAWK is defined as: a feature complete series that may include sub-minor version releases consisting of bug fixes only. Both API and ABI forwards/backwards compatibility are guaranteed between sub-minor releases. Long Term Support (LTS) for the REDHAWK 2.2.x releases will continue through September 2022.\n REDHAWK 2.2.6 Manual REDHAWK 2.2.5 Manual REDHAWK 2.2.4 Manual REDHAWK 2.2.3 Manual REDHAWK 2.2.2 Manual REDHAWK 2.2.1 Manual REDHAWK 2.2.0 Manual  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.2-lts/",
	"title": "REDHAWK 2.2",
	"tags": [],
	"description": "",
	"content": "The REDHAWK Program Office commits to support each Long Term Support (LTS) baseline of the REDHAWK product for four years. An LTS baseline of REDHAWK is defined as: a feature complete series that may include sub-minor version releases consisting of bug fixes only. Both API and ABI forwards/backwards compatibility are guaranteed between sub-minor releases. Long Term Support (LTS) for the REDHAWK 2.2.x releases will continue through September 2022.\n "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.0-lts/release-notes-2.0.7/",
	"title": "REDHAWK Release Notes - 2.0.7",
	"tags": [],
	"description": "",
	"content": " The effort in REDHAWK 2.0.7 focused on:\n Core Framework\n Resolving soft package dependency issue so DeviceManager resolves run time environment settings when deploying Devices and Services that have soft package dependencies. Resolving issue so that during Application release, calls to the Application object no longer result in misleading errors. Improving flexibility to ignore GPP threshold checks when determining if the GPP should go into a BUSY state. Resolving issue where processes with spaces in the names would cause the GPP to terminate. Resolving issue to allow for slow startup conditions of OmniNames service before starting OmniEvents service. Resolving issue with uninitialized data structures with BulkIO and SourceSDDS that inhibited BulkIO data transfers. Resolving issue with incorrect exception being thrown during allocateCapacity. Resolving issue when shutting down orb from Python resources. Providing a warning in the logs if a message is too large. Resolving issue with the code generators so they can be run on systems with FIPS enabled. Resolving issue so generated C++ FEI Devices do not leak memory when deallocating listeners. Existing Devices must be regenerated and recompiled to apply this fix. Resolving a memory leak in FrontendTunerDevice::create(). Existing Devices must be recompiled to apply this fix. Resolving issue so the functions returnRFInfoPkt transform all fields between types frontend::RFInfoPkt and FRONTEND::RFInfoPkt. Resolving issue so BulkIO input stream calls to read() and tryread() with a sample count do not segfault when their queue contains only an empty packet with EOS set.  IDE\n Providing an option in the IDE to perform a FrontEnd Device allocation in the background to aid developers who are debugging their FrontEnd Devices. Adding the Eclipse “TM Terminal” in the IDE, a full-featured terminal emulator that provides full ANSI cursor control, readline, and coloring. Fixing links in the IDE’s help contents so REDHAWK help now displays correctly when links within the help are selected. Resolving issue so Diagram shapes no longer stack if they are part of a feedback loop.  Documentation\n Adding documentation for developing a logging configuration plug-in that will be used to resolve the LOGGING_CONFIG_URI parameter during deployment of Devices, Services and Components. Renaming the Generating Code section to Generating Code for Components and explaining the code generation process and what occurs in the IDE when the code is generated. Updating the REDHAWK User Manual with accessibility rules for all properties. Updating the REDHAWK ICD with the description of the new “property” kind.  REDHAWK Enterprise Integration\n Adding toString() method to RedhawkStruct object, ensuring the getAllocIds(RedhawkStruct s) return object is a List, and adding a helper method for retrieving allocIds called getAllocIds(). Updating REDHAWK Driver to properly clean up driver-registered Device Managers on shutdown. Adding IDL source to appropriate Core Framework jars. Incorporated additional method to produce jar bundle with manifest built dynamically via the BnD Tools, source jar, and zip of XSDs. Updating REDHAWK Java Driver and REDHAWK REST to make it easier for users to access External Properties in Waveforms. Adding implementations of ConnectionManager, AllocationManager interfaces to REDHAWK Driver. Adding utility methods for programatically setting the log level of Domain, Application, Device, and Component Resources. Adding REST access to Event Channel Manager functionality. Updating REDHAWK Driver to have wrapper methods for retrieving state, connections, activeSRIs, and UsesPortStatistics from BULKIO objects. Updating REDHAWK REST to make connections, activeSRIs, UsesPortStatistics, and state available. Adding wrapper methods to RedhawkApplication and RedhawkComponent interfaces for easier access to aware(), componentDevices(), componentProcessIds(), and componentImplementations(). REST Responses for Component and Application now display componentDevice, aware, componentProcessId, and componentImplementation information. Adding ability to get and set adminState from REDHAWK Driver and REDHAWK REST. Adding ability to view usageState and operationalState from REDHAWK Driver and REDHAWK REST. Adding ability to registerRemoteDomain, unregisterRemoteDomains, get device implementation information and a deviceConfiguration profile via REDHAWK Driver and REDHAWK REST. Preconfiguring HTTPS and WSS in REDHAWK Enterprise Integration and adding Web Server Configuration section in REDHAWK Enterprise Integration User Guide.   Fixes The following IDE and Core Framework fixes were completed in REDHAWK 2.0.7.\nRelease notes for Core Assets are available on Github (https://github.com/RedhawkSDR/) in each Core Asset repository.\nCore Framework Fixes The following Core Framework bug fixes were completed in REDHAWK 2.0.7.\n The Python Sandbox DataSource always calculates per-packet time stamps using floating point arithmetic, avoiding truncation errors when given an integer value for the sample rate. Writing to a C++ BulkIO output stream configured for complex data with real data and a list of time stamps now interprets the time stamp offsets in terms of complex samples, preserving the integrity of the time stamps. On the GPP, when nic_usage is disabled, no message is generated when the usage threshold is exceeded. Resolved issue so now files_available and threads are checked for GPP BUSY state. Clarified logging message regarding reservations. The default implementation of runTest() for Python Components and Devices throws the correct CF.TestableObject.UnknownTest error. Changed run user for omniEvents to omniORB user. Initialized internal data structure for managing blocking state for input Ports. When nic_usage is set to 0 in the thresholds property of the GPP, the GPP will enter a BUSY state, irrespective of the overall NIC usage. Thread management in the Python Component/Device base class is updated to better utilize the processor. Added support to allow LOGGING_CONFIG_URI to be passed on the command line during Component deployment irrespective of whether it was defined by the Component. On CentOS 7, C++ LoadableDevices no longer throw a CORBA::COMM_FAILURE exception from load() when the file cannot be loaded. The severity of the log message when a C++ Device cannot connect to the IDM channel has been reduced from error to warning.  Special Resolutions The following previously reported Known Issues have been closed in REDHAWK 2.0.7 with the following resolutions:\n Won’t Fix\n Struct_from_props fails during allocate_capacity in python device - This behavior is not an error. Query behavior for Optional Elements in Structs - All elements in struct properties are handled as a single configuration item. Make sendChangedProperty events safe for structs that have had attributes added - This issue was rejected.   IDE Fixes The following IDE bug fixes were completed in REDHAWK 2.0.7.\n Updated Java environment specification to Java 8 for the plotter and editor applications. Corrected some configuration data for the IDE plotter application. Corrected an issue that could cause the CORBA name browser to slow the entire UI. Resolved a code quality issue. Corrected context menu icons for simple and simple sequence Properties. Corrected some information missing from Properties when creating new FEI Devices. Corrected the remove button in the new FrontEnd Device wizard so that it is not enabled when a Property cannot be removed. Corrected an error where the Property table in the new FrontEnd Device wizard was too small to see Properties on RHEL 7 systems. Resolved ClassCastException when calling Expand All or Collapse All on a Waveform that includes a HostCollocation. Corrected the display of some spinner controls on RHEL 7. Resolved issue so Implementation tab now displays all usesdevice Property types. Ensured that some code intended only for debugging is not included in the IDE. Corrected the lightweight auto-refresh preference. Fixed NPE in FindComponentConstraint. Fixed error when terminating a C++ Component launched in debug mode. Corrected several internal configuration issues with the code generation menus/buttons for Components. Corrected an NPE that could occur when validating SAD or DCD files with references to non-existent struct sequence Properties. Corrected internal IDE code to properly indicate when XML validation problems are found. Updated SAD/DCD loggingconfig URI validation messages. Component usage name and naming service ID are now kept in sync after a graphical edit. Added missing icons in the DCD editor. Updated a missing environment specification to reflect the requirement for Java 8. The New Control Panel Project button is no longer displayed when editing a REDHAWK shared library project. Corrected an internal IDE issue that could prevent loading REDHAWK XML. Corrected a rare bug that could cause the content in the pages of an editor to become un-synchronized. The BULKIO SRI keyword CHAN_RF is now always preferred to COL_RF for center frequency when plotting. Corrected a code issue that could have suppressed Sandbox errors. The IDE no longer attempts to read Device files when browsing the Sandbox file manager. The release field in spec files created for Waveforms and Nodes is now correct. Corrected a potential code freeze when the IDE loses contact with a connected Domain. Corrected issues with UI themes in the REDHAWK Explorer product. A superfluous ODM event channel is no longer created when the display name differs from Domain name. Corrected some issues with product branding. Corrected an issue with CSS themes. Corrected a copyright notice about Eclipse software. Fixed issue with a ConcurrentModificationException occassionally occurring when using the “Monitor Ports” functionality. The icon for the PRF editor was corrected. Message is now always a selectable kind type for Struct Properties. Corrected a link in the REDHAWK help that was not working. Fixed issue where Waveforms with external Ports were not being removed from the REDHAWK Explorer view on terminate. Fixed issue where the IDL Selection Wizard filter stopped working when the Show all interfaces button was checked. The OSSIEHOME Eclipse variable should not be expanded in the IDL project’s .ecpproperties file. The connect wizard now works with Waveforms’ external Ports. When launching a Node on an existing Domain, the IDE now uses the Domain name instead of the Domain’s display name. Allocation IDs generated in the FEI usesdevice wizard of the SAD Diagram no longer contain user names. Removing a Device/Service instantiation removes the componentfile element from the DCD XML if it is not needed. Component project’s Generator combo box only displays applicable code generators. UsesDevice passes validation with any combination of accepted Properties. The Sandbox Chalkboard now shows as stopped if all Components in it are released or terminated. Improved how HostCollocations are handled by the diagram layout algorithm. A race condition was corrected that allowed a new project to be created with an invalid name.  Special Resolutions The following previously reported Known Issues have been closed in REDHAWK 2.0.7 with the following resolutions:\n Won’t Fix\n The IDE Help REDHAWK Content is not the released version of the documentation - The IDE Help REDHAWK Content includes the documentation during the IDE build process; therefore, the released version of the documentation cannot be included at that time.  Duplicate\n Hide the create control panel toolbar button for Shared Libraries (softpackage) projects - Duplicate of IDE-1958 (Control panel button shown when editing shared library in SPD editor).   Documentation Improvements/Fixes The following documentation new features/improvements/fixes were completed in REDHAWK 2.0.7.\n Updated installation instructions to include RPM that installs the GPG key. Updated the Downloads page to support both LTS and Beta Series of REDHAWK. Added documentation for configuring the REDHAWK Integration assets with JacORB. Added domainName information to REDHAWK Connector and REDHAWK Camel documentation. Corrected base URI information, defined nameserver, and added connectionName information to REDHAWK REST documentation. Updated REDHAWK Enterprise Integration User Guide RedhawkPort and RedhawkApplication information for REDHAWK Driver and REDHAWK REST. Added remoteDomainManagers to the REDHAWK ICD. Added documentation about managing GPP BUSY state. Updated FEI Allocation Wizard Tuner Allocation dialog screenshot and revised text to include new Run in background checkbox. Updated REDHAWK Enterprise Integration User Guide to include Code Examples for ConnectionManager, Logging, and AllocationManager. Updated REDHAWK Enterprise Integration User Guide code examples of EventChannelListener functionality. Updated procedure, Using the FEI Wizard to Create an FEI Device, to include the Setup Code Generation dialog and added screenshot. Updated Host Collocation procedure and replaced screenshots to correctly display collocation name created when adding a collocation. Updated screenshot of SPD editor Properties to correctly display a drop-down for the “Kind”. Updated Converting Complex Data in C++ and BulkIO High-speed data sections of User Manual. Added information to explain that octave Component numerical properties are treated as complex. Corrected property definition shown in code for multi-out Ports by removing kind elements that were underneath the simple elements. Added BurstIO Section to the REDHAWK ICD.  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/components/rh.amfmpmbasebanddemod/",
	"title": "rh.AmFmPmBasebandDemod Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/components/rh.arbitraryrateresampler/",
	"title": "rh.ArbitraryRateResampler Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/components/rh.dataconverter/",
	"title": "rh.DataConverter Release Notes",
	"tags": [],
	"description": "",
	"content": "Release notes for rh.DataConverter 5.0.0 (REDHAWK 2.2.2)\nThe following changes\n Optimized processing for available Intel IPP libraries or SSE extensions. Shared process space for component execution. BulkIO shared memory data transfers between processes residing on the same host. Logging messages use the REDHAWK 2.2.x logging API. Input and output port names comply with REDHAWK naming conventions. Property types comply with REDHAWK conventions. Improved descriptions for ports and properties. An additional help section (Asset Use) in the Readme.md explaining component configuration and use. Refactored unit tests use the REDHAWK 2.2.x sandbox API.  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/waveforms/rh.fm_rbds_demo/",
	"title": "rh.FM_RBDS_demo Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/waveforms/rh.fm_mono_demo/",
	"title": "rh.FM_mono_demo Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/components/rh.filereader/",
	"title": "rh.FileReader Release Notes",
	"tags": [],
	"description": "",
	"content": "Release notes for rh.FileReader 5.0.0 (REDHAWK 2.2.2)\n Added ability to process a meta data file captured by FileWriter to replicate the same context when playing back the data. The following context information is used when processing each data packet:\n SRI Context - streamID, hversion, xstart, xdelta, subsize, ystart, ydelta, mode, keywords/values Packet Context - streamID, data length, EOS, timecode (tcmode,tcstatus, twsec, tfsec, toff)  Added additional unit tests for meta data file handling.\n Updated version number.\n Prevented increase of CPU utilization when the asset is not playing.\n Improved handling of Big or Little Endian data formats when processing data.\n  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/components/rh.filewriter/",
	"title": "rh.FileWriter Release Notes",
	"tags": [],
	"description": "",
	"content": "Release notes for rh.FileWriter 5.0.0 (REDHAWK 2.2.2)\n Added meta data mode to capture additional processing context when saving data files. The following context information is saved for each packet of data and when SRI changes occur:\n SRI Context - streamID, hversion, xstart, xdelta, subsize, ystart, ydelta, mode, keywords/values Packet Context - streamID, data length, EOS, timecode (tcmode,tcstatus, twsec, tfsec, toff)  Added additional unit tests for meta data file handling.\n Updated version number.\n Modified bluefile keyword support so that all keywords (not just last) for a stream are written to bluefiles.\n Improved handling of Big or Little Endian data formats when processing data.\n Fixed issue with floating point comparison of timestamps in unit test.\n Increased precision for calculation of max bytes per file from advanced_properties.max_file_time property.\n  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/devices/rh.fmrdssimulator/",
	"title": "rh.FmRdsSimulator Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/components/rh.hardlimit/",
	"title": "rh.HardLimit Release Notes",
	"tags": [],
	"description": "",
	"content": " Release notes for rh.HardLimit 2.0.1 (REDHAWK 2.2.3)\nFixes  Resolved component deployment with valgrind by removing a trailing space in the Python entrypoint for HardLimit.  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/devices/rh.msdd/",
	"title": "rh.MSDD Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/components/rh.rbdsdecoder/",
	"title": "rh.RBDSDecoder Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/libraries/rh.redhawkdevutils/",
	"title": "rh.REDHAWKDevUtils Release Notes",
	"tags": [],
	"description": "",
	"content": "Release notes for rh.RedhawkDevUtils 5.0.0 (REDHAWK 2.2.2)\n Changed byte swapped formats XXX_BS to use XXX_LITTLE_ENDIAN or XXX_BIG_ENDIAN data format notations during data type conversions.  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/devices/rh.rtl2832u/",
	"title": "rh.RTL2832U Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/components/rh.siggen/",
	"title": "rh.SigGen Release Notes",
	"tags": [],
	"description": "",
	"content": " Release notes for rh.SigGen 2.0.2 (REDHAWK 2.2.3)\nFixes  Updated unit test use of sb.DataSink to use the new API. Resolved component deployment with valgrind by removing a trailing space in the Python entrypoint for SigGen.  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/components/rh.sinksdds/",
	"title": "rh.SinkSDDS Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/components/rh.sinkvita49/",
	"title": "rh.SinkVITA49 Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/components/rh.sourcesdds/",
	"title": "rh.SourceSDDS Release Notes",
	"tags": [],
	"description": "",
	"content": "Release notes for rh.SourceSDDS 2.0.0 (REDHAWK 2.2.2)\n Shared process space for component execution. BulkIO shared memory data transfers between processes residing on the same host. Logging messages use the REDHAWK 2.2.x logging API. Improved descriptions for ports and properties. An additional help section (Asset Use) in the Readme.md explaining component configuration and use. Refactored unit tests use the REDHAWK 2.2.x sandbox API. Build support binaries for test execution. Improved performance when checking packets from the same host.  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/components/rh.sourcevita49/",
	"title": "rh.SourceVITA49 Release Notes",
	"tags": [],
	"description": "",
	"content": " Release notes for rh.SourceVITA49 3.1.1 (REDHAWK 2.2.3)\nFixes  Fixed rh.SourceVITA49 to work with multicast input. Removed extra spaces from keyword identifiers.  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/components/rh.tunefilterdecimate/",
	"title": "rh.TuneFilterDecimate Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/devices/rh.usrp_uhd/",
	"title": "rh.USRP_UHD Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/libraries/rh.vita49/",
	"title": "rh.VITA49 Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/waveforms/rh.vita49_loopback_demo/",
	"title": "rh.VITA49socket_loopback_demo Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/components/rh.agc/",
	"title": "rh.agc Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/components/rh.autocorrelate/",
	"title": "rh.autocorrelate Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/waveforms/rh.basic_components_demo/",
	"title": "rh.basic_components_demo Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/libraries/rh.bluefilelib/",
	"title": "rh.blueFileLib Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/libraries/rh.dsp/",
	"title": "rh.dsp Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/components/rh.fastfilter/",
	"title": "rh.fastfilter Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/components/rh.fcalc/",
	"title": "rh.fcalc Release Notes",
	"tags": [],
	"description": "",
	"content": " Release notes for rh.fcalc 2.0.2 (REDHAWK 2.2.3)\nFixes  Resolved component deployment with valgrind by removing a trailing space in the Python entrypoint for fcalc.  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/libraries/rh.fftlib/",
	"title": "rh.fftlib Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/components/rh.psd/",
	"title": "rh.psd Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/components/rh.psk_soft/",
	"title": "rh.psk_soft Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/waveforms/rh.short_file_to_float_file/",
	"title": "rh.short_file_to_float_file Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/components/rh.sinksocket/",
	"title": "rh.sinksocket Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/waveforms/rh.socket_loopback_demo/",
	"title": "rh.socket_loopback_demo Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/components/rh.sourcesocket/",
	"title": "rh.sourcesocket Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/manual/2.0-lts/",
	"title": "REDHAWK 2.0",
	"tags": [],
	"description": "",
	"content": "Long Term Support (LTS) for current REDHAWK 2.0.X releases will continue through October 2019.\n REDHAWK 2.0.8 Manual REDHAWK 2.0.7 Manual REDHAWK 2.0.6 Manual REDHAWK 2.0.5 Manual REDHAWK 2.0.4 Manual REDHAWK 2.0.3 Manual REDHAWK 2.0.2 Manual REDHAWK 2.0.1 Manual REDHAWK 2.0.0 Manual  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.0-lts/",
	"title": "REDHAWK 2.0",
	"tags": [],
	"description": "",
	"content": "Long Term Support (LTS) for current REDHAWK 2.0.X releases will continue through October 2019.\n REDHAWK Release Notes - 2.0.8   REDHAWK Release Notes - 2.0.7   REDHAWK Release Notes - 2.0.6   REDHAWK Release Notes - 2.0.5   REDHAWK Release Notes - 2.0.4   REDHAWK Release Notes - 2.0.3   REDHAWK Release Notes - 2.0.2   REDHAWK Release Notes - 2.0.1   REDHAWK Release Notes - 2.0.0   "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.0-lts/release-notes-2.0.6/",
	"title": "REDHAWK Release Notes - 2.0.6",
	"tags": [],
	"description": "",
	"content": " The effort in REDHAWK 2.0.6 focused on:\n Initial FOSS Release of REDHAWK Enterprise Integration Assets, which provide the ability to interact with REDHAWK in a JRE environment. The REDHAWK Enterprise Integration Assets include:  REDHAWK Driver: Provides simplified access to REDHAWK via standard Java interfaces. This Asset shields all interaction with the underlying REDHAWK Components and provides a simplified API for Java developers interacting with a REDHAWK Domain. The REDHAWK Driver can be leveraged as a standalone Java Archive (JAR) file. REDHAWK OSGi Connector: Implements OSGi’s Managed Service Factory interface to allow users to register pre-configured instances of REDHAWK connections into a Karaf container. REDHAWK REST: Provides a REST Service to command and control a REDHAWK instance. REDHAWK WebSocket: Provides an HTML5-compliant WebSocket implementation that enables the ability to stream data from any REDHAWK BulkIO-enabled Port or Event Channel. Camel REDHAWK: Provides a Camel Component for interacting with a REDHAWK Domain. This Component can be connected with other Apache Camel Components as a data flow solution.   For more information about the REDHAWK Enterprise Integration Assets, refer to the REDHAWK Enterprise Integration User Guide.\n Providing diagnostic messages for log4py configuration files that contain errors and adding support to allow line continuation characters in the log configuration files. Improving the IDE\u0026rsquo;s Domain refresh logic to prevent the IDE from consuming excessive numbers of threads in some scenarios. Documenting a publisher/subscriber pattern when accessing an EventChannel from the Domain. Modifying Burst IO implementation so that BurstIO output Ports will only override the BurstSRI mode flag in pushBurst if given std::complex sample data. Ensuring the creation of and appropriate permissions are on the services directory in SDRROOT. Fixing code generators for Port generation of C++ Components to correctly handle data structures returned from methods. Resolving issue when activating local servants for MessageConsumerPort and MessageSupplierPort Java classes. Resolving issue when ossie.utils.log4py.config is imported after ossie.utils.sb. Fixed by CCB-263 (Formatting issues in -logcfgfile causes python devices to crash) and added unit test to address issue when ossie.utils.log4py.config is imported after ossie.utils.sb. Improving documentation of Signal Related Information (SRI). Supporting the default version of Octave available in CentOS 7 (3.8.2). Correcting the parsing of some numeric literals in Octave M files. Resolving issue with the GPP segfaulting when a Component\u0026rsquo;s soft package dependency does not have proper file access privileges. Resolving issue with getStreamDefinition returning a pointer to memory that could be reclaimed during processing, which would invalidate any access through that pointer. The caller now receives a pointer to a copy of a Stream Definition. Correctly computing deployment-specific capacities that manage hardware resource requirements in cases where the Component is part of a host collocation deployment. Updating Contributor License Agreement (CLA). Revising the BulkIO High-speed data code example in User Manual. Updating the Python package to create instances of the same Application for multiple processes or threads without conflicts. Updating the Python Sandbox to make and break connections from multiple threads without conflicts. Addressing numerous bug fixes.  Fixes The following fixes were completed REDHAWK 2.0.6:\nCore Framework Fixes  Automake files check for correct range in supported Octave version (3.4+). log4j time formats are processed correctly for resources using Python logging. Namespaced Octave Components are supported. Added creation of sdr/dev/services directory when installing from source or the REDHAWK RPM package. Changed default Node and GPP name to not be the fully qualified Domain name. This is now an option to the gpp_setup script. Fixed issue in test with sequencing of sending and receiving messages. Removed Java test when \u0026ndash;disable-java is used when building the Core Framework. When an exception occurs during C++ FEI deallocation, updateUsageState is called to account for the deallocation(s) that succeeded. Fixed issue with C++ FEI Devices for failed allocations. Now, the C++ FEI Device base class returns false when the allocation fails instead of throwing an exception. Fixed logger assignment for StreamContainer class. When the IDL includes a typedef\u0026rsquo;d parameter as an out parameter, the code generator no longer adds an additional \u0026amp; to the generated Port function. Fixed issues with using empty list as a default parameter assignment. Resolved issue with process exceptions for directories with missing or bad permissions. Resolved issue with corrupted stream definition objects when using getStreamDefinition method. Multiple processes or threads can create instances of the same Application via the Python package. In the Python package, failed connections to Application objects raise a NoMatchingPorts exception that includes the Application name instead of an AttributeError. The Python Sandbox can make and break connections from multiple threads without conflicts. In the Sandbox, connecting a DataSink to an SDDS output Port now will return with a no matching Port exception. RPM spec files for Octave softpkg dependencies only copy the needed .m files. Additionally, the source directory name used on the project for the .m files is not changed during rpm installation. Fixed compilation issue with custom IDL and output Ports. Uncaught IO exceptions from log4cxx library are handled so processes will not terminate. Resolved issue with Application launching during stress tests.  IDE Fixes  Package names for Java Components now start with a lower-case letter by default, to adhere to standard Java conventions. In the Component editor, the contents of the XML tabs now reflect all changes made in the other tabs. Updates to a Device\u0026rsquo;s usagename in the Node editor Devices tab are correctly reflected in the associated Devices table. Services in the Sandbox Device Manager now display in the Sandbox Node Diagram. Domains containing large numbers of Waveforms/Device Managers now re-sort their contents appropriately. Port descriptions now display when a Port is selected in any editor. An NPE no longer occurs if the M-file specified for a new Octave project does not contain a function. Ensured that CORBA calls that hang will timeout after a reasonable amount of time. Improved the Domain refresh process to prevent issues with too many threads and multiple simultaneous refreshes of the same object. Prevented the possibility of the IDE using too many threads when there are problems refreshing a domain. IDE Domain/Sandbox refresh code now better responds to cancellation. The CORBA Name Browser view now displays the kind of bound names. The CORBA Name Browser now consistently loads children in the view. Octave functions with arguments that have default values are now created as Properties (instead of Ports) by default in the New Component Project wizard. The IDE promptly displays an error if Octave\u0026rsquo;s include path cannot be found while generating code for an Octave project. Keep tree nodes expanded while navigating the Launch Waveform wizard. The IDE now displays Services in the Target SDR even if they duplicate the ID of another Service the IDE has already loaded. The IDE does not change the DCE ID of a project when it is renamed, which can cause problems if the user installs both the old and new versions of the project in the SDRROOT. References to non-existent struct simple properties are now handled gracefully. The editor action bar no longer attempts to load duplicate ActionHandlers. Fixed an occasional NPE that occured when using the Device Manager Explorer diagram. Corrected some XML validation for \u0026ldquo;affinity\u0026rdquo; and \u0026ldquo;componentproperties\u0026rdquo; in SAD and DCD files. Improved the error message for a failed domain launch to provide more detail and troubleshooting information. Properties of type ulonglong are now passed to resources launched in the Sandbox. Multi-delete functionality race-condition is now handled gracefully. Corrected a potential code freeze when updating the Domain\u0026rsquo;s Waveform list. The IDE no longer displays a tree expander next to SRI keywords if there are no keywords to display. Some code associated with Device Manager diagrams was corrected to prevent potential future bugs. Clicking the Terminate context menu on the Sandbox Device Manager now terminates its services. Clicking the Shutdown context menu on the Sandbox Device Manager now terminates its services. Resolved issue where services launched via REDHAWK Explorer were receiving duplicate names. Read-only Properties of kind \u0026lsquo;property\u0026rsquo; can now be overridden, and their values are passed to initializeProperties() in the Sandbox. Fixed bug that occurred when editing the namespace of existing projects. An error message was sometimes displayed after closing the \u0026ldquo;Allocate Tuner\u0026rdquo; wizard. Services launched in the Sandbox Device Manager diagram are now displayed in gray, and their menu options are disabled until they launch and register with the Device Manager. Corrected an inefficient monitoring of Devices by the Device Manager diagrams. Corrected a unit test failure that occurred when building in a docker container. A file descriptor which was being left open is now closed. A code quality issue was corrected. Removed an instance of double-checked locking. Corrected some internal domain model state inconsistencies. Diagrams now open without an error in the REDHAWK Explorer product.  Documentation Fixes  Fixed typos in the Managing and Defining Properties section. Updated links on the Documentation web page to point to GitHub. Corrected SAD file location in the SAD File section.  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.0-lts/release-notes-2.0.5/",
	"title": "REDHAWK Release Notes - 2.0.5",
	"tags": [],
	"description": "",
	"content": " The effort in REDHAWK 2.0.5 focused on:\n Maintaining the correct time stamp when pushing data from the Sandbox DataSource. Improving a Component\u0026rsquo;s response to messages irrespective of whether or not the Component is started or stopped. Improving FileSink support for framed data and timecode with BLUE file output. Improving the handling of missing event message fields in C++ and Python. Ensuring external Port names are recognized. Addressing numerous bug fixes.  Fixes The following fixes were completed REDHAWK 2.0.5:\nCore Framework Fixes  Component start order is now honored when calling the Sandbox\u0026rsquo;s loadSADFile method. Reduced the number of messages indicating a bad connection when a remote Component dies and a connection to it exists. The behavior for mismatch between the message structure being received and the expected structure has been harmonized across C++, Python, and Java. If DomainManager is not compiled with persistence enabled, persistence flags are now ignored. Removed sending SIGQUIT during the terminate sequence for Components. Connection issues for BulkIO Ports are logged as errors, and repeating messages will be suppressed once a threshold has been achieved. Python BulkIO Ports now report error messages during pushPacket and pushSRI operations. For Octave Components that add shared libraries, the library\u0026rsquo;s implementation reference is correctly referenced when generating a Component. Multi-out Ports issue an EOS when listeners are deallocated. Added default resolution of SDRROOT target installation to be /var/redhawk/sdr if a user\u0026rsquo;s shell environment configuration is incomplete. log4j time formats are processed correctly for resources using Python logging. Removed obsolete comments that no longer applied. The Domain\u0026rsquo;s ConnectionManager will remove connections from its pending list if connection deferral is not allowed. When specifying a user when daemonizing nodeBooter, all the user\u0026rsquo;s groups (primary and secondary) are associated with the process. Also, groups can now be defined as comma-separated names on the group switch when starting nodeBooter. On startup, calls to the configure function on the Component or Device only occur if there is at least one Property to update. C++ BulkIO output Ports now report the correct bits per second in statistics in all cases. The redhawk module in Python has a complete replication of the CORBA interface for the remote object at a base level (not just on the ref member). When DeviceManager is launched and DomainManager is not available and persistence is enabled, Name Service is populated with the DeviceManager, Device, and Service information. Added the ability to specify a wait time for client calls from the DomainManager to remote servants when an underlying mutex is locked and restricts other activities using the DomainManager. Java Components using org.ossie.events.Subscriber class can register a callback interface when new event messages arrive. FileSink sets the subsize field in BLUE file headers to match the frame size when the input stream is two-dimensional. FileSink formats framed data correctly with BLUE file output. The Sandbox\u0026rsquo;s BlueFileReader can handle two-dimensional (framed) data in the form of type 2000 files. The Sandbox\u0026rsquo;s DataSink can handle framed data of type \u0026lsquo;char\u0026rsquo;. The bluefile module properly chunks framed two-dimensional (framed/type 2000) data. It also properly handles complex data when it is two-dimensional. FileSink now uses the timestamp of the first BulkIO packet to set the header timecode for BLUE file output. At the end of BLUE files, FileSource would sometimes send a zero-length packet with no EOS and a zero-length packet with EOS set. The zero-length packet with no EOS was removed. Eclipse plotting widgets can be started from the Python Sandbox. The default implementation for retrieve_records, retrieve_records_by_date, and retrieve_records_from_date on the logging interface for C++ Components and Devices no longer segfaults when executed. Codegen testing now evaluates all unit tests for namespaced Components. Namespaced Waveforms can now be launched in the Sandbox using the fully-qualified namespaced name. If a Component was shutdown while pushing data, it would occasionally deadlock. This race condition was removed. When pushing data, the Sandbox DataSource advances the time stamp according to the initial time and the number of samples sent. If an FEI Device contains input BulkIO Ports, releasing a tuner does not cause an error message. When a BulkIO input stream is disabled, packets for that stream with EOS set are handled and reported correctly. Components in Java, C++, and Python respond to messages irrespective of whether or not the Component is started or stopped. Conversions of header keywords between BLUE file and REDHAWK SRI are handled properly. Deallocation of an FEI controlling allocation ID cannot be done using a listener allocation structure. The SRI changed status is provided for the first packet received using the stream API. An application\u0026rsquo;s getPortSet() method uses the external Port name provided in its SAD file. Empty directories are not created in the GPP\u0026rsquo;s cache directory when log4py FileAppender is configured with the absolute file path. When a BulkIO input stream receives an EOS, the input Port\u0026rsquo;s getCurrentStream() now always returns the stream once to give the caller a chance to check for EOS. Fixed possible Python FEI Device deadlock issue when responding to requests (for example, getTunerEnable, allocateCapacity).  IDE Fixes  Reworked how the IDE diagrams add actions to toolbars and menus, which resolves the handler conflict errors that were thrown when multiple diagrams were opened concurrently. In a diagram, Port modifications to existing Components are now displayed the next time the diagram is opened. When marking Ports as external in a SAD diagram, if external Ports are created with the same name, the names are suffixed to make them unique. A domain Waveform opened with the Chalkboard editor now is in sync to reflect the same status changes (for example, start and stop) in the Explorer view. When creating FEI Devices, the pages of the New Project wizard now include the setup code generation page for C++ and Python. The x-axis on plots adjusts to changes in the CHAN_RF and COL_RF Properties in SRI. The PROFILE_NAME argument is now correct for resources launched in the Sandbox. In the Properties view for an FEI tuner, the title was adjusted to be the tuner ID, and the tab name was changed to \u0026ldquo;Properties\u0026rdquo;. The naming context names that the IDE uses in the Sandbox now are the same as the core framework at runtime. Newly created projects are properly configured so that projects now report warnings and errors in the Problems view for Redhawk XML files. The status for an object in a domain is now updated when its profile (XML) is loaded. The CORBA name browser view now displays names that contain periods. The Sandbox diagrams always show the correct state for a Component or Device that was launched while the diagram is open. Corrected code that was being run in an incorrect thread inside the IDE. Namespaced Java Components in the user\u0026rsquo;s workspace can now be launched in the Sandbox. The logging menu is not shown for Waveforms. Fixed an NPE in the SAD editor that occurred when an external Port in the SAD XML referenced a non-existent Component instantiation. Fixed an NPE that occurred if a Waveform with an event channel connection was launched in the Sandbox. Fixed an NPE when generating code for a project that was caused by a corrupt configuration file. Fixed issue causing an internal IDE error when generating code for an Octave Component and Octave was not installed. An internal IDE model detail is no longer shown when browsing a componentInstantiation. The same Component can now be launched from both the workspace and the SDRROOT simultaneously in a Diagram. Adding a FrontEnd Uses Device to a Waveform no longer causes an error when saving the Waveform.  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.0-lts/release-notes-2.0.4/",
	"title": "REDHAWK Release Notes - 2.0.4",
	"tags": [],
	"description": "",
	"content": " The effort in REDHAWK 2.0.4 focused on:\n Adding support for the CentOS 7 operating system. Updating the REDHAWK IDE to require Java 8. Adding support for two new Core Assets, SinkSDDS and SourceSDDS, which convert between SDDS and BulkIO data formats. Adding messages to indicate to the user the reason why the GPP is busy. Adding more IDE XML validation to help users catch issues sooner when designing projects. Corrected issues with Redhawk-generated build scripts that prevented errors from being displayed. Adding ’Connect’ and ’Show Properties View’ in the Graphiti diagram context menus. Adding GPP label to the Domain Manager log message when deploying Components or Waveforms to enable quick identification of which GPP the Domain Manager is attempting to launch Components on. Improving the REDHAWK Explorer product to use the new Graphiti diagrams introduced in the REDHAWK 2.0.0 IDE. Improving IDE namespace support to give users an error if they have multiple resources with conflicting IDs in the SDRROOT. Addressing numerous bug fixes.  Core Framework API Changes The following API changes have been made.\n GPP sys_limits structure Property identifiers have changed. This is a readonly Property reported by the GPP during a query call. The resulting sys_limits Property identifiers returned from the query call now correspond to the New ID column.     Old ID New ID     current_threads sys_limits:current_threads   max_threads sys_limits:max_threads   current_open_files sys_limits:current_open_files   max_open_files sys_limits:max_open_files    Improvements The following Core Framework and IDE improvements were completed in REDHAWK 2.0.4.\nCore Framework Improvements  Improved build support files so IDL references in an IDL project can be listed in any order. Improved support for Components with multiple implementations. When the local file for a secondary implementation is missing, that implementation is ignored. Fixed omniEvents to run on CentOS 7.  IDE Improvements  Improved XML validation. Improved namespace support to display an error when multiple elements in the SDR root have the same DCE ID. Improved Graphiti diagram context menus by adding Connect option. Improved warning dialogs by adding warnings for deallocate all and New Control Panel. el6-i686 Added a warning message for properties that have kind message that are not a struct.  Fixes The following IDE, Core Framework, and Core Asset fixes were completed in REDHAWK 2.0.4.\nCore Framework Fixes  If the Sandbox is started when a plot is created, the plot’s initial state is set to started. Python SPD parser correctly exports capitalization for softpkg. Python Codegen can handle camel-case structure definitions. Exceptions in port_impl code are now passed to the caller instead of ignoring them. When a call to runTest on the Application has unknown properties, it lists the unknown properties. In GPP, merged create_node.py and devconfig.py into gpp_setup script, updated the install scripts to use gpp_setup, changed the model to REDHAWK GPP, and updated GPP properties to 2.0 property kinds. Better error is given when redhawk.attach is invoked with no visible Domains. Improved error message when missing dependency is a softpkg. Java unit tests are disabled when the core build does not have Java enabled. Python Sandbox createApplication call includes Device assignment sequence as an argument. Fixed PartialConfiguration error for init of properties with kindtype of both property and allocation. Deallocating a listener sends an EOS out of the BulkIO Port. If the Device Manager does not have write access to the cache directory, it logs an error instead of having a segmentation fault. Corrected giop:unix endPoint format in rh_net_diag utility. Added the name of the missing file to the error message when parsing spd files. Sandbox DataSDDSSink stores the latest SRI received. Code generator correctly handles programming language element in the implementation element. SDDS Ports push SRI on new connections. If omniEvents is stopped, and the Domain is shutdown, a correct message is generated. Added namespace qualifiers for sys_limits structure property members in GPP. Enhanced error handling for problems during Device registration. Python library does not release Applications on exit by default. External property overrides are allowed for loadSADFile call in the Sandbox. Sandbox loadSADFile allows for namespaced property names. Default values are correctly generated for sequence of structures in C++. Calls to FileSystem::exists() no longer cause the Domain Manager process to abort. Fixed issue with GPP statistics type conversion for large numbers that resulted in occasional errors in the usage statistics. Spec file for namespaced Components, Devices, and Services includes complete directory paths. Fixed compatability issue with partial configuration during initializeProperties. Missing read permissions on Component installations no longer crash the Domain Manager. Python FEI infrastructure matches C++ FEI infrastructure. Java FEI infrastructure matches C++ FEI infrastructure. Fixed the proc function in the Python Sandbox by updating DataConverter to rh.DataConverter. Unit tests do not deadlock on 32-bit CentOS 6. cleanomni script correctly determines root privileges. cleanomni only attempts to start omniEvents once if the omniEvents service startup fails. Tests run manually (via runtests.py) and tests run as part of the continuous integration infrastructure use the same test environment. Readonly property kind properties are initialized through initializeProperties. DeviceManager can correctly parse Device spd files when they contain dependency elements. Automake warnings are not issued when compiling on CentOS 7. In Python ExecutableDevice.terminate(), wait until the entire process group has exited before checking the process status and returning. rhlauncher has the updated REDHAWK logo. omniEvents waits for omniNames to be ready before deploying. Components launch in the Sandbox with GNU debugger.  Special Resolutions  Won’t Fix  Core framework runtime failure if basic Components are not installed - The Sandbox requires the DataConverter Component be installed for format conversion. Limited IDL path search for IDL - Previous code generators did not allow for additional search paths. This has been resolved in newer releases. Java Devices do not deal well with a NULL IDM channel - The normal Java Device startup will handle all Null Pointer Exceptions (NPE). Developers are encouraged to use Publisher and Subscriber interfaces and not the internal connectEventChannel(), which will cause an NPE. Sandbox initial configure call includes execparams - execparam and configure are both deprecated. Therefore, changing the behavior would not be beneficial because new Components are not created with these properties, and there is a chance that existing Components would be broken. C++ Appender prints error on stderr - This behavior is intrinsic to log4cxx. The message is sent during a reconfiguration request when an error is encountered. Incorrect use of daemon function in omniNames init.d script - This defect is part of the EPEL distributed package of omniOrb.  Fixed By Other Issue  Python service generator throws an exception with non-namespaced IDL interface - Fixed by REDHAWK release 1.9.  Cannot Reproduce  Python Device Codegen uses incorrect name in Makefile.am. Multiple message out Ports in C++ causes malformed port_impl.h. If more than one Application is created with the same name using createApplication on the Python package, the tracking of the Applications breaks.  Duplicate  Spelling error in Application error message - Duplicate of CF-1550 (Log message says “Abormal”). SAD validation fails when an implementation is missing - Duplicate of CF-1556 (Improved support for Components with multiple implementations. When the local file for a secondary implementation is missing, that implementation is ignored.).   IDE Fixes  FindBy Wizards no longer allow mulitple Ports with the same name to be added. Fixed null pointer exception (NPE) with SAD file properties and assembly controller actual properties. Ports no longer can be added for Service projects with an interface that does not extend CF/PortSupplier. Indexer now imports BurstIO information. Fixed issue causing an error when deallocating a Python FEI Device. FindBy direct edit dialog only enables the Delete button after a Port is selected. Graphiti diagrams were refactored between repositories. Fixed NPE with SAD referencing Port names that do not exist when launching in Sandbox. Corrected warning message displayed when overwriting modified files. Property View inner tab name now always displays “Properties”. An error no longer occurs when invoking shutdown on Sandbox Device Manager. REDHAWK IDE RPM now requires necessary development packages. Sources in the Makefile.am.ide are ordered lexicographically. Code generation no longer unsets C++ build exclusions. Devices launched in Sandbox are now configured during registerDevice. Toolbar buttons (start/stop/release) are now enabled for local Waveform editors. DCD model does not allow invalid domainmanager element. IDE now sends the correct properties when a Component/Device is launched in the Sandbox. EMF validation error now occurs if a Struct does not contain at least one simple or simple sequence property. Code was refactored so IDL path sources use preference. Fixed NPE with Waveform/Node project references to a non-existent SPD. Removed references to several plug-ins that are not necessary as dependencies. Required PyDev dependency was added for Sandbox console. Correct exec param properties are now used when launching in the Sandbox. SoftPkg elements are no longer expandable in Explorer view. The FEI Device wizard no longer creates the frontend_tuner_allocation property as a partially-configured struct. Corrected diagram titles and tooltips. When generating a namespaced Waveform or Node, the .spec file now owns parent directories. The message property kind is only displayed for struct properties or if the property is already a message kind. Fixed omniORB IDL parsing errors. Diagram icons now match Explorer view icons. Dependencies were added to the IDE RPM for necessary GTK libraries. Fixed display issues on CentOS 7. Waveforms with more than one declared namespace launch in the IDE Sandbox. Launching a Device in the Device Chalkboard with the Device Chalkboard open no longer causes an error. The IDE now uses the stable release of Nebula (1.0.0). The IDE now uses the latest PyDev update (4.5.5) for Eclipse Mars. The IDE’s NeXtMidas version was locked to 3.6.  Core Asset Fixes REDHAWK Basic Components  FileReader - bluefile byteswap hardcoded to false. Sourcesocket - Properly handles FIN in client mode when server closes connection. SourceVITA49 - Expanded unit tests. SourceVITA49 - Corrected to assume payload is big endian if not specified. SourceVITA49 - Fixed so destroy_rx_thread is threadsafe.  REDHAWK Basic Devices  FmRdsSimulator - nodeconfig.py script now modifies the rh.FmRdsSimulator profile in-place. RTL2832U - nodeconfig.py script now modifies the rh.RTL2832U profile in-place. USRP and RTL - Updated nodeconfig.py script to use new Sandbox API get_simple instead of get_props. USRP_UHD - nodeconfig.py script now modifies the rh.USRP_UHD profile in-place.  Documentation Improvements/Fixes  Updated the dependency list for installing from source on CentOS 7. Corrected information about creating REDHAWK Projects in the IDE. Added information about new warning dialog displayed when deallocate all is selected. Updated graphics to display Monitor Ports on context menu for resources in Graphiti diagrams. Updated graphics to display Connect in Graphiti diagram context menus. Updated graphics displaying Show Properties in Graphiti diagram context menus. Updated REDHAWK installation instructions. Updated image on REDHAWK home screen. Removed incorrect/obsolete upgrade instructions. Updated steps in Allocating a FrontEnd Tuner procedure. Modified Configuring omniORB heading to Configuring JacORB for the IDE. Removed Installing RH on Ubuntu appendix. Removed invalid IDE dependencies. Added information about SourceSDDS and SinkSDDS. Updated Figure 17.17 Running Waveform in the Chalkboard with graphiti diagram.  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.0-lts/release-notes-2.0.3/",
	"title": "REDHAWK Release Notes - 2.0.3",
	"tags": [],
	"description": "",
	"content": " The effort in REDHAWK 2.0.3 focused on fixing the following bugs.\n Improvements to GPP automatic resource monitoring caused a memory leak. Incorrect return type in the GPS interface implementation of FrontEnd Interfaces. Python Devices failed to launch when a logging config file is specified.  Fixes The following Core Framework fixes were completed in REDHAWK 2.0.3.\n The correct current logging level is now reported in the Logging Level wizard in the Sandbox. There is no longer a memory leak in the GPP. gps_time_pos for the C++ GPS Port implementation returns the correct type. C++, Python, and Java uses FEI control Ports do not fail silently when the remote Device connection fails. Methods in fe_tuner_port_impl.h no longer fail and now return initialized values. Python FEI Ports now generate valid return objects for FEI Ports. Java FEI Ports compile for all FEI Ports. _pid is now populated on Components launched through the Sandbox.  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.0-lts/release-notes-2.0.2/",
	"title": "REDHAWK Release Notes - 2.0.2",
	"tags": [],
	"description": "",
	"content": " The effort in REDHAWK 2.0.2 focused on:\n Improving how error messages are displayed to the user in the IDE. Adding new abilities to interact with logging for Components and Devices in the IDE. Providing better awareness of resource utilization on the host computer. Addressing numerous Discrepancy Reports (DRs). Adding better support for creating FEI Devices written in Python.  New Features  Enhanced IDE to use new Domain Manager method for launching Waveforms. Added IDE support for setting a running Component’s logging configuration. Added IDE support for viewing a running Component’s logging events. Added a Property on the GPP that provides a per-Component GPP resource utilization.  Improvements IDE Improvements  Improved error messages when working with Properties. Improved error messages when launching resources in the Sandbox. Improved error messages when start/stop fails for Components. Improved error messages for the SCA file system.  Core Asset Improvements  Updated UHD driver to version 3.7.3.  Fixes IDE Fixes  Source is no longer ignored in org.ossie bundle. Fixed domain loading on Windows. ScaItemProviderAdapterFactory is always disposed. Fixed null pointer exception (NPE) in editors. Renamed context menu “Apply Horizontal Tree Layout” to “Arrange Diagram”. Fixed issues with SCA file stream cleanup. When launching a Domain Waveform, fixed error so Waveform editor opens. Fixed issue causing stack trace errors to be displayed when refreshing Properties. Properties without a kind or configurationkind are now considered . Octave Component can be launched in debug mode. Event channels and Waveform containers can be refreshed. When a runtime explorer Node diagram is open and connections are created, this no longer causes an NPE. Runtime explorer Node diagrams show connections. Multiple Sandbox Waveforms with similar names can be opened. configure Properties are now set for Devices launched from the Python Sandbox. When loading Domain items, improved error details provided in Explorer View. Status details will not display for errors on the file manager. In File Manager, CORBA file objects are deactivated after they are closed. Opening a Node diagram containing a Device/Service not in the SDR no longer causes an NPE. Tooltips for long Property descriptions are displayed. Deleting a Component from the SAD diagram deletes its external Properties or external Ports. When editing Nodes, unique componentinstance id’s are created for Devices/Services. New IDL projects have include paths to omniORB COS IDLs. IDE can now connect to and display content from multiple Domains with the same name. OCTAVE_PATH is now set in the Chalkboard for softpkg dependencies. SPD editor Overview tab now displays correct resource type. Environment variable paths are now properly set for resources launched in the Chalkboard. Editing a Find By name no longer creates a duplicate item in the diagram. DataList correctly displays complex data streams. usesdevice elements type attribute is optional. Error messages are displayed in the Launch Domain Manager Wizard. Improved performance of Node Explorer diagram. Connections created in design-time diagrams can be undone. Improved Waveform Explorer diagram. In a runtime diagram, fixed error so cannot undo release/terminate of Component. Launch Waveform Wizard displays overwritten Properties. Connections from Java Components are displayed when diagrams are opened. Sequence values in Runtime Property dialog can be deleted when in edit mode.  Core Framework Fixes  Added Python helper that simplifies the creation of SRI objects for FEI Devices. Python FEI Devices now contain extended mutex control over control member variables in the tuner base class. Python FEI Devices do not call deviceDeleteTuning when deallocating a listener. Python FEI Devices can deallocate a listener from the IDE. Python FEI Devices Ports contain the correct reference to the parent Device object. Python FEI tuner control Ports implement the correct inheritance hierarchy. In Python Components and Devices, using CF.LogConfiguration.setLogConfig(String) now correctly sets the log configuration. The Java logging appender only prints an error on stderr when an error condition exists. C++ Appender now prints debug info to the log file instead of stdout. Property initialization of struct sequence no longer triggers Property change listener. C++ AnyUtils can convert strings to octet. BulkIO chunking accounts for subsize, aligning subsize boundaries. The Connection Manager allows Component to Component connections. The GPP Property XML file now includes mcastnicEgressFree. In a multi-system REDHAWK environment; when restarting a GPP after the restart of a Domain Manager, with persistence enabled, the GPP no longer aborts on startup. The GPP reports correct number of CPUs on all supported versions of CentOS. When the Domain Manager is terminated normally, the event channels are cleaned up from the name service. The Event Channel Manager honors the requested registration ID. Event channels can register with the PropertyListener. log4py can create directories when specified in the log configuration file. FileManager does not fail when calling getMounts. Java Port objects match the reported object in the connection description. In the IDE Python Sandbox, sb.show() Component connections displays the correct results. In the Python Sandbox, connection IDs can be reused. Removed superfluous warning from libnuma on 32bit VMs. Making connnections between GPS Ports in Java Devices no longer causes an NPE. SIGCHLD is properly propagated in GPP. In Python Devices and Components, exceptions in the process function are logged. Extended the start call on Application time out. Python Sandbox launch function works as expected in the IDE. Python Sandbox no longer uses path to identify resource type. Python Sandbox loadSADFile works correctly when Components have Properties with special characters.  Core Asset Fixes REDHAWK Basic Components  DataConverter improved unit tests to include unscaled unit tests. DataConverter eliminated data distortion for Short to Float and Float to Float conversions. DataConverter fixed to only scale output when configured to do so. FileReader fixed to start when launched with non-default source_uri. FileWriter fixed feature that starts a new file following a retune. FileWriter fixed initial configuration of overridden Property values. FileWriter fixed several bugs with the recording timer. psd moved stream callback registration to the REDHAWK constructor. psk_soft updated to apply initial Property values. sinksocket updated to apply initial Property values. SinkVita49 fixed bug that prevented SRI updates after being stopped and restarted. SinkVita49 fixed to stop immediately when a stopis initiated. TuneFilterDecimate fixed calculation of SRI keyword CHAN_RF for tuning mode NORM.  REDHAWK Basic Devices  FmRdsSimulator reduced default level of added noise.  Documentation Improvements/Fixes  Added a note to explain that adjusting an Application’s logging configuration alters the entire Domain. Corrected instructions for logging with event channels. Corrected the translation of the logging config URI. Corrected typos in macros in Section 13.2.4.  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.0-lts/release-notes-2.0.1/",
	"title": "REDHAWK Release Notes - 2.0.1",
	"tags": [],
	"description": "",
	"content": " The effort in REDHAWK 2.0.1 focused on:\n Enhancing the level of control that a system deployer has to customize the reservation schema used to manage computing resources. Adding Python operators and Java methods to simplify common arithmetic operations on BulkIO time stamps.  IDE Improvements  In Diagrams, duplicate connections between the same two Ports are displayed in yellow and show a warning. In the Sandbox, Components and Devices now display the Component or Device usage name rather than the Component’s or Device’s name. In the SAD Properties Editor, the name of the Properties are now displayed rather than the ID. If no name is available, the ID is displayed. An improved failure message is displayed for a Waveform installation failure.  Core Framework Improvements  Refactored auto-generated test script for Components to use the Sandbox. Added reservation floor to GPP so that when an Application is deployed, the amount reserved per Component is definable by the system user. Provided Timestamp Helper Methods that add/subtract two time stamp objects and print time stamp values. Added generation of getters and setters for Java struct property fields.  IDE Fixes  Fixed issue so refreshing the IDL library now updates the library. Fixed errors in generated spec files that prevented macro expansion. Fixed issue involving certain scenarios when the palette was loaded and an error occurred. Fixed issue so host collocation names can now be renamed. Updated Sandbox so that command-line Properties are not passed to Resource.initializeProperties(). Fixed editors so when opened, items under the Target SDR are now read-only. Fixed update sites in IDE to use Mars not Luna. Updated IDE to include JacORB feature. Fixed Sandbox so that Properties of kind Property are not passed to Resource.configure() at launch. Fixed Sandbox so terminating a Waveform running in the Sandbox via the REDHAWK Explorer actually terminates the Waveform. Fixed issue so when opening the Component editor for a resource in the Sandbox, or the Explorer for a Waveform, an \u0026ldquo;Unsupported content\u0026rdquo; dialog and related error messages are not displayed in the console. Additionally, in the Editor view, three tabs no longer display blank content for each of the XML files. Fixed Chalkboard so releasing a Component no longer terminates the Component but actually releases the Component. Updated Devices so when a namespaced Device is dragged-and-dropped onto the Device Manager Chalkboard, it no longer is displayed in yellow and does not display an error. Fixed C++ workspace projects so when launched in the Sandbox, they now use entrypoint to execute. Fixed Sandbox so launching Waveforms that override a simplesequence no longer causes errors. Fixed Python Sandbox so when Components are launched, they have configure and property kind Properties passed to them in addition to execparams. Fixed Chalkboard so the context menu for Components of Domain Waveforms no longer displays Terminate as an available option. Fixed FEI Device Wizard so if a project name is name spaced, clicking Finish in the wizard no longer causes an error. Updated Node Diagrams so when connecting Ports between figures that have been collapsed, an error no longer occurs if the connection is ambiguous and the IDE prompts the user. Fixed SCD files in new projects to include the new CF.PropertyEmitter interface. Fixed DCD files so if they reference a non-existent SPD file for the Device Manager, the Overview tab in the DCD Editor functions. Fixed Redhawk Explorer view so if the ’name’ attribute is missing in a DCD, SPD, or SAD file in the SDRROOT, all items are still displayed under the Target SDR. Fixed DCD editor so if a Service is manually added in the XML tab, the Diagram tab reflects it. Updated code as a result of recent updates in Graphiti. Updated SAD/DCD diagrams to always fully reflect changes made to the underlying XML file. Fixed possible deadlock in UI thread. Updated Diagrams so renaming a Component no longer causes an error. Fixed issue when creating a FindBy, the FindBy was not allowed inside a host collocation; however, if the host collocation covered the FindBy in the Diagram, the FindBy sat on top of it making it appear like it was inside the host collocation. Fixed Diagram palette filter to search on the full Component name. Fixed the DCD Diagram palette to refresh with SDR root. Fixed issue so plot connection error does not display when making connections with Waveform external Ports. Fixed issue so a new Domain can be added with corbaloc or IOR syntax. Fixed SAD and DCD editor to allow Property value overrides for read-only command line Properties. Fixed event Property error when upgrading. Fixed project update so configure/execparam Properties are changed to a new Property.  Core Framework Fixes  Added a documentation note regarding performing a source upgrade from 1.8 to 2.0. Provided instructions on how to access Domain Manager and Application in comments for generated Components. Updated comments for generated Components to use stream-based input rather than getPacket. Updated bluefile_helpers to support numpy \u0026gt;= 1.9.0. Eliminated Makefile.am warnings on Ubuntu 14.04. Updated installation so when installing from source, if dependencies are not already present on the host or a valid PYPI is not accessible, the installation will fail. Enabled and verified support for xsd \u0026gt;= 3.3.0. Updated the generated configure.ac file for Octave Components by omitting a call to the RH_SOFTPKG_CXX macro. This update resolved configuration failures when dependencies did not have a valid pkgconfig, which is not present for noarch packages. Updated the redhawk.sh script in /etc/profile.d to fix LD_LIBRARY_PATH set issues. Added newline at end of EventChannelManager.idl. Updated CF tests so they can be run without BulkIO. Updated BurstIO testing so it no longer requires the libraries to be installed. Added regression test to verify that Waveform allocations are consolidated into a single allocation call when allocation Properties do not overlap. Renamed generated unit test testScaBasicBehavior to testRHBasicBehavior. Updated generated Ports in C++ and Java to report the most specific CORBA repid in getPortSet(). Updated Python Components to only report Python MessageConsumer Ports as bi-directional, not MessageSupplier Ports. Updated Java BulkIO InFilePort to return the expected repid. Updated C++ GPP to manage Components as process groups and harmonize difference between Python and C++ GPP and changed timeouts to more sensible values. GPP Updated C++ GPP to set the process group ID during launch and then terminate based on the group ID if a Component does not die. Modified sb.launch() to allow overriding property kind Properties. Added support to properties.py for conversion of non base 10 strings. Updated py2prf so when exporting Properties to xml, simplesequence and structsequence are correct. Fixed Application launch so that Component command line Properties with no value do not get included in the incorrect initialization step. Fixed Sandbox DataSourcepush() to honor the EOS flag at the end of large pushes when the total size is an exact multiple of the packet size. Fixed Python Sandbox so it does not call initializeProperties() after the IDE calls initializeProperties(). Fixed Python Sandbox so Java Components do not fail in Sandbox when the name Service is not running. Fixed DataSink so it honors the SRI subsize and returns a frame matrix. Improved feedback when an XML parsing error occurs. Modified Python PRF parser definition so app_prop is not part of the PRF parser definition for the struct. Fixed Python Service logging level so DEBUG_LEVEL is honored. Resolved issues when invalid Port names are used in Service connections. Fixed internal UUID module so generated UUID uses versions 1 or 4 and randomizes the MAC address. Fixed Device Manager to only report child processes as having exited when the child process terminates, ignoring non-fatal signals. Fixed Application stop to continue to stop all of the Components in an Application even if one fails, still throwing an exception at the end. Fixed Domain Manager memory leaks from parsers for Properties and fixed minor leaks with _ptr usage. Extended the Domain Manager to handle Application registrations locally. Added test for backwards compatibility with partial struct configuration. Fixed Python Sandbox to ensure that only simple Properties are passed on the command line, and that non-overridden command line Properties are not included in initializeProperties(). Fixed issues with validating SAD file from installApplication() and createApplication() and issue with default command line option for new Properties. Fixed Connection Manager so connections to Applications cannot be deferred, and connections that cannot be deferred are deleted when the endpoint goes away. Modified test Component cpp_with_deps to build on Ubuntu 14.04. Fixed issue to prevent deadlock when a Device Manager shuts down at the same time one of the Applications deployed to its Devices is released. Added semantic checking to the contents of a Waveform SAD.xml file and its associated Components and softpackage dependencies. Updated Python module to recognize external Ports that are in a host collocation block. Updated Domain Manager to handle IDM Channel messages. Added new interface extensions on core services to Python package. Added autotools-generated files to clean up for REDHAWK Library Projects. Fixed Python code generator to assign the default values for inherited Properties in the base class init() method instead of at the class definition level. Fixed launch failure for generated Java FEI Devices with additional tuner status fields. Added source to FEI JAR files. Modified the GPP to release all reservations for a Waveform. Added additional tests for compliant and non-compliant soft package dependencies. Modified Sandbox MessageSource to use messageId member. Fixed override of instance values for Components launched through the Python Sandbox interface running in the IDE. Fixed race condition in BulkIO unit tests for SDDS and Vita49. Added proper type checking for Properties in Python Components. Added handling for spurious CORBA errors on Component initialization while running QA tests that launch and release large numbers of Components. Fixed BulkIO input Port to set sriChanged flag and register default SRI for unknown stream IDs in pushPacket. Modified Valgrind support in Device Manager to avoid attempting to overwrite the Device executable file with the Valgrind log file. Improved unit test for Components.  IDE Changes  Removed Subversive (Subversion) from the IDE.  REDHAWK Basic Components Fixes  DataConverter fixed floating point error in conversion from complex to scalar. DataConverter removed an unused variable. DataConverter fixed conversions from float and double to char and updated corresponding unit tests. DataConverter updated to have a distinct unit test for each test case. fcalc added error checking and recovery to property configuration. FileReader updated to not use Domain Manager when in Sandbox. FileWriter updated to not use Domain Manager until configured/initialized. FileWriter fixed to write file to correct location when launched in a Domain. psd updated to pass keywords COL_RF and CHAN_RF. psd updated unit tests to check precision and accuracy. SigGen updated to use unsigned types where appropriate. SigGen updated to have increased precision in all implementations. SigGen updated to only initialize timestamps when started. SigGen C++ implementation updated to be more responsive to configuration calls. SigGen C++ implementation updated delta_phase calculation to be consistent with other implementations. SigGen updated to send EOS when configured with new stream_id. RBDSDecoder updated to include RBDS messages in the log. TuneFilterDecimate fixed unit test tearDown function to clean up properly.  REDHAWK Basic Devices Fixes  RTL2832U updated to include report of FEI compliance test results. USRP_UHD updated unit test default configuration to use UHD version that comes with REDHAWK. REDHAWK Shared Libraries  REDHAWK Shared Libraries Fixes  RedhawkDevUtils updated float/double byte-swap methods to not cast to anything but char*.  REDHAWK Device Dependencies Fixes  librtlsdr corrected dependency listed in README.md. librtlsdr corrected install location of udev rules from source build.  Documentation Improvements/Fixes  Removed recycle from the the REDHAWK Overview. Updated Core Asset names with namespaces. Updated GPP description now that it is written in C++. Clarified Property types. Improved language discussing primitive types available for Properties. Corrected description of Device library dependencies. Simplified description of recommended packages to install. Improved information regarding adding a library in Makefile.am. Added explanation of the PrecisionUTCTime structure and moved description of the SRI structure to the section where SRI is discussed. Updated capacity allocation information to explain automatic capacity allocation. Added description of SRI keywords used with FEI Devices. Added Valgrind information in GPP and Device Manager sections. Added information regarding the use of raw_input() in Python Sandbox. Added information about new GPP reservation floor. Added version 1.10.X in upgrading information. Updated installing system dependencies REDHAWK version to 2.01. Added information about Timestamp Helper Methods. Added C++ property query and configure callbacks information. Added getCurrentStream() information in BulkIO stream documentation. Updated C++ property listener examples to use 2.0-style methods. Added information to correct omniNames/omniEvents install order on Ubuntu. Added information about deprecated properties upgrade process. Added setuptools to the install for Ubuntu.  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.0-lts/release-notes-2.0.0/",
	"title": "REDHAWK Release Notes - 2.0.0",
	"tags": [],
	"description": "",
	"content": " Core Framework Changes BulkIO stream-based API  Provide structures to manage data flows based on streams rather than individual data pushes. Allow the retrieval of arbitrary amounts of information from the incoming data flow.  Domain Awareness  Provide Components with a pointer as part of the base class to their Domain Manager and Application objects. Provide Devices with a pointer as part of the base class to their Domain Manager and Device Manager.  Connection Manager  Provide better visibility into and management of system-level connections.  Event Channel Manager  Simplify the creation, interaction with, and management of Event Channels.  Network Allocation/NIC selection  Provide the allocated NIC as part of the base class to a Component that requested system bandwidth on deployment.  New GPP  Written in C++, so it is more responsive. Detects when Components segfault and issues a system notification. Automatically manages system capacity. (Component benchmarking no longer needed to support deployment across different host computers). Supports affinity by default.  Co-locates the Component process with its allocated NIC onto the same socket. Co-locates the Components onto the same Node onto the same socket (when possible) to minimize data transfer impact.   New features that simplify current behavior or tooling  Single-call Application deployment. Consolidated Properties from configure and execparam kinds to Property. Deprecated the need for event Property kind by supporting Property change events for all Properties. Added Property change event registration to better manage Property event consumption. Simplified the default behavior for newly-generated RF Device (FrontEnd Interfaces). Extended FrontEnd Device code generators to Python and Java. Created a \u0026ldquo;REDHAWK constructor\u0026rdquo; in Components that is invoked after the Component default Properties have been set. De-conflicted environment configuration colliding dependencies on co-located Components. Extended upgraded logging support to Python and Java. Improved Event Service cleanup scripts to remove the need to run them as root. Enhanced C++ API for inspecting and modifying Properties and SRI keywords. Simple sequences can now be members of Property structures. Support for namespaces (Components, Devices, Services, and Waveforms). Added getPortset to return a list of all the Ports that a Component or Device supports.  IDE New Features and Functionality New Property Support  Added support for simple sequences in structs, struct sequences. Added support for the new Property kind, property, and the commandline attribute. IDE helps upgrade old configure or execparams during code generation.  Shared Libraries  Added wizard for creating new REDHAWK shared library projects for C++.  Namespaces  All REDHAWK project types support namespaces by using names with dots (for example, a.b.c).  Diagrams  Waveform and Node diagrams have been completely re-implemented. Waveform diagrams have more intuitive Find By support. Waveform diagrams have new support for FrontEnd usesdevice relationships. A diagram was added for the Sandbox Device manager. Diagrams support visualizing Port statistics with color. Diagrams support visualizing dead/unreachable domain Components with color. Diagrams provide visual help making connections by coloring suggested Ports. Diagrams provide visual feedback while Components are still starting up. Components are initially gray, and when launching is complete, the Component’s background color changes to blue. Diagrams allow expanding/collapsing shapes to hide complexity.  Eclipse  Based on the latest version of Eclipse (Mars, version 4.5).  FrontEnd Device Creation  Wizards now support creating Java and Python FrontEnd Devices.  Logging  The IDE supports changing the log level of Components and Devices at runtime. The exit code for Components launched in the Sandbox is now reported in their console.  Port Descriptions  Added support for adding Port descriptions in the SCD file. Display of Port descriptions in the Properties view for Ports and in various tooltips.  IDE Improvements  When selecting IDLs (when dealing with Ports or with Services), the IDE now filters uncommon or potentially problematic IDLs unless the user selects to show all. The XML editor (instead of a text editor) is now used when opening REDHAWK XML files from the Target SDR or from a domain. Warning messages for the IDE detecting that the localfile/codefile (for an SPD implementation) were missing on disk have been improved. The IDE can handle receiving a null reference to a Component from the Waveform. This supports inspecting some domains, which were not exhibiting REDHAWK-compliant behavior. The IDE uses WebKit on CentOS 6.6+ to improve the display of pop-up context help. Tooltips to display Property descriptions were added to the FrontEnd Tuner Allocation dialog. If an error occurs while the IDE is determining what files to generate during code generation, the IDE will display the command it tried to execute to facilitate diagnosing problems/error reporting. Ports have been moved to a separate tab in the SPD editor, and that tab is included in the SCD editor. After performing code generation, the IDE places the code generator version in the SPD file in the type attribute of softpkg. This helps identify what version of REDHAWK a particular asset was originally created for. The IDE can handle an UnknownPort exception when it requests a Port from a Component that is listed in its SCD file. This supports inspecting some Components, which were not exhibiting REDHAWK-compliant behavior. The IDE now installs and builds C++ Components, Devices, and Services by invoking build.sh at the top level of the project. This applies to new projects and projects that have their build.sh regenerated with code generation. The IDE performs a clean build after code generation to help prevent stale build artifacts. The IDE supports setting Group ID in the Tuner Allocation dialog. Added an advanced option to uninstall the existing Waveform factory when launching a Waveform. Advanced launch options are available when launching Components, Devices, Services, Waveforms, and Nodes in the Sandbox, including setting Properties, auto-start, timeouts, and log level. The IDE honors the BulkIO SRI blocking flag by default when plotting. This setting can be overridden in the plot settings. When plotting, individual streams can be hidden. Additionally, the color of the streams can be changed. When the IDE creates connections to plot or monitor data, it now prefixes its connections with IDE_ so they can be better identified. The IDE provides the ability to toggle between showing RF and IF values on plot axes. The IDE supports connecting to multiple domains with the same name, but on different machines (previously, the names had to be unique). The IDE now thins plot data based on refresh rate. This helps when plotting Ports with very high/very low data rates. The setting is adjustable in the plot settings.  IDE Fixes  Exporting multiple projects to the Target SDR via the context menu on projects only exported the first project in the selection. Before performing code generation, the IDE may have shown several warnings in the SPD editor that code generation had not yet been performed. These warnings sometimes remained even after performing code generation. Sequence Properties of complex type were not treated correctly resulting in issues displaying or setting the Properties at runtime. When a domain was launched via the IDE, the console always showed the domain name as REDHAWK_DEV regardless of its actual name. Domain Waveforms opened with the Chalkboard editor might get started/stopped twice when the Waveform was started/stopped. REDHAWK C++ Service projects might have warnings/errors related to not being able to find included code. These are cleared up by new settings applied by code generation and by completing a build. On Ubuntu, after building the first time, the IDE would report errors such as installing ./config.sub, installing ./install.sh, etc. This is corrected for legacy projects during code generation. The install location of a Waveform or Node was being determined by the project name when it should have been based on the name in the XML. For existing REDHAWK projects, some settings were not updated during code generation. These included environment variables (like OSSIEHOME) and error parsers. The IDE would automatically overwrite the build.sh file at the top of a project for legacy projects. This is now corrected by code generation. The IDE would automatically overwrite the .spec file at the top of a project for legacy projects. This is now corrected by code generation. The FrontEnd Tuner Allocation dialog did not validate entires correctly. The IDE now handles any CORBA COMM_FAILURE errors that occur while shutting down a Device Manager. The IDE now correctly parses forward-declarations in IDL files. The SPD editor did not allow saving changes in the code section for a selected implementation. The IDE was adding spaces into complex number expressions in Properties in XML (for example, 1 + j3 rather than 1+j3), which caused an error in the Core Framework. Under certain scenarios, the IDE might release domain Waveforms that had been opened with the Chalkboard editor when the IDE was closed. The IDE now allows setting an enum Property in the Waveform Property Editor. Properties with kinds event and allocate were marked as an error. Data saturation while plotting could cause the plots to go blank and stay blank even after data returned to a valid range. The Project Explorer showed arrows next to closed projects. The IDE did not correctly add values for struct sequences in the PRF/SAD XML files.  Core Asset Changes Namespaces  REDHAWK Basic Assets are now distributed in the \u0026ldquo;rh\u0026rdquo; namespace. Components, Devices, Shared Libraries, and Waveforms are all members of the \u0026ldquo;rh\u0026rdquo; namespace. Device dependencies have not been added to the \u0026ldquo;rh\u0026rdquo; namespace (uhd, librtlsdr, and libRfSimulators).  New Assets  Basic Components: An asset for doing PSK demodulation, psk_soft is now included. New Components for reading and writing files, FileReader and FileWriter, are now included. FileReader and FileWriter demonstrate the new domain awareness feature available to all Components. DataReader and DataWriter are deprecated. An asset for decoding RBDS information from FM broadcast, RBDSDecoder, is now included. Components for sending and receiving data using the VITA49 protocol, SourceVITA49 and SinkVITA49, are now included. Basic Devices: An FEI Device for simulating FM channels with RDS data, FmRdsSimulator, is now included. Basic Waveforms: A set of Waveforms that collectively demonstrate usage of all Basic Components. These include: basic_Components_demo, FM_mono_demo, FM_RBDS_demo, short_file_to_float_file, socket_loopback_demo, and VITA49_loopback_demo. Shared Libraries: A shared library used by FileReader and FileWriter, blueFileLib, is now included. A shared library used by SourceVITA49 and SinkVITA49, VITA49, is now available. Device Dependencies: A Device dependency used by FmRdsSimulator, libRfSimulators, is now included.  New Features  psd has been completely overhauled to use the new BulkIO stream API. psd has a new feature to produce SRI metadata at RF values when appropriate keyword is present in the stream. SigGen has new Properties to allow specifying values for CHAN_RF and COL_RF SRI keywords. SigGen also has a new Property to allow specifying SRI blocking. sinksocket has been expanded to support multiple outbound socket connections. This update includes a new API that is not backwards compatible. SinkVITA49 now includes TCP functionality. dsp shared library expanded to provide additional functions useful for agc. RTL2832U now includes a feature to protect against usb timeout when used from within a virtual machine. All Devices include a script that can be used to generate a Node for the Device.  Renamed Shared Libraries  REDHAWK-VITA49Libraries_V1 has been renamed VITA49. REDHAWKDevUtils_v1 has been renamed REDHAWKDevUtils.  Removed Assets  DataWriter and DataReader have been deprecated by FileWriter and FileReader, respectively. whitenoise has been deprecated by SigGen, which includes a whitenoise generation mode. BurstDeserializer, freqfilter, medianfilter, and unwrap have been removed.  "
},
{
	"uri": "https://redhawksdr.github.io/manual/",
	"title": "Manuals",
	"tags": [],
	"description": "",
	"content": "REDHAWK Installation RPMs are signed via GPG key:\npub 4096R/4F05105D 2013-08-15 REDHAWK Release Key \u0026lt;redhawksdr@redhawksdr.org\u0026gt; Key fingerprint = 3793 F584 8745 7EA2 D0AD 7561 ECC3 40E1 4F05 105D   REDHAWK 2.2   REDHAWK 2.0   "
},
{
	"uri": "https://redhawksdr.github.io/technical-notes/",
	"title": "Technical Notes",
	"tags": [],
	"description": "",
	"content": "The following REDHAWK developer documentation is available:\n Shared Address - Explains how to create and run shared address space components and describes preferred classes and API methods for working with data buffers. Shared Memory - Explains how to tune the shared memory allocator and how to enable and collect runtime metrics. Custom Transport - Explains how to overload BulkIO ports to implement custom transports in FPGA. JacORB - Explains how to install, enable, and configure JacORB for REDHAWK Java components.  "
},
{
	"uri": "https://redhawksdr.github.io/assets/",
	"title": "Asset README Files",
	"tags": [],
	"description": "",
	"content": "The README files for all REDHAWK LTS assets can be accessed through this page.\n Assets 2.2   "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/",
	"title": "Assets 2.2",
	"tags": [],
	"description": "",
	"content": "The release notes for all REDHAWK LTS 2.2 assets can be accessed through this page.\nWhat\u0026rsquo;s New - June 2019\nNewly released REDHAWK core assets with REDHAWK 2.2.3 include:\n rh.fcalc rh.HardLimit rh.SigGen rh.SourceVITA49  REDHAWK core assets released post-REDHAWK 2.2.2 include:\n rh.DataConverter rh.FileReader rh.FileWriter rh.SourceSDDS rh.RedhawkDevUtils     REDHAWK Basic Components\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u0026nbsp; \u0026nbsp;     rh.agc rh.AmFmPmBasebandDemod rh.ArbitraryRateResampler   rh.autocorrelate rh.DataConverter rh.fastfilter   rh.fcalc rh.FileReader rh.FileWriter   rh.HardLimit rh.psd rh.psk_soft   rh.RBDSDecoder rh.SigGen rh.SinkSDDS   rh.sinksocket rh.SinkVITA49 rh.SourceSDDS   rh.sourcesocket rh.SourceVITA49 rh.TuneFilterDecimate       REDHAWK Basic Devices\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u0026nbsp; \u0026nbsp;     rh.FmRdsSimulator rh.MSDD rh.RTL2832U   rh.USRP_UHD         REDHAWK Basic Waveforms\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u0026nbsp; \u0026nbsp;     rh.basic_components_demo rh.FM_mono_demo rh.FM_RBDS_demo   rh.short_file_to_float_file rh.socket_loopback_demo rh.VITA49_loopback_demo       REDHAWK Shared Libraries\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u0026nbsp; \u0026nbsp;     rh.blueFileLib rh.dsp rh.fftlib   rh.RedhawkDevUtils rh.VITA49     "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "  REDHAWK 2.2   REDHAWK 2.0   Assets 2.2   Updates Repository 2.2   "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/updates/",
	"title": "Updates Repository 2.2",
	"tags": [],
	"description": "",
	"content": "The release notes for each RPM released in the REDHAWK Updates repository can be accessed through this page. Updating with these RPMs may break API compatability with your current REDHAWK LTS version.\n "
},
{
	"uri": "https://redhawksdr.github.io/specifications/",
	"title": "Specifications",
	"tags": [],
	"description": "",
	"content": " REDHAWK 2.2  REDHAWK SCA Specification - explains the REDHAWK additions to the SCA version 2.2.2 specification REDHAWK SCA Specification - Domain Profile - explains the REDHAWK Domain Profile in accordance with the SCA version 2.2.2 specification REDHAWK ICD Specification - explains the core REDHAWK interfaces REDHAWK ICD Specification - Domain Profile - explains the REDHAWK Domain Profile  REDHAWK 2.0  REDHAWK SCA Specification - explains the REDHAWK additions to the SCA version 2.2.2 specification REDHAWK SCA Specification - Domain Profile - explains the REDHAWK Domain Profile in accordance with the SCA version 2.2.2 specification REDHAWK ICD Specification - explains the core REDHAWK interfaces REDHAWK ICD Specification - Domain Profile - explains the REDHAWK Domain Profile  "
},
{
	"uri": "https://redhawksdr.github.io/community/",
	"title": "Community",
	"tags": [],
	"description": "",
	"content": " Questions \u0026amp; Answers The REDHAWK community uses StackOverflow for discussion and questions pertaining to REDHAWK.\nUse the tag redhawksdr for questions related to:\n A specific programming problem A software algorithm Software tools commonly used by programmers Practical, answerable problems that are unique to the programming profession  Issues/Bugs Submit issues via the REDHAWK GitHub Issue Tracker page:\n REDHAWK Issue Tracker  Contributions Non-U.S. Government\nContributions to the baseline project from outside the U.S. Government should be submitted as a pull request to the project on GitHub. Contributors must have a signed Contributor License Agreement (CLA) on file with REDHAWK before patches will be accepted. If an individual or organization desires the annotation of their contribution in the project documentation, please specify that annotation in the pull request.\nPlease email contributor agreements to redhawksdr@redhawksdr.org.\nU.S. Government\nContributions from the U.S. Government do not require a CLA; however, REDHAWK does require verification that the U.S. Government entity has unlimited rights to the contribution. An email to redhawksdr@redhawksdr.org stating that the contribution was developed by an employee of the U.S. Government in the course of his/her duties is sufficient. If the contribution was developed by a contractor, the email also should provide: the name of the contractor, contract number, and an assertion that the contract included the standard \u0026ldquo;Unlimited Rights\u0026rdquo; clause specified by DFARS 252.227.7014 or DFARS 252.227-7020.\nU.S. Government entities are encouraged to submit contributions as pull requests on GitHub. If an agency is unable to access GitHub, please contact REDHAWK to discuss alternate methods of delivery.\nFeedback Email redhawksdr@redhawksdr.org for feedback.\n"
},
{
	"uri": "https://redhawksdr.github.io/_footer/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/_header/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "REDHAWK\n"
},
{
	"uri": "https://redhawksdr.github.io/assets/2.2-lts/",
	"title": "Assets 2.2",
	"tags": [],
	"description": "",
	"content": "  rh.AmFmPmBasebandDemod   rh.ArbitraryRateResampler   rh.DataConverter   rh.FM_RBDS_demo   rh.FM_mono_demo   rh.FileReader   rh.FileWriter   rh.FmRdsSimulator   rh.HardLimit   rh.MSDD   rh.RBDSDecoder   rh.RTL2832U   rh.RedhawkDevUtils   rh.SigGen   rh.SinkSDDS   rh.SinkVITA49   rh.SourceSDDS   rh.SourceVITA49   rh.TuneFilterDecimate   rh.USRP_UHD   rh.VITA49   rh.agc   rh.autocorrelate   rh.basic_components_demo   rh.blueFileLib   rh.dsp   rh.fastfilter   rh.fcalc   rh.fftlib   rh.psd   rh.psk_soft   rh.short_file_to_float_file   rh.sinksocket   rh.socket_loopback_demo   rh.sourcesocket   rh.vita49_loopback_demo   "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/",
	"title": "Assets 2.2 Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/components/",
	"title": "Components",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/devices/",
	"title": "Devices",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/libraries/",
	"title": "Shared Libraries",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/release-notes/assets/2.2-lts/waveforms/",
	"title": "Waveforms",
	"tags": [],
	"description": "",
	"content": ""
}]