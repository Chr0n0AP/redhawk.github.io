[
{
	"uri": "https://redhawksdr.github.io/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": " Description REDHAWK is a software-defined radio (SDR) framework designed to support the development, deployment, and management of real-time software radio applications. To support the design and development of software applications, REDHAWK provides tools that allow development and testing of software modules called \u0026ldquo;Components\u0026rdquo; and composition of Components into \u0026ldquo;Waveform Applications\u0026rdquo; that can be seamlessly deployed on a single computer or multiple network-enabled computers.\nThe REDHAWK integrated development environment (IDE) provides tools to support development of REDHAWK software. The development and deployment of REDHAWK Applications are aided by graphical editors and drag-and-drop Waveform construction. The IDE allows users to interact with and control multiple running REDHAWK instances and applications.\nRecent Announcements Release of REDHAWK 2.1.3 (Beta) (June 2018) Release of REDHAWK 2.0.8 (LTS) (February 2018) License REDHAWK is licensed under a combination of the GNU Lesser General Public License (LGPL), the Eclipse Public License (EPL), the Apache (v.2.0) License, the Python Software Foundation (PSF) license agreement, Mozilla Public License (v.1.1), and the GNU General Public License (GPL). For more information, refer to the LICENSE file in the respective repositories. REDHAWK documentation is licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License. REDHAWK documentation is built with Hugo which is licensed under the Apache License 2.0 and uses the Hugo DocDock Theme, licensed under the MIT License.\nCopyright This work is protected by Copyright. For updated copyright information, refer to the Copyright file.\n"
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.0-lts/release-notes-2.0.8/",
	"title": "REDHAWK Release Notes - 2.0.8",
	"tags": [],
	"description": "",
	"content": " The effort in REDHAWK 2.0.8 focused on:\n Core Framework\n Preventing sb.DataSink from adding an empty timestamp when it receives EOS in an empty packet. Adding inline header comments documenting C++ BulkIO input stream, output stream, and data block APIs. Fixing improperly scoped locks in Core Framework control. Implementing several C++ fixes to allow REDHAWK to compile on newer compilers. Correcting default property kinds in the DTD and XSD so they are no longer out of sync with the behavior of the Core Framework and the ICD. Adding new behavior to the C++ input stream API: It is now possible to \u0026ldquo;peek\u0026rdquo; into data sets that have reached EOS by setting consume to 0 when using read or tryread. Patching omniORBpy to prevent possible segfaults in multithreaded code. Correcting behavior so readonly property kind properties for Devices and Services can now be modified during deployment using Device Configuration Descriptor (dcd.xml) file.  IDE\n Resolving issue so when launching Waveforms containing references to mistyped properties, the IDE displays all the properties including the property that had a mis-matched override in the SAD file. Removing old code generation templates for REDHAWK 1.8 from the IDE. Old IDE diagrams for Waveforms and Nodes from pre-2.0.0 were also removed. Adding M2Eclipse to the REDHAWK IDE, which provides tooling to work with Maven-based projects such as the REDHAWK Enterprise Integration assets.  Documentation\n Adding documentation to the REDHAWK Manual regarding naming elements in structures such that element names can be reused across different structures. Adding documentation explaining how to use the Allocation Manager.  REDHAWK Enterprise Integration\n Enhancing the REDHAWK Enterprise Integration Demo GUI by adding support for Raster and Line plots from time- or fft-based data using Sigplot, using JTransforms with REDHAWK Websocket to perform FFT, cleaning up the Demo GUI, and updating screenshots and documentation to include new FFT and Raster functionality in the GUI. Adding a helper method to dynamically connect two Components; Improving methods used to set REDHAWK Properties; and Adding AllocationFactory to ease users’ ability to generate allocations. Adding functionality in REDHAWK REST and Websocket to support JAAS-based method level access.   Fixes The following IDE and Core Framework fixes were completed in REDHAWK 2.0.8.\nRelease notes for Core Assets are available on Github (https://github.com/RedhawkSDR/) in each Core Asset repository.\nCore Framework Fixes The following Core Framework bug fixes were completed in REDHAWK 2.0.8.\n Persona and programmable device pattern code generators compile correctly. C++ components using the RH_LogEventAppender threw an exception during shutdown when the event service was terminated before the component. Properties set as \u0026ldquo;commandline\u0026rdquo; are appropriately overridden on deployment. Removed traceback messages from qtbrowse. sb.DataSink no longer stores invalid timestamps. Assembly controller properties can be renamed (and overridden) at the Application level. Fixed improperly scoped locks in Core Framework control. Fixed several C++ constructs that do not compile on newer versions of gcc. To maintain backwards compatibility, updated the XSD/DTD default value for kind and configurationkind from \u0026ldquo;property\u0026rdquo; to \u0026ldquo;configure\u0026rdquo;. Listing registrants for an unknown event channel returns an empty list. Readonly property kind properties for Devices and Services can now be modified during deployment using Device Configuration Descriptor (dcd.xml) file.  Special Resolutions The following previously reported Known Issues have been closed in REDHAWK 2.0.8 with the following resolutions:\n Won’t Fix  Unit test for Devices in 1.8.X returns Component object - This issue is not present in REDHAWK 2.0+ series. Struct_from_props fails during allocate_capacity in python device - This behavior is not an error.  Fixed By Other Issue  GPP Valgrind Results - Fixed by improvements made to the GPP during development in the REDHAWK 2.0 series.  Cannot Reproduce  –enableOctave test failed on codegen test test_02_EvaluateUnitTests [Component: octaveTest0]   IDE Fixes The following IDE bug fixes were completed in REDHAWK 2.0.8.\n An error is now displayed when attempting code generation with an unsupported template type. Fixed an issue to ensure that only appropriate menu items to the current selection are displayed in context menus. In the Port Monitor View, corrected the display of data rates for low-rate data streams. The Launch Waveform wizard search capability now assumes a leading wildcard character. Double-quote entries for property string values are now always treated as empty strings. In the PRF editor, the Remove Value button is now correctly enabled. Resolved errors when adding and removing Devices and Services using the Devices tab in the Node editor. Resolved title text discrepancies in the Properties View. The context menu for a Domain Manager no longer shows \u0026ldquo;Connect\u0026rdquo; if the Domain Manager is already connected. Fixed issue to ensure that simple properties that are not of type \u0026ldquo;property\u0026rdquo; cannot be assigned the command-line attribute. In the Properties tab of the SAD editor, the members of properties belonging to the assembly controller no longer display an external ID. Corrected a code issue internal to the IDE during the code generation process. When attempting to perform a \u0026ldquo;Display SRI\u0026rdquo; action on a Tuner with no applicable Ports, an error message is now displayed. Displaying SRI for a FrontEnd tuner no longer prevents other IDEs from also displaying the SRI. Ensured that when plotting SDDS ports, a conneciton ID can be specified. This also corrects issues with plotting for SDDS Ports on FEI multi-out Devices. Improved error handling when a query of a resource’s Properties returns unexpected results. Corrected an issue where values could not be added to a struct sequence in the Properties tab of the SAD editor. Deleting a resource in the Target SDR now closes any associated open editors. Limited refreshes of underline Port model objects. Corrected an NPE that occurred when using the Redhawk Import wizard for a shared library project. Ensured that deleting a Component instantiation only cleans up the hosting Component placement if there are no remaining sibling instantiations. Removed shared libraries from the Property browser. Deleting an aggregate Device removed references from associated compositepartofdevice tags. When adding Ports using the Port tab in the SPD editor, an NPE is no longer logged. When launching a Domain Manager with a name that is duplicated in another running Domain, the IDE now always shows an error. Resolved ClassCastException when launching Waveforms containing references to mistyped properties. Corrected an issue where the IDE could hang or become sluggish while using the CORBA Name Browser view. Corrected the default property kind in the DTD schema for PRF files. The IDE now allows configuring ’property’ kind properties that have the ’commandline’ attribute set. The IDE now passes the initial value of ’property’ kind properties to initializeProperties() when resources are launched in the Sandbox. In the Properties tab of the SAD editor, overriding the values of properties is no longer allowed when it does not make sense (for example, allocation properties). Negative numbers are no longer allowed in values for complex unsigned properties. Parsing of complex boolean properties was also corrected. Added the Logging Configuration Plugin appendix to the help and corrected the link to the List of Acronyms appendix. Corrected an error that occurred when the value of a simpleref inside a structref in a SAD file did not make sense for the referenced property type. Resources now report an error if they receive a non-sequence value for a simple sequence property. Fixed incorrect validation message for structs containing a sequence with no values while also containing a simple with a default value. Corrected an NPE that occurred when saving a SAD or DCD file with no name. When installing IDL projects with sudo privileges, the permissions are set on the installed artifacts such that they are visible to non-root users on the system. Added the Eclipse p2 director application to the REDHAWK Explorer product. Resources now show errors associated with any of their properties. An internal IDE model was corrected to prevent a compilation error. Fixed issue to ensure Data List is not enabled for unsupported Ports. Fixed issue to ensure that Play Port is not enabled for unsupported Ports. Fixed issue to ensure that Snapshot is not enabled for unsupported Ports. Fixed issue to ensure that the profile for a running Domain Manager, Waveform, or Device manager cannot be edited. Fixed issue to ensure that the Domain Waveform associated with a local Waveform cannot be edited. Fixed issue to ensure that the exec params for a launched resource in the Sandbox cannot be edited. Fixed issue to ensure that the implementation ID for a launched resource in the Sandbox cannot be edited. After listening to an event channel, the IDE now correctly releases all internal resources. Event channels can now be listened to from the CORBA Name Browser view. Fixed issue to correct an NPE so it does not occur while interacting with the CORBA Name Browser view. Text on the IDE splash screen is now correctly displayed and not truncated.  Special Resolutions The following previously reported Known Issues have been closed in REDHAWK 2.0.8 with the following resolutions:\n Cannot Reproduce  Generate button temporarily disabled on SPD editor - Cannot Reproduce SAD editor properties tab allows setting external IDs on struct / struct seq members - Cannot Reproduce   Documentation Improvements/Fixes The following documentation new features/improvements/fixes were completed in REDHAWK 2.0.8.\n Updated the REDHAWK SCA and ICD documents to describe duplicate Device and DeviceManager registration behavior. Fixed display of level 5 headings. Added Octave information to installation information in the REDHAWK Manual. Added a note about avoiding reserved names in the REDHAWK IDL Project section of the REDHAWK Manual. Corrected incorrect reference of redhawk-connect-name with redhawk-connection-name in the REDHAWK REST section of the REDHAWK Enterprise Integration User Guide. Fixed trivial grammar issue in Logging Configuration Plugin Appendix. Added REDHAWK Jaxrs Security Filter chapter to REDHAWK Enterprise Integration User Guide to explain how to configure role-based access to individual REST endpoints. REDHAWK Enterprise Integration documentation to explain how to configure Jetty w/ Jacorb. Added required naming conventions to the REDHAWK Manual. Added space after REDHAWK graphic on REDHAWK Overview title page. Removed Additional Documentation section from Download page. Corrected dashes in the sample code in the Setting Up the REDHAWK Repository section of the REDHAWK Manual.  "
},
{
	"uri": "https://redhawksdr.github.io/manual/2.0-lts/",
	"title": "2.0 - (LTS)",
	"tags": [],
	"description": "",
	"content": "Long Term Support (LTS) for current REDHAWK 2.0.X releases will continue through October 2019.\n REDHAWK 2.0.8 Manual REDHAWK 2.0.7 Manual REDHAWK 2.0.6 Manual REDHAWK 2.0.5 Manual REDHAWK 2.0.4 Manual REDHAWK 2.0.3 Manual REDHAWK 2.0.2 Manual REDHAWK 2.0.1 Manual REDHAWK 2.0.0 Manual  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.0-lts/",
	"title": "2.0 - (LTS)",
	"tags": [],
	"description": "",
	"content": "Long Term Support (LTS) for current REDHAWK 2.0.X releases will continue through October 2019.\n REDHAWK Release Notes - 2.0.8   REDHAWK Release Notes - 2.0.7   REDHAWK Release Notes - 2.0.6   REDHAWK Release Notes - 2.0.5   REDHAWK Release Notes - 2.0.4   REDHAWK Release Notes - 2.0.3   REDHAWK Release Notes - 2.0.2   REDHAWK Release Notes - 2.0.1   REDHAWK Release Notes - 2.0.0   "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.0-lts/release-notes-2.0.7/",
	"title": "REDHAWK Release Notes - 2.0.7",
	"tags": [],
	"description": "",
	"content": " The effort in REDHAWK 2.0.7 focused on:\n Core Framework\n Resolving soft package dependency issue so DeviceManager resolves run time environment settings when deploying Devices and Services that have soft package dependencies. Resolving issue so that during Application release, calls to the Application object no longer result in misleading errors. Improving flexibility to ignore GPP threshold checks when determining if the GPP should go into a BUSY state. Resolving issue where processes with spaces in the names would cause the GPP to terminate. Resolving issue to allow for slow startup conditions of OmniNames service before starting OmniEvents service. Resolving issue with uninitialized data structures with BulkIO and SourceSDDS that inhibited BulkIO data transfers. Resolving issue with incorrect exception being thrown during allocateCapacity. Resolving issue when shutting down orb from Python resources. Providing a warning in the logs if a message is too large. Resolving issue with the code generators so they can be run on systems with FIPS enabled. Resolving issue so generated C++ FEI Devices do not leak memory when deallocating listeners. Existing Devices must be regenerated and recompiled to apply this fix. Resolving a memory leak in FrontendTunerDevice::create(). Existing Devices must be recompiled to apply this fix. Resolving issue so the functions returnRFInfoPkt transform all fields between types frontend::RFInfoPkt and FRONTEND::RFInfoPkt. Resolving issue so BulkIO input stream calls to read() and tryread() with a sample count do not segfault when their queue contains only an empty packet with EOS set.  IDE\n Providing an option in the IDE to perform a FrontEnd Device allocation in the background to aid developers who are debugging their FrontEnd Devices. Adding the Eclipse “TM Terminal” in the IDE, a full-featured terminal emulator that provides full ANSI cursor control, readline, and coloring. Fixing links in the IDE’s help contents so REDHAWK help now displays correctly when links within the help are selected. Resolving issue so Diagram shapes no longer stack if they are part of a feedback loop.  Documentation\n Adding documentation for developing a logging configuration plug-in that will be used to resolve the LOGGING_CONFIG_URI parameter during deployment of Devices, Services and Components. Renaming the Generating Code section to Generating Code for Components and explaining the code generation process and what occurs in the IDE when the code is generated. Updating the REDHAWK User Manual with accessibility rules for all properties. Updating the REDHAWK ICD with the description of the new “property” kind.  REDHAWK Enterprise Integration\n Adding toString() method to RedhawkStruct object, ensuring the getAllocIds(RedhawkStruct s) return object is a List, and adding a helper method for retrieving allocIds called getAllocIds(). Updating REDHAWK Driver to properly clean up driver-registered Device Managers on shutdown. Adding IDL source to appropriate Core Framework jars. Incorporated additional method to produce jar bundle with manifest built dynamically via the BnD Tools, source jar, and zip of XSDs. Updating REDHAWK Java Driver and REDHAWK REST to make it easier for users to access External Properties in Waveforms. Adding implementations of ConnectionManager, AllocationManager interfaces to REDHAWK Driver. Adding utility methods for programatically setting the log level of Domain, Application, Device, and Component Resources. Adding REST access to Event Channel Manager functionality. Updating REDHAWK Driver to have wrapper methods for retrieving state, connections, activeSRIs, and UsesPortStatistics from BULKIO objects. Updating REDHAWK REST to make connections, activeSRIs, UsesPortStatistics, and state available. Adding wrapper methods to RedhawkApplication and RedhawkComponent interfaces for easier access to aware(), componentDevices(), componentProcessIds(), and componentImplementations(). REST Responses for Component and Application now display componentDevice, aware, componentProcessId, and componentImplementation information. Adding ability to get and set adminState from REDHAWK Driver and REDHAWK REST. Adding ability to view usageState and operationalState from REDHAWK Driver and REDHAWK REST. Adding ability to registerRemoteDomain, unregisterRemoteDomains, get device implementation information and a deviceConfiguration profile via REDHAWK Driver and REDHAWK REST. Preconfiguring HTTPS and WSS in REDHAWK Enterprise Integration and adding Web Server Configuration section in REDHAWK Enterprise Integration User Guide.   Fixes The following IDE and Core Framework fixes were completed in REDHAWK 2.0.7.\nRelease notes for Core Assets are available on Github (https://github.com/RedhawkSDR/) in each Core Asset repository.\nCore Framework Fixes The following Core Framework bug fixes were completed in REDHAWK 2.0.7.\n The Python Sandbox DataSource always calculates per-packet time stamps using floating point arithmetic, avoiding truncation errors when given an integer value for the sample rate. Writing to a C++ BulkIO output stream configured for complex data with real data and a list of time stamps now interprets the time stamp offsets in terms of complex samples, preserving the integrity of the time stamps. On the GPP, when nic_usage is disabled, no message is generated when the usage threshold is exceeded. Resolved issue so now files_available and threads are checked for GPP BUSY state. Clarified logging message regarding reservations. The default implementation of runTest() for Python Components and Devices throws the correct CF.TestableObject.UnknownTest error. Changed run user for omniEvents to omniORB user. Initialized internal data structure for managing blocking state for input Ports. When nic_usage is set to 0 in the thresholds property of the GPP, the GPP will enter a BUSY state, irrespective of the overall NIC usage. Thread management in the Python Component/Device base class is updated to better utilize the processor. Added support to allow LOGGING_CONFIG_URI to be passed on the command line during Component deployment irrespective of whether it was defined by the Component. On CentOS 7, C++ LoadableDevices no longer throw a CORBA::COMM_FAILURE exception from load() when the file cannot be loaded. The severity of the log message when a C++ Device cannot connect to the IDM channel has been reduced from error to warning.  Special Resolutions The following previously reported Known Issues have been closed in REDHAWK 2.0.7 with the following resolutions:\n Won’t Fix\n Struct_from_props fails during allocate_capacity in python device - This behavior is not an error. Query behavior for Optional Elements in Structs - All elements in struct properties are handled as a single configuration item. Make sendChangedProperty events safe for structs that have had attributes added - This issue was rejected.   IDE Fixes The following IDE bug fixes were completed in REDHAWK 2.0.7.\n Updated Java environment specification to Java 8 for the plotter and editor applications. Corrected some configuration data for the IDE plotter application. Corrected an issue that could cause the CORBA name browser to slow the entire UI. Resolved a code quality issue. Corrected context menu icons for simple and simple sequence Properties. Corrected some information missing from Properties when creating new FEI Devices. Corrected the remove button in the new FrontEnd Device wizard so that it is not enabled when a Property cannot be removed. Corrected an error where the Property table in the new FrontEnd Device wizard was too small to see Properties on RHEL 7 systems. Resolved ClassCastException when calling Expand All or Collapse All on a Waveform that includes a HostCollocation. Corrected the display of some spinner controls on RHEL 7. Resolved issue so Implementation tab now displays all usesdevice Property types. Ensured that some code intended only for debugging is not included in the IDE. Corrected the lightweight auto-refresh preference. Fixed NPE in FindComponentConstraint. Fixed error when terminating a C++ Component launched in debug mode. Corrected several internal configuration issues with the code generation menus/buttons for Components. Corrected an NPE that could occur when validating SAD or DCD files with references to non-existent struct sequence Properties. Corrected internal IDE code to properly indicate when XML validation problems are found. Updated SAD/DCD loggingconfig URI validation messages. Component usage name and naming service ID are now kept in sync after a graphical edit. Added missing icons in the DCD editor. Updated a missing environment specification to reflect the requirement for Java 8. The New Control Panel Project button is no longer displayed when editing a REDHAWK shared library project. Corrected an internal IDE issue that could prevent loading REDHAWK XML. Corrected a rare bug that could cause the content in the pages of an editor to become un-synchronized. The BULKIO SRI keyword CHAN_RF is now always preferred to COL_RF for center frequency when plotting. Corrected a code issue that could have suppressed Sandbox errors. The IDE no longer attempts to read Device files when browsing the Sandbox file manager. The release field in spec files created for Waveforms and Nodes is now correct. Corrected a potential code freeze when the IDE loses contact with a connected Domain. Corrected issues with UI themes in the REDHAWK Explorer product. A superfluous ODM event channel is no longer created when the display name differs from Domain name. Corrected some issues with product branding. Corrected an issue with CSS themes. Corrected a copyright notice about Eclipse software. Fixed issue with a ConcurrentModificationException occassionally occurring when using the “Monitor Ports” functionality. The icon for the PRF editor was corrected. Message is now always a selectable kind type for Struct Properties. Corrected a link in the REDHAWK help that was not working. Fixed issue where Waveforms with external Ports were not being removed from the REDHAWK Explorer view on terminate. Fixed issue where the IDL Selection Wizard filter stopped working when the Show all interfaces button was checked. The OSSIEHOME Eclipse variable should not be expanded in the IDL project’s .ecpproperties file. The connect wizard now works with Waveforms’ external Ports. When launching a Node on an existing Domain, the IDE now uses the Domain name instead of the Domain’s display name. Allocation IDs generated in the FEI usesdevice wizard of the SAD Diagram no longer contain user names. Removing a Device/Service instantiation removes the componentfile element from the DCD XML if it is not needed. Component project’s Generator combo box only displays applicable code generators. UsesDevice passes validation with any combination of accepted Properties. The Sandbox Chalkboard now shows as stopped if all Components in it are released or terminated. Improved how HostCollocations are handled by the diagram layout algorithm. A race condition was corrected that allowed a new project to be created with an invalid name.  Special Resolutions The following previously reported Known Issues have been closed in REDHAWK 2.0.7 with the following resolutions:\n Won’t Fix\n The IDE Help REDHAWK Content is not the released version of the documentation - The IDE Help REDHAWK Content includes the documentation during the IDE build process; therefore, the released version of the documentation cannot be included at that time.  Duplicate\n Hide the create control panel toolbar button for Shared Libraries (softpackage) projects - Duplicate of IDE-1958 (Control panel button shown when editing shared library in SPD editor).   Documentation Improvements/Fixes The following documentation new features/improvements/fixes were completed in REDHAWK 2.0.7.\n Updated installation instructions to include RPM that installs the GPG key. Updated the Downloads page to support both LTS and Beta Series of REDHAWK. Added documentation for configuring the REDHAWK Integration assets with JacORB. Added domainName information to REDHAWK Connector and REDHAWK Camel documentation. Corrected base URI information, defined nameserver, and added connectionName information to REDHAWK REST documentation. Updated REDHAWK Enterprise Integration User Guide RedhawkPort and RedhawkApplication information for REDHAWK Driver and REDHAWK REST. Added remoteDomainManagers to the REDHAWK ICD. Added documentation about managing GPP BUSY state. Updated FEI Allocation Wizard Tuner Allocation dialog screenshot and revised text to include new Run in background checkbox. Updated REDHAWK Enterprise Integration User Guide to include Code Examples for ConnectionManager, Logging, and AllocationManager. Updated REDHAWK Enterprise Integration User Guide code examples of EventChannelListener functionality. Updated procedure, Using the FEI Wizard to Create an FEI Device, to include the Setup Code Generation dialog and added screenshot. Updated Host Collocation procedure and replaced screenshots to correctly display collocation name created when adding a collocation. Updated screenshot of SPD editor Properties to correctly display a drop-down for the “Kind”. Updated Converting Complex Data in C++ and BulkIO High-speed data sections of User Manual. Added information to explain that octave Component numerical properties are treated as complex. Corrected property definition shown in code for multi-out Ports by removing kind elements that were underneath the simple elements. Added BurstIO Section to the REDHAWK ICD.  "
},
{
	"uri": "https://redhawksdr.github.io/manual/2.1-beta/",
	"title": "2.1 - (Beta)",
	"tags": [],
	"description": "",
	"content": " REDHAWK 2.1.3 Manual REDHAWK 2.1.2 Manual REDHAWK 2.1.1 Manual REDHAWK 2.1.0 Manual  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.1-beta/",
	"title": "2.1 - (Beta)",
	"tags": [],
	"description": "",
	"content": "  REDHAWK Release Notes - 2.1.3   REDHAWK Release Notes - 2.1.2   REDHAWK Release Notes - 2.1.1   REDHAWK Release Notes - 2.1.0   "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.0-lts/release-notes-2.0.6/",
	"title": "REDHAWK Release Notes - 2.0.6",
	"tags": [],
	"description": "",
	"content": " The effort in REDHAWK 2.0.6 focused on:\n Initial FOSS Release of REDHAWK Enterprise Integration Assets, which provide the ability to interact with REDHAWK in a JRE environment. The REDHAWK Enterprise Integration Assets include:  REDHAWK Driver: Provides simplified access to REDHAWK via standard Java interfaces. This Asset shields all interaction with the underlying REDHAWK Components and provides a simplified API for Java developers interacting with a REDHAWK Domain. The REDHAWK Driver can be leveraged as a standalone Java Archive (JAR) file. REDHAWK OSGi Connector: Implements OSGi’s Managed Service Factory interface to allow users to register pre-configured instances of REDHAWK connections into a Karaf container. REDHAWK REST: Provides a REST Service to command and control a REDHAWK instance. REDHAWK WebSocket: Provides an HTML5-compliant WebSocket implementation that enables the ability to stream data from any REDHAWK BulkIO-enabled Port or Event Channel. Camel REDHAWK: Provides a Camel Component for interacting with a REDHAWK Domain. This Component can be connected with other Apache Camel Components as a data flow solution.   For more information about the REDHAWK Enterprise Integration Assets, refer to the REDHAWK Enterprise Integration User Guide.\n Providing diagnostic messages for log4py configuration files that contain errors and adding support to allow line continuation characters in the log configuration files. Improving the IDE\u0026rsquo;s Domain refresh logic to prevent the IDE from consuming excessive numbers of threads in some scenarios. Documenting a publisher/subscriber pattern when accessing an EventChannel from the Domain. Modifying Burst IO implementation so that BurstIO output Ports will only override the BurstSRI mode flag in pushBurst if given std::complex sample data. Ensuring the creation of and appropriate permissions are on the services directory in SDRROOT. Fixing code generators for Port generation of C++ Components to correctly handle data structures returned from methods. Resolving issue when activating local servants for MessageConsumerPort and MessageSupplierPort Java classes. Resolving issue when ossie.utils.log4py.config is imported after ossie.utils.sb. Fixed by CCB-263 (Formatting issues in -logcfgfile causes python devices to crash) and added unit test to address issue when ossie.utils.log4py.config is imported after ossie.utils.sb. Improving documentation of Signal Related Information (SRI). Supporting the default version of Octave available in CentOS 7 (3.8.2). Correcting the parsing of some numeric literals in Octave M files. Resolving issue with the GPP segfaulting when a Component\u0026rsquo;s soft package dependency does not have proper file access privileges. Resolving issue with getStreamDefinition returning a pointer to memory that could be reclaimed during processing, which would invalidate any access through that pointer. The caller now receives a pointer to a copy of a Stream Definition. Correctly computing deployment-specific capacities that manage hardware resource requirements in cases where the Component is part of a host collocation deployment. Updating Contributor License Agreement (CLA). Revising the BulkIO High-speed data code example in User Manual. Updating the Python package to create instances of the same Application for multiple processes or threads without conflicts. Updating the Python Sandbox to make and break connections from multiple threads without conflicts. Addressing numerous bug fixes.  Fixes The following fixes were completed REDHAWK 2.0.6:\nCore Framework Fixes  Automake files check for correct range in supported Octave version (3.4+). log4j time formats are processed correctly for resources using Python logging. Namespaced Octave Components are supported. Added creation of sdr/dev/services directory when installing from source or the REDHAWK RPM package. Changed default Node and GPP name to not be the fully qualified Domain name. This is now an option to the gpp_setup script. Fixed issue in test with sequencing of sending and receiving messages. Removed Java test when \u0026ndash;disable-java is used when building the Core Framework. When an exception occurs during C++ FEI deallocation, updateUsageState is called to account for the deallocation(s) that succeeded. Fixed issue with C++ FEI Devices for failed allocations. Now, the C++ FEI Device base class returns false when the allocation fails instead of throwing an exception. Fixed logger assignment for StreamContainer class. When the IDL includes a typedef\u0026rsquo;d parameter as an out parameter, the code generator no longer adds an additional \u0026amp; to the generated Port function. Fixed issues with using empty list as a default parameter assignment. Resolved issue with process exceptions for directories with missing or bad permissions. Resolved issue with corrupted stream definition objects when using getStreamDefinition method. Multiple processes or threads can create instances of the same Application via the Python package. In the Python package, failed connections to Application objects raise a NoMatchingPorts exception that includes the Application name instead of an AttributeError. The Python Sandbox can make and break connections from multiple threads without conflicts. In the Sandbox, connecting a DataSink to an SDDS output Port now will return with a no matching Port exception. RPM spec files for Octave softpkg dependencies only copy the needed .m files. Additionally, the source directory name used on the project for the .m files is not changed during rpm installation. Fixed compilation issue with custom IDL and output Ports. Uncaught IO exceptions from log4cxx library are handled so processes will not terminate. Resolved issue with Application launching during stress tests.  IDE Fixes  Package names for Java Components now start with a lower-case letter by default, to adhere to standard Java conventions. In the Component editor, the contents of the XML tabs now reflect all changes made in the other tabs. Updates to a Device\u0026rsquo;s usagename in the Node editor Devices tab are correctly reflected in the associated Devices table. Services in the Sandbox Device Manager now display in the Sandbox Node Diagram. Domains containing large numbers of Waveforms/Device Managers now re-sort their contents appropriately. Port descriptions now display when a Port is selected in any editor. An NPE no longer occurs if the M-file specified for a new Octave project does not contain a function. Ensured that CORBA calls that hang will timeout after a reasonable amount of time. Improved the Domain refresh process to prevent issues with too many threads and multiple simultaneous refreshes of the same object. Prevented the possibility of the IDE using too many threads when there are problems refreshing a domain. IDE Domain/Sandbox refresh code now better responds to cancellation. The CORBA Name Browser view now displays the kind of bound names. The CORBA Name Browser now consistently loads children in the view. Octave functions with arguments that have default values are now created as Properties (instead of Ports) by default in the New Component Project wizard. The IDE promptly displays an error if Octave\u0026rsquo;s include path cannot be found while generating code for an Octave project. Keep tree nodes expanded while navigating the Launch Waveform wizard. The IDE now displays Services in the Target SDR even if they duplicate the ID of another Service the IDE has already loaded. The IDE does not change the DCE ID of a project when it is renamed, which can cause problems if the user installs both the old and new versions of the project in the SDRROOT. References to non-existent struct simple properties are now handled gracefully. The editor action bar no longer attempts to load duplicate ActionHandlers. Fixed an occasional NPE that occured when using the Device Manager Explorer diagram. Corrected some XML validation for \u0026ldquo;affinity\u0026rdquo; and \u0026ldquo;componentproperties\u0026rdquo; in SAD and DCD files. Improved the error message for a failed domain launch to provide more detail and troubleshooting information. Properties of type ulonglong are now passed to resources launched in the Sandbox. Multi-delete functionality race-condition is now handled gracefully. Corrected a potential code freeze when updating the Domain\u0026rsquo;s Waveform list. The IDE no longer displays a tree expander next to SRI keywords if there are no keywords to display. Some code associated with Device Manager diagrams was corrected to prevent potential future bugs. Clicking the Terminate context menu on the Sandbox Device Manager now terminates its services. Clicking the Shutdown context menu on the Sandbox Device Manager now terminates its services. Resolved issue where services launched via REDHAWK Explorer were receiving duplicate names. Read-only Properties of kind \u0026lsquo;property\u0026rsquo; can now be overridden, and their values are passed to initializeProperties() in the Sandbox. Fixed bug that occurred when editing the namespace of existing projects. An error message was sometimes displayed after closing the \u0026ldquo;Allocate Tuner\u0026rdquo; wizard. Services launched in the Sandbox Device Manager diagram are now displayed in gray, and their menu options are disabled until they launch and register with the Device Manager. Corrected an inefficient monitoring of Devices by the Device Manager diagrams. Corrected a unit test failure that occurred when building in a docker container. A file descriptor which was being left open is now closed. A code quality issue was corrected. Removed an instance of double-checked locking. Corrected some internal domain model state inconsistencies. Diagrams now open without an error in the REDHAWK Explorer product.  Documentation Fixes  Fixed typos in the Managing and Defining Properties section. Updated links on the Documentation web page to point to GitHub. Corrected SAD file location in the SAD File section.  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.0-lts/release-notes-2.0.5/",
	"title": "REDHAWK Release Notes - 2.0.5",
	"tags": [],
	"description": "",
	"content": " The effort in REDHAWK 2.0.5 focused on:\n Maintaining the correct time stamp when pushing data from the Sandbox DataSource. Improving a Component\u0026rsquo;s response to messages irrespective of whether or not the Component is started or stopped. Improving FileSink support for framed data and timecode with BLUE file output. Improving the handling of missing event message fields in C++ and Python. Ensuring external Port names are recognized. Addressing numerous bug fixes.  Fixes The following fixes were completed REDHAWK 2.0.5:\nCore Framework Fixes  Component start order is now honored when calling the Sandbox\u0026rsquo;s loadSADFile method. Reduced the number of messages indicating a bad connection when a remote Component dies and a connection to it exists. The behavior for mismatch between the message structure being received and the expected structure has been harmonized across C++, Python, and Java. If DomainManager is not compiled with persistence enabled, persistence flags are now ignored. Removed sending SIGQUIT during the terminate sequence for Components. Connection issues for BulkIO Ports are logged as errors, and repeating messages will be suppressed once a threshold has been achieved. Python BulkIO Ports now report error messages during pushPacket and pushSRI operations. For Octave Components that add shared libraries, the library\u0026rsquo;s implementation reference is correctly referenced when generating a Component. Multi-out Ports issue an EOS when listeners are deallocated. Added default resolution of SDRROOT target installation to be /var/redhawk/sdr if a user\u0026rsquo;s shell environment configuration is incomplete. log4j time formats are processed correctly for resources using Python logging. Removed obsolete comments that no longer applied. The Domain\u0026rsquo;s ConnectionManager will remove connections from its pending list if connection deferral is not allowed. When specifying a user when daemonizing nodeBooter, all the user\u0026rsquo;s groups (primary and secondary) are associated with the process. Also, groups can now be defined as comma-separated names on the group switch when starting nodeBooter. On startup, calls to the configure function on the Component or Device only occur if there is at least one Property to update. C++ BulkIO output Ports now report the correct bits per second in statistics in all cases. The redhawk module in Python has a complete replication of the CORBA interface for the remote object at a base level (not just on the ref member). When DeviceManager is launched and DomainManager is not available and persistence is enabled, Name Service is populated with the DeviceManager, Device, and Service information. Added the ability to specify a wait time for client calls from the DomainManager to remote servants when an underlying mutex is locked and restricts other activities using the DomainManager. Java Components using org.ossie.events.Subscriber class can register a callback interface when new event messages arrive. FileSink sets the subsize field in BLUE file headers to match the frame size when the input stream is two-dimensional. FileSink formats framed data correctly with BLUE file output. The Sandbox\u0026rsquo;s BlueFileReader can handle two-dimensional (framed) data in the form of type 2000 files. The Sandbox\u0026rsquo;s DataSink can handle framed data of type \u0026lsquo;char\u0026rsquo;. The bluefile module properly chunks framed two-dimensional (framed/type 2000) data. It also properly handles complex data when it is two-dimensional. FileSink now uses the timestamp of the first BulkIO packet to set the header timecode for BLUE file output. At the end of BLUE files, FileSource would sometimes send a zero-length packet with no EOS and a zero-length packet with EOS set. The zero-length packet with no EOS was removed. Eclipse plotting widgets can be started from the Python Sandbox. The default implementation for retrieve_records, retrieve_records_by_date, and retrieve_records_from_date on the logging interface for C++ Components and Devices no longer segfaults when executed. Codegen testing now evaluates all unit tests for namespaced Components. Namespaced Waveforms can now be launched in the Sandbox using the fully-qualified namespaced name. If a Component was shutdown while pushing data, it would occasionally deadlock. This race condition was removed. When pushing data, the Sandbox DataSource advances the time stamp according to the initial time and the number of samples sent. If an FEI Device contains input BulkIO Ports, releasing a tuner does not cause an error message. When a BulkIO input stream is disabled, packets for that stream with EOS set are handled and reported correctly. Components in Java, C++, and Python respond to messages irrespective of whether or not the Component is started or stopped. Conversions of header keywords between BLUE file and REDHAWK SRI are handled properly. Deallocation of an FEI controlling allocation ID cannot be done using a listener allocation structure. The SRI changed status is provided for the first packet received using the stream API. An application\u0026rsquo;s getPortSet() method uses the external Port name provided in its SAD file. Empty directories are not created in the GPP\u0026rsquo;s cache directory when log4py FileAppender is configured with the absolute file path. When a BulkIO input stream receives an EOS, the input Port\u0026rsquo;s getCurrentStream() now always returns the stream once to give the caller a chance to check for EOS. Fixed possible Python FEI Device deadlock issue when responding to requests (for example, getTunerEnable, allocateCapacity).  IDE Fixes  Reworked how the IDE diagrams add actions to toolbars and menus, which resolves the handler conflict errors that were thrown when multiple diagrams were opened concurrently. In a diagram, Port modifications to existing Components are now displayed the next time the diagram is opened. When marking Ports as external in a SAD diagram, if external Ports are created with the same name, the names are suffixed to make them unique. A domain Waveform opened with the Chalkboard editor now is in sync to reflect the same status changes (for example, start and stop) in the Explorer view. When creating FEI Devices, the pages of the New Project wizard now include the setup code generation page for C++ and Python. The x-axis on plots adjusts to changes in the CHAN_RF and COL_RF Properties in SRI. The PROFILE_NAME argument is now correct for resources launched in the Sandbox. In the Properties view for an FEI tuner, the title was adjusted to be the tuner ID, and the tab name was changed to \u0026ldquo;Properties\u0026rdquo;. The naming context names that the IDE uses in the Sandbox now are the same as the core framework at runtime. Newly created projects are properly configured so that projects now report warnings and errors in the Problems view for Redhawk XML files. The status for an object in a domain is now updated when its profile (XML) is loaded. The CORBA name browser view now displays names that contain periods. The Sandbox diagrams always show the correct state for a Component or Device that was launched while the diagram is open. Corrected code that was being run in an incorrect thread inside the IDE. Namespaced Java Components in the user\u0026rsquo;s workspace can now be launched in the Sandbox. The logging menu is not shown for Waveforms. Fixed an NPE in the SAD editor that occurred when an external Port in the SAD XML referenced a non-existent Component instantiation. Fixed an NPE that occurred if a Waveform with an event channel connection was launched in the Sandbox. Fixed an NPE when generating code for a project that was caused by a corrupt configuration file. Fixed issue causing an internal IDE error when generating code for an Octave Component and Octave was not installed. An internal IDE model detail is no longer shown when browsing a componentInstantiation. The same Component can now be launched from both the workspace and the SDRROOT simultaneously in a Diagram. Adding a FrontEnd Uses Device to a Waveform no longer causes an error when saving the Waveform.  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.0-lts/release-notes-2.0.4/",
	"title": "REDHAWK Release Notes - 2.0.4",
	"tags": [],
	"description": "",
	"content": " The effort in REDHAWK 2.0.4 focused on:\n Adding support for the CentOS 7 operating system. Updating the REDHAWK IDE to require Java 8. Adding support for two new Core Assets, SinkSDDS and SourceSDDS, which convert between SDDS and BulkIO data formats. Adding messages to indicate to the user the reason why the GPP is busy. Adding more IDE XML validation to help users catch issues sooner when designing projects. Corrected issues with Redhawk-generated build scripts that prevented errors from being displayed. Adding ’Connect’ and ’Show Properties View’ in the Graphiti diagram context menus. Adding GPP label to the Domain Manager log message when deploying Components or Waveforms to enable quick identification of which GPP the Domain Manager is attempting to launch Components on. Improving the REDHAWK Explorer product to use the new Graphiti diagrams introduced in the REDHAWK 2.0.0 IDE. Improving IDE namespace support to give users an error if they have multiple resources with conflicting IDs in the SDRROOT. Addressing numerous bug fixes.  Core Framework API Changes The following API changes have been made.\n GPP sys_limits structure Property identifiers have changed. This is a readonly Property reported by the GPP during a query call. The resulting sys_limits Property identifiers returned from the query call now correspond to the New ID column.     Old ID New ID     current_threads sys_limits:current_threads   max_threads sys_limits:max_threads   current_open_files sys_limits:current_open_files   max_open_files sys_limits:max_open_files    Improvements The following Core Framework and IDE improvements were completed in REDHAWK 2.0.4.\nCore Framework Improvements  Improved build support files so IDL references in an IDL project can be listed in any order. Improved support for Components with multiple implementations. When the local file for a secondary implementation is missing, that implementation is ignored. Fixed omniEvents to run on CentOS 7.  IDE Improvements  Improved XML validation. Improved namespace support to display an error when multiple elements in the SDR root have the same DCE ID. Improved Graphiti diagram context menus by adding Connect option. Improved warning dialogs by adding warnings for deallocate all and New Control Panel. el6-i686 Added a warning message for properties that have kind message that are not a struct.  Fixes The following IDE, Core Framework, and Core Asset fixes were completed in REDHAWK 2.0.4.\nCore Framework Fixes  If the Sandbox is started when a plot is created, the plot’s initial state is set to started. Python SPD parser correctly exports capitalization for softpkg. Python Codegen can handle camel-case structure definitions. Exceptions in port_impl code are now passed to the caller instead of ignoring them. When a call to runTest on the Application has unknown properties, it lists the unknown properties. In GPP, merged create_node.py and devconfig.py into gpp_setup script, updated the install scripts to use gpp_setup, changed the model to REDHAWK GPP, and updated GPP properties to 2.0 property kinds. Better error is given when redhawk.attach is invoked with no visible Domains. Improved error message when missing dependency is a softpkg. Java unit tests are disabled when the core build does not have Java enabled. Python Sandbox createApplication call includes Device assignment sequence as an argument. Fixed PartialConfiguration error for init of properties with kindtype of both property and allocation. Deallocating a listener sends an EOS out of the BulkIO Port. If the Device Manager does not have write access to the cache directory, it logs an error instead of having a segmentation fault. Corrected giop:unix endPoint format in rh_net_diag utility. Added the name of the missing file to the error message when parsing spd files. Sandbox DataSDDSSink stores the latest SRI received. Code generator correctly handles programming language element in the implementation element. SDDS Ports push SRI on new connections. If omniEvents is stopped, and the Domain is shutdown, a correct message is generated. Added namespace qualifiers for sys_limits structure property members in GPP. Enhanced error handling for problems during Device registration. Python library does not release Applications on exit by default. External property overrides are allowed for loadSADFile call in the Sandbox. Sandbox loadSADFile allows for namespaced property names. Default values are correctly generated for sequence of structures in C++. Calls to FileSystem::exists() no longer cause the Domain Manager process to abort. Fixed issue with GPP statistics type conversion for large numbers that resulted in occasional errors in the usage statistics. Spec file for namespaced Components, Devices, and Services includes complete directory paths. Fixed compatability issue with partial configuration during initializeProperties. Missing read permissions on Component installations no longer crash the Domain Manager. Python FEI infrastructure matches C++ FEI infrastructure. Java FEI infrastructure matches C++ FEI infrastructure. Fixed the proc function in the Python Sandbox by updating DataConverter to rh.DataConverter. Unit tests do not deadlock on 32-bit CentOS 6. cleanomni script correctly determines root privileges. cleanomni only attempts to start omniEvents once if the omniEvents service startup fails. Tests run manually (via runtests.py) and tests run as part of the continuous integration infrastructure use the same test environment. Readonly property kind properties are initialized through initializeProperties. DeviceManager can correctly parse Device spd files when they contain dependency elements. Automake warnings are not issued when compiling on CentOS 7. In Python ExecutableDevice.terminate(), wait until the entire process group has exited before checking the process status and returning. rhlauncher has the updated REDHAWK logo. omniEvents waits for omniNames to be ready before deploying. Components launch in the Sandbox with GNU debugger.  Special Resolutions  Won’t Fix  Core framework runtime failure if basic Components are not installed - The Sandbox requires the DataConverter Component be installed for format conversion. Limited IDL path search for IDL - Previous code generators did not allow for additional search paths. This has been resolved in newer releases. Java Devices do not deal well with a NULL IDM channel - The normal Java Device startup will handle all Null Pointer Exceptions (NPE). Developers are encouraged to use Publisher and Subscriber interfaces and not the internal connectEventChannel(), which will cause an NPE. Sandbox initial configure call includes execparams - execparam and configure are both deprecated. Therefore, changing the behavior would not be beneficial because new Components are not created with these properties, and there is a chance that existing Components would be broken. C++ Appender prints error on stderr - This behavior is intrinsic to log4cxx. The message is sent during a reconfiguration request when an error is encountered. Incorrect use of daemon function in omniNames init.d script - This defect is part of the EPEL distributed package of omniOrb.  Fixed By Other Issue  Python service generator throws an exception with non-namespaced IDL interface - Fixed by REDHAWK release 1.9.  Cannot Reproduce  Python Device Codegen uses incorrect name in Makefile.am. Multiple message out Ports in C++ causes malformed port_impl.h. If more than one Application is created with the same name using createApplication on the Python package, the tracking of the Applications breaks.  Duplicate  Spelling error in Application error message - Duplicate of CF-1550 (Log message says “Abormal”). SAD validation fails when an implementation is missing - Duplicate of CF-1556 (Improved support for Components with multiple implementations. When the local file for a secondary implementation is missing, that implementation is ignored.).   IDE Fixes  FindBy Wizards no longer allow mulitple Ports with the same name to be added. Fixed null pointer exception (NPE) with SAD file properties and assembly controller actual properties. Ports no longer can be added for Service projects with an interface that does not extend CF/PortSupplier. Indexer now imports BurstIO information. Fixed issue causing an error when deallocating a Python FEI Device. FindBy direct edit dialog only enables the Delete button after a Port is selected. Graphiti diagrams were refactored between repositories. Fixed NPE with SAD referencing Port names that do not exist when launching in Sandbox. Corrected warning message displayed when overwriting modified files. Property View inner tab name now always displays “Properties”. An error no longer occurs when invoking shutdown on Sandbox Device Manager. REDHAWK IDE RPM now requires necessary development packages. Sources in the Makefile.am.ide are ordered lexicographically. Code generation no longer unsets C++ build exclusions. Devices launched in Sandbox are now configured during registerDevice. Toolbar buttons (start/stop/release) are now enabled for local Waveform editors. DCD model does not allow invalid domainmanager element. IDE now sends the correct properties when a Component/Device is launched in the Sandbox. EMF validation error now occurs if a Struct does not contain at least one simple or simple sequence property. Code was refactored so IDL path sources use preference. Fixed NPE with Waveform/Node project references to a non-existent SPD. Removed references to several plug-ins that are not necessary as dependencies. Required PyDev dependency was added for Sandbox console. Correct exec param properties are now used when launching in the Sandbox. SoftPkg elements are no longer expandable in Explorer view. The FEI Device wizard no longer creates the frontend_tuner_allocation property as a partially-configured struct. Corrected diagram titles and tooltips. When generating a namespaced Waveform or Node, the .spec file now owns parent directories. The message property kind is only displayed for struct properties or if the property is already a message kind. Fixed omniORB IDL parsing errors. Diagram icons now match Explorer view icons. Dependencies were added to the IDE RPM for necessary GTK libraries. Fixed display issues on CentOS 7. Waveforms with more than one declared namespace launch in the IDE Sandbox. Launching a Device in the Device Chalkboard with the Device Chalkboard open no longer causes an error. The IDE now uses the stable release of Nebula (1.0.0). The IDE now uses the latest PyDev update (4.5.5) for Eclipse Mars. The IDE’s NeXtMidas version was locked to 3.6.  Core Asset Fixes REDHAWK Basic Components  FileReader - bluefile byteswap hardcoded to false. Sourcesocket - Properly handles FIN in client mode when server closes connection. SourceVITA49 - Expanded unit tests. SourceVITA49 - Corrected to assume payload is big endian if not specified. SourceVITA49 - Fixed so destroy_rx_thread is threadsafe.  REDHAWK Basic Devices  FmRdsSimulator - nodeconfig.py script now modifies the rh.FmRdsSimulator profile in-place. RTL2832U - nodeconfig.py script now modifies the rh.RTL2832U profile in-place. USRP and RTL - Updated nodeconfig.py script to use new Sandbox API get_simple instead of get_props. USRP_UHD - nodeconfig.py script now modifies the rh.USRP_UHD profile in-place.  Documentation Improvements/Fixes  Updated the dependency list for installing from source on CentOS 7. Corrected information about creating REDHAWK Projects in the IDE. Added information about new warning dialog displayed when deallocate all is selected. Updated graphics to display Monitor Ports on context menu for resources in Graphiti diagrams. Updated graphics to display Connect in Graphiti diagram context menus. Updated graphics displaying Show Properties in Graphiti diagram context menus. Updated REDHAWK installation instructions. Updated image on REDHAWK home screen. Removed incorrect/obsolete upgrade instructions. Updated steps in Allocating a FrontEnd Tuner procedure. Modified Configuring omniORB heading to Configuring JacORB for the IDE. Removed Installing RH on Ubuntu appendix. Removed invalid IDE dependencies. Added information about SourceSDDS and SinkSDDS. Updated Figure 17.17 Running Waveform in the Chalkboard with graphiti diagram.  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.0-lts/release-notes-2.0.3/",
	"title": "REDHAWK Release Notes - 2.0.3",
	"tags": [],
	"description": "",
	"content": " The effort in REDHAWK 2.0.3 focused on fixing the following bugs.\n Improvements to GPP automatic resource monitoring caused a memory leak. Incorrect return type in the GPS interface implementation of FrontEnd Interfaces. Python Devices failed to launch when a logging config file is specified.  Fixes The following Core Framework fixes were completed in REDHAWK 2.0.3.\n The correct current logging level is now reported in the Logging Level wizard in the Sandbox. There is no longer a memory leak in the GPP. gps_time_pos for the C++ GPS Port implementation returns the correct type. C++, Python, and Java uses FEI control Ports do not fail silently when the remote Device connection fails. Methods in fe_tuner_port_impl.h no longer fail and now return initialized values. Python FEI Ports now generate valid return objects for FEI Ports. Java FEI Ports compile for all FEI Ports. _pid is now populated on Components launched through the Sandbox.  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.0-lts/release-notes-2.0.2/",
	"title": "REDHAWK Release Notes - 2.0.2",
	"tags": [],
	"description": "",
	"content": " The effort in REDHAWK 2.0.2 focused on:\n Improving how error messages are displayed to the user in the IDE. Adding new abilities to interact with logging for Components and Devices in the IDE. Providing better awareness of resource utilization on the host computer. Addressing numerous Discrepancy Reports (DRs). Adding better support for creating FEI Devices written in Python.  New Features  Enhanced IDE to use new Domain Manager method for launching Waveforms. Added IDE support for setting a running Component’s logging configuration. Added IDE support for viewing a running Component’s logging events. Added a Property on the GPP that provides a per-Component GPP resource utilization.  Improvements IDE Improvements  Improved error messages when working with Properties. Improved error messages when launching resources in the Sandbox. Improved error messages when start/stop fails for Components. Improved error messages for the SCA file system.  Core Asset Improvements  Updated UHD driver to version 3.7.3.  Fixes IDE Fixes  Source is no longer ignored in org.ossie bundle. Fixed domain loading on Windows. ScaItemProviderAdapterFactory is always disposed. Fixed null pointer exception (NPE) in editors. Renamed context menu “Apply Horizontal Tree Layout” to “Arrange Diagram”. Fixed issues with SCA file stream cleanup. When launching a Domain Waveform, fixed error so Waveform editor opens. Fixed issue causing stack trace errors to be displayed when refreshing Properties. Properties without a kind or configurationkind are now considered . Octave Component can be launched in debug mode. Event channels and Waveform containers can be refreshed. When a runtime explorer Node diagram is open and connections are created, this no longer causes an NPE. Runtime explorer Node diagrams show connections. Multiple Sandbox Waveforms with similar names can be opened. configure Properties are now set for Devices launched from the Python Sandbox. When loading Domain items, improved error details provided in Explorer View. Status details will not display for errors on the file manager. In File Manager, CORBA file objects are deactivated after they are closed. Opening a Node diagram containing a Device/Service not in the SDR no longer causes an NPE. Tooltips for long Property descriptions are displayed. Deleting a Component from the SAD diagram deletes its external Properties or external Ports. When editing Nodes, unique componentinstance id’s are created for Devices/Services. New IDL projects have include paths to omniORB COS IDLs. IDE can now connect to and display content from multiple Domains with the same name. OCTAVE_PATH is now set in the Chalkboard for softpkg dependencies. SPD editor Overview tab now displays correct resource type. Environment variable paths are now properly set for resources launched in the Chalkboard. Editing a Find By name no longer creates a duplicate item in the diagram. DataList correctly displays complex data streams. usesdevice elements type attribute is optional. Error messages are displayed in the Launch Domain Manager Wizard. Improved performance of Node Explorer diagram. Connections created in design-time diagrams can be undone. Improved Waveform Explorer diagram. In a runtime diagram, fixed error so cannot undo release/terminate of Component. Launch Waveform Wizard displays overwritten Properties. Connections from Java Components are displayed when diagrams are opened. Sequence values in Runtime Property dialog can be deleted when in edit mode.  Core Framework Fixes  Added Python helper that simplifies the creation of SRI objects for FEI Devices. Python FEI Devices now contain extended mutex control over control member variables in the tuner base class. Python FEI Devices do not call deviceDeleteTuning when deallocating a listener. Python FEI Devices can deallocate a listener from the IDE. Python FEI Devices Ports contain the correct reference to the parent Device object. Python FEI tuner control Ports implement the correct inheritance hierarchy. In Python Components and Devices, using CF.LogConfiguration.setLogConfig(String) now correctly sets the log configuration. The Java logging appender only prints an error on stderr when an error condition exists. C++ Appender now prints debug info to the log file instead of stdout. Property initialization of struct sequence no longer triggers Property change listener. C++ AnyUtils can convert strings to octet. BulkIO chunking accounts for subsize, aligning subsize boundaries. The Connection Manager allows Component to Component connections. The GPP Property XML file now includes mcastnicEgressFree. In a multi-system REDHAWK environment; when restarting a GPP after the restart of a Domain Manager, with persistence enabled, the GPP no longer aborts on startup. The GPP reports correct number of CPUs on all supported versions of CentOS. When the Domain Manager is terminated normally, the event channels are cleaned up from the name service. The Event Channel Manager honors the requested registration ID. Event channels can register with the PropertyListener. log4py can create directories when specified in the log configuration file. FileManager does not fail when calling getMounts. Java Port objects match the reported object in the connection description. In the IDE Python Sandbox, sb.show() Component connections displays the correct results. In the Python Sandbox, connection IDs can be reused. Removed superfluous warning from libnuma on 32bit VMs. Making connnections between GPS Ports in Java Devices no longer causes an NPE. SIGCHLD is properly propagated in GPP. In Python Devices and Components, exceptions in the process function are logged. Extended the start call on Application time out. Python Sandbox launch function works as expected in the IDE. Python Sandbox no longer uses path to identify resource type. Python Sandbox loadSADFile works correctly when Components have Properties with special characters.  Core Asset Fixes REDHAWK Basic Components  DataConverter improved unit tests to include unscaled unit tests. DataConverter eliminated data distortion for Short to Float and Float to Float conversions. DataConverter fixed to only scale output when configured to do so. FileReader fixed to start when launched with non-default source_uri. FileWriter fixed feature that starts a new file following a retune. FileWriter fixed initial configuration of overridden Property values. FileWriter fixed several bugs with the recording timer. psd moved stream callback registration to the REDHAWK constructor. psk_soft updated to apply initial Property values. sinksocket updated to apply initial Property values. SinkVita49 fixed bug that prevented SRI updates after being stopped and restarted. SinkVita49 fixed to stop immediately when a stopis initiated. TuneFilterDecimate fixed calculation of SRI keyword CHAN_RF for tuning mode NORM.  REDHAWK Basic Devices  FmRdsSimulator reduced default level of added noise.  Documentation Improvements/Fixes  Added a note to explain that adjusting an Application’s logging configuration alters the entire Domain. Corrected instructions for logging with event channels. Corrected the translation of the logging config URI. Corrected typos in macros in Section 13.2.4.  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.0-lts/release-notes-2.0.1/",
	"title": "REDHAWK Release Notes - 2.0.1",
	"tags": [],
	"description": "",
	"content": " The effort in REDHAWK 2.0.1 focused on:\n Enhancing the level of control that a system deployer has to customize the reservation schema used to manage computing resources. Adding Python operators and Java methods to simplify common arithmetic operations on BulkIO time stamps.  IDE Improvements  In Diagrams, duplicate connections between the same two Ports are displayed in yellow and show a warning. In the Sandbox, Components and Devices now display the Component or Device usage name rather than the Component’s or Device’s name. In the SAD Properties Editor, the name of the Properties are now displayed rather than the ID. If no name is available, the ID is displayed. An improved failure message is displayed for a Waveform installation failure.  Core Framework Improvements  Refactored auto-generated test script for Components to use the Sandbox. Added reservation floor to GPP so that when an Application is deployed, the amount reserved per Component is definable by the system user. Provided Timestamp Helper Methods that add/subtract two time stamp objects and print time stamp values. Added generation of getters and setters for Java struct property fields.  IDE Fixes  Fixed issue so refreshing the IDL library now updates the library. Fixed errors in generated spec files that prevented macro expansion. Fixed issue involving certain scenarios when the palette was loaded and an error occurred. Fixed issue so host collocation names can now be renamed. Updated Sandbox so that command-line Properties are not passed to Resource.initializeProperties(). Fixed editors so when opened, items under the Target SDR are now read-only. Fixed update sites in IDE to use Mars not Luna. Updated IDE to include JacORB feature. Fixed Sandbox so that Properties of kind Property are not passed to Resource.configure() at launch. Fixed Sandbox so terminating a Waveform running in the Sandbox via the REDHAWK Explorer actually terminates the Waveform. Fixed issue so when opening the Component editor for a resource in the Sandbox, or the Explorer for a Waveform, an \u0026ldquo;Unsupported content\u0026rdquo; dialog and related error messages are not displayed in the console. Additionally, in the Editor view, three tabs no longer display blank content for each of the XML files. Fixed Chalkboard so releasing a Component no longer terminates the Component but actually releases the Component. Updated Devices so when a namespaced Device is dragged-and-dropped onto the Device Manager Chalkboard, it no longer is displayed in yellow and does not display an error. Fixed C++ workspace projects so when launched in the Sandbox, they now use entrypoint to execute. Fixed Sandbox so launching Waveforms that override a simplesequence no longer causes errors. Fixed Python Sandbox so when Components are launched, they have configure and property kind Properties passed to them in addition to execparams. Fixed Chalkboard so the context menu for Components of Domain Waveforms no longer displays Terminate as an available option. Fixed FEI Device Wizard so if a project name is name spaced, clicking Finish in the wizard no longer causes an error. Updated Node Diagrams so when connecting Ports between figures that have been collapsed, an error no longer occurs if the connection is ambiguous and the IDE prompts the user. Fixed SCD files in new projects to include the new CF.PropertyEmitter interface. Fixed DCD files so if they reference a non-existent SPD file for the Device Manager, the Overview tab in the DCD Editor functions. Fixed Redhawk Explorer view so if the ’name’ attribute is missing in a DCD, SPD, or SAD file in the SDRROOT, all items are still displayed under the Target SDR. Fixed DCD editor so if a Service is manually added in the XML tab, the Diagram tab reflects it. Updated code as a result of recent updates in Graphiti. Updated SAD/DCD diagrams to always fully reflect changes made to the underlying XML file. Fixed possible deadlock in UI thread. Updated Diagrams so renaming a Component no longer causes an error. Fixed issue when creating a FindBy, the FindBy was not allowed inside a host collocation; however, if the host collocation covered the FindBy in the Diagram, the FindBy sat on top of it making it appear like it was inside the host collocation. Fixed Diagram palette filter to search on the full Component name. Fixed the DCD Diagram palette to refresh with SDR root. Fixed issue so plot connection error does not display when making connections with Waveform external Ports. Fixed issue so a new Domain can be added with corbaloc or IOR syntax. Fixed SAD and DCD editor to allow Property value overrides for read-only command line Properties. Fixed event Property error when upgrading. Fixed project update so configure/execparam Properties are changed to a new Property.  Core Framework Fixes  Added a documentation note regarding performing a source upgrade from 1.8 to 2.0. Provided instructions on how to access Domain Manager and Application in comments for generated Components. Updated comments for generated Components to use stream-based input rather than getPacket. Updated bluefile_helpers to support numpy \u0026gt;= 1.9.0. Eliminated Makefile.am warnings on Ubuntu 14.04. Updated installation so when installing from source, if dependencies are not already present on the host or a valid PYPI is not accessible, the installation will fail. Enabled and verified support for xsd \u0026gt;= 3.3.0. Updated the generated configure.ac file for Octave Components by omitting a call to the RH_SOFTPKG_CXX macro. This update resolved configuration failures when dependencies did not have a valid pkgconfig, which is not present for noarch packages. Updated the redhawk.sh script in /etc/profile.d to fix LD_LIBRARY_PATH set issues. Added newline at end of EventChannelManager.idl. Updated CF tests so they can be run without BulkIO. Updated BurstIO testing so it no longer requires the libraries to be installed. Added regression test to verify that Waveform allocations are consolidated into a single allocation call when allocation Properties do not overlap. Renamed generated unit test testScaBasicBehavior to testRHBasicBehavior. Updated generated Ports in C++ and Java to report the most specific CORBA repid in getPortSet(). Updated Python Components to only report Python MessageConsumer Ports as bi-directional, not MessageSupplier Ports. Updated Java BulkIO InFilePort to return the expected repid. Updated C++ GPP to manage Components as process groups and harmonize difference between Python and C++ GPP and changed timeouts to more sensible values. GPP Updated C++ GPP to set the process group ID during launch and then terminate based on the group ID if a Component does not die. Modified sb.launch() to allow overriding property kind Properties. Added support to properties.py for conversion of non base 10 strings. Updated py2prf so when exporting Properties to xml, simplesequence and structsequence are correct. Fixed Application launch so that Component command line Properties with no value do not get included in the incorrect initialization step. Fixed Sandbox DataSourcepush() to honor the EOS flag at the end of large pushes when the total size is an exact multiple of the packet size. Fixed Python Sandbox so it does not call initializeProperties() after the IDE calls initializeProperties(). Fixed Python Sandbox so Java Components do not fail in Sandbox when the name Service is not running. Fixed DataSink so it honors the SRI subsize and returns a frame matrix. Improved feedback when an XML parsing error occurs. Modified Python PRF parser definition so app_prop is not part of the PRF parser definition for the struct. Fixed Python Service logging level so DEBUG_LEVEL is honored. Resolved issues when invalid Port names are used in Service connections. Fixed internal UUID module so generated UUID uses versions 1 or 4 and randomizes the MAC address. Fixed Device Manager to only report child processes as having exited when the child process terminates, ignoring non-fatal signals. Fixed Application stop to continue to stop all of the Components in an Application even if one fails, still throwing an exception at the end. Fixed Domain Manager memory leaks from parsers for Properties and fixed minor leaks with _ptr usage. Extended the Domain Manager to handle Application registrations locally. Added test for backwards compatibility with partial struct configuration. Fixed Python Sandbox to ensure that only simple Properties are passed on the command line, and that non-overridden command line Properties are not included in initializeProperties(). Fixed issues with validating SAD file from installApplication() and createApplication() and issue with default command line option for new Properties. Fixed Connection Manager so connections to Applications cannot be deferred, and connections that cannot be deferred are deleted when the endpoint goes away. Modified test Component cpp_with_deps to build on Ubuntu 14.04. Fixed issue to prevent deadlock when a Device Manager shuts down at the same time one of the Applications deployed to its Devices is released. Added semantic checking to the contents of a Waveform SAD.xml file and its associated Components and softpackage dependencies. Updated Python module to recognize external Ports that are in a host collocation block. Updated Domain Manager to handle IDM Channel messages. Added new interface extensions on core services to Python package. Added autotools-generated files to clean up for REDHAWK Library Projects. Fixed Python code generator to assign the default values for inherited Properties in the base class init() method instead of at the class definition level. Fixed launch failure for generated Java FEI Devices with additional tuner status fields. Added source to FEI JAR files. Modified the GPP to release all reservations for a Waveform. Added additional tests for compliant and non-compliant soft package dependencies. Modified Sandbox MessageSource to use messageId member. Fixed override of instance values for Components launched through the Python Sandbox interface running in the IDE. Fixed race condition in BulkIO unit tests for SDDS and Vita49. Added proper type checking for Properties in Python Components. Added handling for spurious CORBA errors on Component initialization while running QA tests that launch and release large numbers of Components. Fixed BulkIO input Port to set sriChanged flag and register default SRI for unknown stream IDs in pushPacket. Modified Valgrind support in Device Manager to avoid attempting to overwrite the Device executable file with the Valgrind log file. Improved unit test for Components.  IDE Changes  Removed Subversive (Subversion) from the IDE.  REDHAWK Basic Components Fixes  DataConverter fixed floating point error in conversion from complex to scalar. DataConverter removed an unused variable. DataConverter fixed conversions from float and double to char and updated corresponding unit tests. DataConverter updated to have a distinct unit test for each test case. fcalc added error checking and recovery to property configuration. FileReader updated to not use Domain Manager when in Sandbox. FileWriter updated to not use Domain Manager until configured/initialized. FileWriter fixed to write file to correct location when launched in a Domain. psd updated to pass keywords COL_RF and CHAN_RF. psd updated unit tests to check precision and accuracy. SigGen updated to use unsigned types where appropriate. SigGen updated to have increased precision in all implementations. SigGen updated to only initialize timestamps when started. SigGen C++ implementation updated to be more responsive to configuration calls. SigGen C++ implementation updated delta_phase calculation to be consistent with other implementations. SigGen updated to send EOS when configured with new stream_id. RBDSDecoder updated to include RBDS messages in the log. TuneFilterDecimate fixed unit test tearDown function to clean up properly.  REDHAWK Basic Devices Fixes  RTL2832U updated to include report of FEI compliance test results. USRP_UHD updated unit test default configuration to use UHD version that comes with REDHAWK. REDHAWK Shared Libraries  REDHAWK Shared Libraries Fixes  RedhawkDevUtils updated float/double byte-swap methods to not cast to anything but char*.  REDHAWK Device Dependencies Fixes  librtlsdr corrected dependency listed in README.md. librtlsdr corrected install location of udev rules from source build.  Documentation Improvements/Fixes  Removed recycle from the the REDHAWK Overview. Updated Core Asset names with namespaces. Updated GPP description now that it is written in C++. Clarified Property types. Improved language discussing primitive types available for Properties. Corrected description of Device library dependencies. Simplified description of recommended packages to install. Improved information regarding adding a library in Makefile.am. Added explanation of the PrecisionUTCTime structure and moved description of the SRI structure to the section where SRI is discussed. Updated capacity allocation information to explain automatic capacity allocation. Added description of SRI keywords used with FEI Devices. Added Valgrind information in GPP and Device Manager sections. Added information regarding the use of raw_input() in Python Sandbox. Added information about new GPP reservation floor. Added version 1.10.X in upgrading information. Updated installing system dependencies REDHAWK version to 2.01. Added information about Timestamp Helper Methods. Added C++ property query and configure callbacks information. Added getCurrentStream() information in BulkIO stream documentation. Updated C++ property listener examples to use 2.0-style methods. Added information to correct omniNames/omniEvents install order on Ubuntu. Added information about deprecated properties upgrade process. Added setuptools to the install for Ubuntu.  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.0-lts/release-notes-2.0.0/",
	"title": "REDHAWK Release Notes - 2.0.0",
	"tags": [],
	"description": "",
	"content": " Core Framework Changes BulkIO stream-based API  Provide structures to manage data flows based on streams rather than individual data pushes. Allow the retrieval of arbitrary amounts of information from the incoming data flow.  Domain Awareness  Provide Components with a pointer as part of the base class to their Domain Manager and Application objects. Provide Devices with a pointer as part of the base class to their Domain Manager and Device Manager.  Connection Manager  Provide better visibility into and management of system-level connections.  Event Channel Manager  Simplify the creation, interaction with, and management of Event Channels.  Network Allocation/NIC selection  Provide the allocated NIC as part of the base class to a Component that requested system bandwidth on deployment.  New GPP  Written in C++, so it is more responsive. Detects when Components segfault and issues a system notification. Automatically manages system capacity. (Component benchmarking no longer needed to support deployment across different host computers). Supports affinity by default.  Co-locates the Component process with its allocated NIC onto the same socket. Co-locates the Components onto the same Node onto the same socket (when possible) to minimize data transfer impact.   New features that simplify current behavior or tooling  Single-call Application deployment. Consolidated Properties from configure and execparam kinds to Property. Deprecated the need for event Property kind by supporting Property change events for all Properties. Added Property change event registration to better manage Property event consumption. Simplified the default behavior for newly-generated RF Device (FrontEnd Interfaces). Extended FrontEnd Device code generators to Python and Java. Created a \u0026ldquo;REDHAWK constructor\u0026rdquo; in Components that is invoked after the Component default Properties have been set. De-conflicted environment configuration colliding dependencies on co-located Components. Extended upgraded logging support to Python and Java. Improved Event Service cleanup scripts to remove the need to run them as root. Enhanced C++ API for inspecting and modifying Properties and SRI keywords. Simple sequences can now be members of Property structures. Support for namespaces (Components, Devices, Services, and Waveforms). Added getPortset to return a list of all the Ports that a Component or Device supports.  IDE New Features and Functionality New Property Support  Added support for simple sequences in structs, struct sequences. Added support for the new Property kind, property, and the commandline attribute. IDE helps upgrade old configure or execparams during code generation.  Shared Libraries  Added wizard for creating new REDHAWK shared library projects for C++.  Namespaces  All REDHAWK project types support namespaces by using names with dots (for example, a.b.c).  Diagrams  Waveform and Node diagrams have been completely re-implemented. Waveform diagrams have more intuitive Find By support. Waveform diagrams have new support for FrontEnd usesdevice relationships. A diagram was added for the Sandbox Device manager. Diagrams support visualizing Port statistics with color. Diagrams support visualizing dead/unreachable domain Components with color. Diagrams provide visual help making connections by coloring suggested Ports. Diagrams provide visual feedback while Components are still starting up. Components are initially gray, and when launching is complete, the Component’s background color changes to blue. Diagrams allow expanding/collapsing shapes to hide complexity.  Eclipse  Based on the latest version of Eclipse (Mars, version 4.5).  FrontEnd Device Creation  Wizards now support creating Java and Python FrontEnd Devices.  Logging  The IDE supports changing the log level of Components and Devices at runtime. The exit code for Components launched in the Sandbox is now reported in their console.  Port Descriptions  Added support for adding Port descriptions in the SCD file. Display of Port descriptions in the Properties view for Ports and in various tooltips.  IDE Improvements  When selecting IDLs (when dealing with Ports or with Services), the IDE now filters uncommon or potentially problematic IDLs unless the user selects to show all. The XML editor (instead of a text editor) is now used when opening REDHAWK XML files from the Target SDR or from a domain. Warning messages for the IDE detecting that the localfile/codefile (for an SPD implementation) were missing on disk have been improved. The IDE can handle receiving a null reference to a Component from the Waveform. This supports inspecting some domains, which were not exhibiting REDHAWK-compliant behavior. The IDE uses WebKit on CentOS 6.6+ to improve the display of pop-up context help. Tooltips to display Property descriptions were added to the FrontEnd Tuner Allocation dialog. If an error occurs while the IDE is determining what files to generate during code generation, the IDE will display the command it tried to execute to facilitate diagnosing problems/error reporting. Ports have been moved to a separate tab in the SPD editor, and that tab is included in the SCD editor. After performing code generation, the IDE places the code generator version in the SPD file in the type attribute of softpkg. This helps identify what version of REDHAWK a particular asset was originally created for. The IDE can handle an UnknownPort exception when it requests a Port from a Component that is listed in its SCD file. This supports inspecting some Components, which were not exhibiting REDHAWK-compliant behavior. The IDE now installs and builds C++ Components, Devices, and Services by invoking build.sh at the top level of the project. This applies to new projects and projects that have their build.sh regenerated with code generation. The IDE performs a clean build after code generation to help prevent stale build artifacts. The IDE supports setting Group ID in the Tuner Allocation dialog. Added an advanced option to uninstall the existing Waveform factory when launching a Waveform. Advanced launch options are available when launching Components, Devices, Services, Waveforms, and Nodes in the Sandbox, including setting Properties, auto-start, timeouts, and log level. The IDE honors the BulkIO SRI blocking flag by default when plotting. This setting can be overridden in the plot settings. When plotting, individual streams can be hidden. Additionally, the color of the streams can be changed. When the IDE creates connections to plot or monitor data, it now prefixes its connections with IDE_ so they can be better identified. The IDE provides the ability to toggle between showing RF and IF values on plot axes. The IDE supports connecting to multiple domains with the same name, but on different machines (previously, the names had to be unique). The IDE now thins plot data based on refresh rate. This helps when plotting Ports with very high/very low data rates. The setting is adjustable in the plot settings.  IDE Fixes  Exporting multiple projects to the Target SDR via the context menu on projects only exported the first project in the selection. Before performing code generation, the IDE may have shown several warnings in the SPD editor that code generation had not yet been performed. These warnings sometimes remained even after performing code generation. Sequence Properties of complex type were not treated correctly resulting in issues displaying or setting the Properties at runtime. When a domain was launched via the IDE, the console always showed the domain name as REDHAWK_DEV regardless of its actual name. Domain Waveforms opened with the Chalkboard editor might get started/stopped twice when the Waveform was started/stopped. REDHAWK C++ Service projects might have warnings/errors related to not being able to find included code. These are cleared up by new settings applied by code generation and by completing a build. On Ubuntu, after building the first time, the IDE would report errors such as installing ./config.sub, installing ./install.sh, etc. This is corrected for legacy projects during code generation. The install location of a Waveform or Node was being determined by the project name when it should have been based on the name in the XML. For existing REDHAWK projects, some settings were not updated during code generation. These included environment variables (like OSSIEHOME) and error parsers. The IDE would automatically overwrite the build.sh file at the top of a project for legacy projects. This is now corrected by code generation. The IDE would automatically overwrite the .spec file at the top of a project for legacy projects. This is now corrected by code generation. The FrontEnd Tuner Allocation dialog did not validate entires correctly. The IDE now handles any CORBA COMM_FAILURE errors that occur while shutting down a Device Manager. The IDE now correctly parses forward-declarations in IDL files. The SPD editor did not allow saving changes in the code section for a selected implementation. The IDE was adding spaces into complex number expressions in Properties in XML (for example, 1 + j3 rather than 1+j3), which caused an error in the Core Framework. Under certain scenarios, the IDE might release domain Waveforms that had been opened with the Chalkboard editor when the IDE was closed. The IDE now allows setting an enum Property in the Waveform Property Editor. Properties with kinds event and allocate were marked as an error. Data saturation while plotting could cause the plots to go blank and stay blank even after data returned to a valid range. The Project Explorer showed arrows next to closed projects. The IDE did not correctly add values for struct sequences in the PRF/SAD XML files.  Core Asset Changes Namespaces  REDHAWK Basic Assets are now distributed in the \u0026ldquo;rh\u0026rdquo; namespace. Components, Devices, Shared Libraries, and Waveforms are all members of the \u0026ldquo;rh\u0026rdquo; namespace. Device dependencies have not been added to the \u0026ldquo;rh\u0026rdquo; namespace (uhd, librtlsdr, and libRfSimulators).  New Assets  Basic Components: An asset for doing PSK demodulation, psk_soft is now included. New Components for reading and writing files, FileReader and FileWriter, are now included. FileReader and FileWriter demonstrate the new domain awareness feature available to all Components. DataReader and DataWriter are deprecated. An asset for decoding RBDS information from FM broadcast, RBDSDecoder, is now included. Components for sending and receiving data using the VITA49 protocol, SourceVITA49 and SinkVITA49, are now included. Basic Devices: An FEI Device for simulating FM channels with RDS data, FmRdsSimulator, is now included. Basic Waveforms: A set of Waveforms that collectively demonstrate usage of all Basic Components. These include: basic_Components_demo, FM_mono_demo, FM_RBDS_demo, short_file_to_float_file, socket_loopback_demo, and VITA49_loopback_demo. Shared Libraries: A shared library used by FileReader and FileWriter, blueFileLib, is now included. A shared library used by SourceVITA49 and SinkVITA49, VITA49, is now available. Device Dependencies: A Device dependency used by FmRdsSimulator, libRfSimulators, is now included.  New Features  psd has been completely overhauled to use the new BulkIO stream API. psd has a new feature to produce SRI metadata at RF values when appropriate keyword is present in the stream. SigGen has new Properties to allow specifying values for CHAN_RF and COL_RF SRI keywords. SigGen also has a new Property to allow specifying SRI blocking. sinksocket has been expanded to support multiple outbound socket connections. This update includes a new API that is not backwards compatible. SinkVITA49 now includes TCP functionality. dsp shared library expanded to provide additional functions useful for agc. RTL2832U now includes a feature to protect against usb timeout when used from within a virtual machine. All Devices include a script that can be used to generate a Node for the Device.  Renamed Shared Libraries  REDHAWK-VITA49Libraries_V1 has been renamed VITA49. REDHAWKDevUtils_v1 has been renamed REDHAWKDevUtils.  Removed Assets  DataWriter and DataReader have been deprecated by FileWriter and FileReader, respectively. whitenoise has been deprecated by SigGen, which includes a whitenoise generation mode. BurstDeserializer, freqfilter, medianfilter, and unwrap have been removed.  "
},
{
	"uri": "https://redhawksdr.github.io/manual/",
	"title": "REDHAWK Manuals",
	"tags": [],
	"description": "",
	"content": "REDHAWK Installation RPMs are signed via GPG key:\npub 4096R/4F05105D 2013-08-15 REDHAWK Release Key \u0026lt;redhawksdr@redhawksdr.org\u0026gt; Key fingerprint = 3793 F584 8745 7EA2 D0AD 7561 ECC3 40E1 4F05 105D   2.0 - (LTS)   2.1 - (Beta)   "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "  2.0 - (LTS)   2.1 - (Beta)   "
},
{
	"uri": "https://redhawksdr.github.io/specifications/",
	"title": "REDHAWK Specifications",
	"tags": [],
	"description": "",
	"content": " REDHAWK 2.0 (LTS)  REDHAWK SCA Specification - explains the REDHAWK additions to the SCA version 2.2.2 specification REDHAWK SCA Specification - Domain Profile - explains the REDHAWK Domain Profile in accordance with the SCA version 2.2.2 specification REDHAWK ICD Specification - explains the core REDHAWK interfaces REDHAWK ICD Specification - Domain Profile - explains the REDHAWK Domain Profile  REDHAWK 2.1 (Beta)  REDHAWK SCA Specification - explains the REDHAWK additions to the SCA version 2.2.2 specification REDHAWK SCA Specification - Domain Profile - explains the REDHAWK Domain Profile in accordance with the SCA version 2.2.2 specification REDHAWK ICD Specification - explains the core REDHAWK interfaces REDHAWK ICD Specification - Domain Profile - explains the REDHAWK Domain Profile  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.1-beta/release-notes-2.1.3/",
	"title": "REDHAWK Release Notes - 2.1.3",
	"tags": [],
	"description": "",
	"content": " The effort in REDHAWK 2.1.3 focused on:\n Adding snapshot capability of network data and performing SDDS packet analysis on the captured data. Adding scripts and configuration files that allow REDHAWK core services to run as system services. In addition to these services, integrators can define REDHAWK waveforms that are deployed during the system boot process. Extending the tool, rh_net_diag, to provide read/write/execute permissions checks on directories important for running a REDHAWK system. Creating a new MSDD Device released with bug fixes and enhancements and regenerated for REDHAWK 2.1. Changing the default logging directory for omniEvents service to reside in /var/log/omniEvents. FrontEnd Interfaces (FEI) property definition change: For devices, the FRONTEND::tuner_allocation and FRONTEND::listener_allocation allocation properties are now writeonly instead of readwrite. Because the properties are now created as writeonly, they can no longer be queried. This change was made to prevent confusion with the actual state of the FrontEnd device, which is reported by the FRONTEND::tuner_status property. Existing Core Asset FEI devices have been updated with this change. New FrontEnd devices created with the IDE will automatically have this change. Adding functionality to the IDE so when users edit a property\u0026rsquo;s name, the IDE automatically supplies an appropriate ID for the property based on REDHAWK\u0026rsquo;s naming convention. Adding documentation to the REDHAWK Manual regarding naming elements in structures such that element names can be reused across different structures. Updating FEI unit tests. Updating the rh.VITA49 REDHAWK shared library to include support for VITA 49.2. Initial release adheres to the draft specification, revision 00.51 dated 5 Dec 2016, which was available during development. The IDE now installs the diagram layout when installing a SAD/DCD file (either by drag-drop or via its RPM .spec file). At runtime, the IDE will check for the diagram layout and if present, preserve the developer\u0026rsquo;s layout. Adding an option to enable the Domain Manager\u0026rsquo;s logging level to be dynamically changed. Adding a new packed bit data port type and data format for BulkIO:  Port API for component developers is fully implemented in C++, Python, and Java. Plotting, monitoring, and data interaction are supported in the IDE and Python Sandbox. For C++ and Python, a new bitbuffer class provides high-level access to packed bit data. In Python, all BulkIO ports now support a stream-based API that is consistent with C++.  Adding tooling to implement a scanning receiver that complies with FrontEnd Interfaces. Adding extensible hierarchical name structure support for loggers. Correcting behavior for structures that have a default value that is mixed simple values and sequences; if the sequence is empty, it is not treated as nil. Adding support for working with multi-out ports. Adding Allocation Manager functionality in the IDE: Current allocations and allocation details for each allocation can be viewed, devices used for an allocation and Device Managers referenced by an allocation can be searched for, and allocations can be deallocated. In the REDHAWK IDE, adding context-sensitive property views for the following:  Waveform and node properties are displayed when selecting the respective runtime editor. Runtime connection details are also displayed (read-only) when selecting a connection in a diagram editor. SoftwareAssembly and DeviceConfiguration properties are displayed when selecting the respective design-time editor. Design-time connection properties are displayed when selecting a connection in a diagram editor.  Providing better context-specific icons throughout the IDE. Providing new functionality for interacting with event channels and message event ports. Adding Connection Manager functionality in the IDE: Current connections and connection details for each connection can be viewed, the source or target of a connection can be searched for, and connections can be disconnected. Adding functionality in REDHAWK REST and Websocket to support JAAS-based method level access. Resolving issue so when launching waveforms containing references to mistyped properties, the IDE displays all the properties including the property that had a mis-matched override in the SAD file. Adding validation for mistyped property refs. Fixing improperly scoped locks in Core Framework control. Implementing several C++ fixes to allow REDHAWK to compile on newer compilers. Correcting default property kinds in the DTD and XSD so they are no longer out of sync with the behavior of the Core Framework and the ICD. Adding new behavior to the C++ input stream API: It is now possible to \u0026ldquo;peek\u0026rdquo; into data sets that have reached EOS by setting consume to 0 when using read or tryread. Adding support to custom IDL and FEI control ports so they now accept a connection id argument to specify the connection to use and throw exceptions if the port call is exercised and no connection exists or a connection is specified that does not exist. Resolving issue so when unhandled exceptions occur in Python and Java components, the components terminate rather than remain in a defunct state. If termination was not requested, the GPP now sends a message to the IDM channel when a component exits with a non-zero status. Updating the FEI specification to require a device to only partially support a requested signal range rather than the whole signal to return a valid request. The validateRequest function in the frontendInterfaces support package checks that a partial overlap of the requested band succeeds rather than requiring full coverage of the requested range. Patching omniORBpy to prevent possible segfaults in multithreaded code. Updated Version of SourceSDDS that includes use of shared memory API Updating the IDE on CentOS 7 to use the latest available Eclipse tooling, Eclipse Photon. Correcting behavior so readonly property kind properties for Devices and Services can now be modified during deployment using Device Configuration Descriptor (dcd.xml) file. Correcting an issue where a bad XML file in the SDRROOT caused loading of the SDRROOT to stop and report an error. Updating rh.VITA49 to adhere to approved version of V49.2 Standard (August 2017). Adding an option for MessageSupplierPort to send messages to a specific connection. Deprecating REDHAWK Enterprise Integration and removing all references to it within the documentation. Providing the ability to generate configuration files for waveforms and nodes for use by the REDHAWK admin service.  New Features The following features were added in REDHAWK 2.1.3:\nCore Framework Features  All Components and Devices now contain the getLogLevel function that allows the caller to retrieve a named logger\u0026rsquo;s log level. Added FEI scanner Device base class and code generator support in C++, Python, and Java. Added VITA49 transport support to BulkIO library for inter-host data transfers. Added getLogLevel, getNamedLoggers, and getLogConfig to the resource API. C++ Components and Devices now support hierarchical naming for loggers. Java Components and Devices now support hierarchical naming for loggers. Python Components and Devices now support hierarchical naming for loggers. The Python Sandbox log setting can now be changed using strings. For example, setLogLevel(\u0026quot;comp_1.user.foo\u0026quot;,\u0026quot;error\u0026quot;) will set the comp_1.user.foo log level to CF.LogLevels.Error. The loggers from the components in an application can now be retrieved using the getNamedLoggers method on the Application object. These loggers are also available through the application\u0026rsquo;s logging interface (for example, setLogLevel).  The resetLog method on the application resets all the components\u0026rsquo; log settings to their launch state when the application was initially launched.  The REDHAWK AdminService can be used to start all parts of a domain on a single server. The log4cxx logger is now available directly through the rh_logger in C++ Components and Devices. Adding functionality for devices to support hierarchical logging.  IDE Features  If a connection is selected in a design-time diagram, connection IDs can be edited in the Properties View. Adding support for creating new FrontEnd scanner devices. Providing a wizard to trigger a scan on a FrontEnd scanner. Providing the ability to load/save a scan plan for a FrontEnd scanner. The context menu for Event Channels now has an option to release the Event Channel through the Event Channel Manager. Added a Properties View editor for the softwareassembly/deviceconfiguration elements. Added validation for mistyped property refs. The Properties View now displays information about negotiated BulkIO connections. For Ports that support transport negotiation, the IDE now displays available transports in the Advanced tab of the Properties view. Added support for monitoring port statistics for BulkIO packed bit ports. Added support for displaying SRI from BulkIO packed bit ports. Added support for plotting BulkIO packed bit port data as a bit raster. Added support for performing a snapshot of data from a BulkIO packed bit port. Updated the REDHAWK help contents within the IDE to display the newly redesigned help. Added support for viewing a data list from BulkIO packed bit ports. Providing a preference that can disable automatic property scoping in the PRF editor. Providing the ability to allocate scanner devices.  Documentation Features  Added Custom IDL Interfaces information to the REDHAWK Manual. Added required naming conventions to the REDHAWK Manual. Added a new section to the REDHAWK Manual, Multi-out Port Support in the IDE.  Improvements The following improvements were added in REDHAWK 2.1.3:\nCore Framework Improvements  The Octave libraries are now located with the octave-config utility, which reduces the time taken to find them. The helper functions for validating requests in FEI were improved to allow partial overlap in frequency. When an unhandled exception occurs in a C++ component, the exception is logged instead of printed to the console before the component terminates. Updating inline header comments documenting C++ BulkIO input stream, output stream, and data block APIs. Added functionality to report data loss for each stream when an input port\u0026rsquo;s internal queue is purged.  IDE Improvements  Added support to run-time resources in the IDE that enables users to listen to messages generated by a Component. Created a new icon for the Shared Libraries container in the Target SDR. Waveform \u0026amp; Device Manager Properties are now displayed in the Properties View when the associated editor is selected. Adding \u0026ldquo;in\u0026rdquo; and \u0026ldquo;out\u0026rdquo; icons to Ports in the Find By wizards in SAD diagrams. The diagram layout when designing a SAD or DCD file is now installed to the SDRROOT along with the SAD/DCD file. Logging functionality in the IDE (log level, edit log config, tail log) can now be used with a running Domain Manager as well. The IDE now updates its model in response to events from the Domain indicating an event channel was added or removed. Added unique SPD implementation icons for each programming language. If a connection is selected in a runtime diagram, connection properties are now displayed. At runtime, diagrams now respect the diagram layout if it was installed along with the SAD/DCD file. The IDE now allows specifying the connection ID when listening to messages from a message event port.  Documentation Improvements  In the REDHAWK Manual, added information in the Inspecting Allocations through the Python Sandbox section and added a new section, Inspecting Allocations using the IDE. In the REDHAWK Manual, added information in the Event Viewer View section explaining how to view the events emitted by Message Ports. Added the following sections to the REDHAWK Manual: Inspecting Connections using the IDE and Disconnecting Connections using the IDE. Added REDHAWK Jaxrs Security Filter chapter to REDHAWK Enterprise Integration User Guide to explain how to configure role-based access to individual REST endpoints. Documented the PRF editor improvements for property ID and Name. Updated REDHAWK Enterprise Integration documentation to explain how to configure Jetty w/ Jacorb.  Fixes The following fixes were completed REDHAWK 2.1.3:\nCore Framework Fixes  Modified log message so when pushing data, if Python Bulk IO Ports encounter a communications exception, the message in the exception is included in the log message. Persona and programmable device pattern code generators compile correctly. Changing log_level on the Domain Manager now affects all classes in the Domain Manager process space. Resolved issue so the Domain Manager can use the RH_LogEventAppender. Clarified the conditions under which scanning is toggled in FEI scanners. Assembly controller properties can be renamed (and overridden) at the Application level. Resolved issue for structures with a default value that is mixed simple values and sequences. If the sequence is empty, it is not treated as nil. Fixed improperly scoped locks in Core Framework control. Fixed several C++ constructs that do not compile on newer versions of gcc. Added Python help documentation to SDDSAnalyzer module. To maintain backwards compatibility, updated the XSD/DTD default value for kind and configurationkind from \u0026ldquo;property\u0026rdquo; to \u0026ldquo;configure\u0026rdquo;. Removed additional log message from Python base class when an invalid property is queried. Listing registrants for an unknown event channel returns an empty list. Resolved issue with createTunerAllocation in the Python sandbox. It now provides 0 as the default value for sample_rate (rather than 1). Resolved issue so if a component crashes, the application object in the Python sandbox does not lose its comps member. Readonly property kind properties for Devices and Services can now be modified during deployment using Device Configuration Descriptor (dcd.xml) file. Changed ArraySink\u0026rsquo;s retrieveData method to always return a tuple of values to match prior API versions. Fixed an issue to ensure that LOGGING_CONFIG_URI is allowed as a Property, even when the Property is not explicitly declared for the Component or Device. Resolved issue so external writeonly properties are not part of the query set when the application object receives a query all. Added support to clean artifacts from omniEvents 2.7 and 2.8+ to the cleanomni script.  IDE Fixes  An error is now displayed when attempting code generation with an unsupported template type. Fixed an issue to ensure that only appropriate menu items to the current selection are displayed in context menus. In the Port Monitor View, corrected the display of data rates for low-rate data streams. The Launch Waveform wizard search capability now assumes a leading wildcard character. Double-quote entries for property string values are now always treated as empty strings. In the PRF editor, the Remove Value button is now correctly enabled. Resolved title text discrepancies in the Properties View. The context menu for a Domain Manager no longer shows \u0026ldquo;Connect\u0026rdquo; if the Domain Manager is already connected. Fixed issue to ensure that simple properties that are not of type \u0026ldquo;property\u0026rdquo; cannot be assigned the command-line attribute. An issue with long refresh times when opening diagrams was corrected. In the Properties tab of the SAD editor, the members of properties belonging to the assembly controller no longer display an external ID. Corrected a code issue internal to the IDE during the code generation process. When attempting to perform a \u0026ldquo;Display SRI\u0026rdquo; action on a Tuner with no applicable Ports, an error message is now displayed. Addressed an internal code structure issue. When adding Ports using the Port tab in the SPD editor, an NPE is no longer logged. Resolved ClassCastException when launching Waveforms containing references to mistyped properties. Corrected the default property kind in the DTD schema for PRF files. The IDE now allows configuring \u0026lsquo;property\u0026rsquo; kind properties that have the \u0026lsquo;commandline\u0026rsquo; attribute set. The IDE now passes the initial value of \u0026lsquo;property\u0026rsquo; kind properties to initializeProperties() when resources are launched in the Sandbox. In the Properties tab of the SAD editor, overriding the values of properties is no longer allowed when it does not make sense (for example, allocation properties). Negative numbers are no longer allowed in values for complex unsigned properties. Parsing of complex boolean properties was also corrected. Corrected an error that occurred when the value of a simpleref inside a structref in a SAD file did not make sense for the referenced property type. Resources now report an error if they receive a non-sequence value for a simple sequence property. Fixed incorrect validation message for structs containing a sequence with no values while also containing a simple with a default value. Corrected an NPE that occurred when saving a SAD or DCD file with no name. The Properties View icon is now context sensitive. Added the Eclipse p2 director application to the REDHAWK Explorer product. Resources now show errors associated with any of their properties. An internal IDE model was corrected to prevent a compilation error. Fixed issue to ensure Data List is not enabled for unsupported Ports. Fixed issue to ensure that Play Port is not enabled for unsupported Ports. Fixed issue to ensure that Snapshot is not enabled for unsupported Ports. Fixed issue to ensure that the profile for a running Domain Manager, Waveform, or Device manager cannot be edited. Fixed issue to ensure that the Domain Waveform associated with a local Waveform cannot be edited. Fixed issue to ensure that the exec params for a launched resource in the Sandbox cannot be edited. Fixed issue to ensure that the implementation ID for a launched resource in the Sandbox cannot be edited. After listening to an event channel, the IDE now correctly releases all internal resources. Event channels can now be listened to from the CORBA Name Browser view. Fixed issue to correct an NPE so it does not occur while interacting with the CORBA Name Browser view. Text on the IDE splash screen is now correctly displayed and not truncated. When selecting a Port in the DCD or Device Manager diagrams, the IDL tree browser is displayed in the Properties View. A code quality issue was addressed to ensure resources within the IDE are always properly closed. A code quality issue was addressed to prevent a potential NPE. The \u0026lsquo;Play Port\u0026rsquo; action on a BULKIO::dataLongLong port now works correctly. Addressed a code quality issue to prevent errors when handling REDHAWK time property values. Resolved a code quality issue to prevent errors when handling REDHAWK complex number property values. Addressed a code quality issue by removing redundant or unused code. Addressed a code quality issue to ease maintainability. Corrected the precision of the time reported for the most recent push packet when viewing SRI. Corrected an error so the FEI usesdevice wizard now displays correct values vis-a-vis the SAD XML. When editing SAD files, usesdevice naming is now more consistent with device naming in DCD diagrams. Fixed data list to display all values correctly. Corrected an NPE which could occur during drag-drop in a diagram. Text now displays correctly when selecting an entry in a drop-down in the properties editor.  Documentation Fixes  Added Octave information to installation information in the REDHAWK Manual. Fonts in REDHAWK Manual, Overview, Release Notes, and Known Issues are now consistent. Updated HTML links in the Further Reading section of Getting Started Guide.  Special Resolution The following previously reported Known Issues have been closed in REDHAWK 2.1.3 with the following resolutions:\nCore Framework Special Resolutions  In REDHAWK 2.1.3, the new StreamSource sandbox helper provides better performance than the legacy DataSource helper when pushing real sample data. DataSource.push() will not be updated in the 2.0.x series to address this performance concern. Struct_from_props fails during allocate_capacity in python device - This behavior is not an error. log_level api does not appear to work for C++ components - Duplicate of and fixed by CF-1894, Add hierarchical logging support in C++, as the log_level attribute for component interfaces is now tied to _baseLog and the resource logger.  IDE Special Resolutions  Generate button temporarily disabled on SPD editor - Cannot Reproduce Uses FEI Device wizard overwrites existing allocation ID - Duplicate of IDE-2177, FEI uses device wizard doesn\u0026rsquo;t preserve existing XML values. SAD editor properties tab allows setting external IDs on struct / struct seq members - Cannot Reproduce.  "
},
{
	"uri": "https://redhawksdr.github.io/community/",
	"title": "Community",
	"tags": [],
	"description": "",
	"content": " Questions \u0026amp; Answers The REDHAWK community uses StackOverflow for discussion and questions pertaining to REDHAWK.\nUse the tag redhawksdr for questions related to:\n A specific programming problem A software algorithm Software tools commonly used by programmers Practical, answerable problems that are unique to the programming profession  Issues/Bugs Submit issues via the REDHAWK GitHub Issue Tracker page:\n REDHAWK Issue Tracker  Contributions Non-U.S. Government\nContributions to the baseline project from outside the U.S. Government should be submitted as a pull request to the project on GitHub. Contributors must have a signed Contributor License Agreement (CLA) on file with REDHAWK before patches will be accepted. If an individual or organization desires the annotation of their contribution in the project documentation, please specify that annotation in the pull request.\nPlease email contributor agreements to redhawksdr@redhawksdr.org.\nU.S. Government\nContributions from the U.S. Government do not require a CLA; however, REDHAWK does require verification that the U.S. Government entity has unlimited rights to the contribution. An email to redhawksdr@redhawksdr.org stating that the contribution was developed by an employee of the U.S. Government in the course of his/her duties is sufficient. If the contribution was developed by a contractor, the email also should provide: the name of the contractor, contract number, and an assertion that the contract included the standard \u0026ldquo;Unlimited Rights\u0026rdquo; clause specified by DFARS 252.227.7014 or DFARS 252.227-7020.\nU.S. Government entities are encouraged to submit contributions as pull requests on GitHub. If an agency is unable to access GitHub, please contact REDHAWK to discuss alternate methods of delivery.\nFeedback Email redhawksdr@redhawksdr.org for feedback.\n"
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.1-beta/release-notes-2.1.2/",
	"title": "REDHAWK Release Notes - 2.1.2",
	"tags": [],
	"description": "",
	"content": " The effort in REDHAWK 2.1.2 focused on:\n Core REDHAWK Features and APIs\n Shared address space Components: Significant enhancement of Component model and BulkIO to support high performance I/O. Preliminary developer documentation for the REDHAWK 2.1.0 beta release is available at https://github.com/RedhawkSDR/core-framework/tree/2.1.2/docs/shared-address. This feature will be under extensive evaluation during the 2.1.x beta release series and is expected to provide the ground work for several new major enhancements to REDHAWK. Implementing a new zero-copy IPC mechanism for BulkIO that uses shared memory to transfer data between two processes on the same host. This is a follow-on enhancement to the shared address space Components feature. Preliminary developer documentation for the REDHAWK 2.1.0 beta release is available at https://github.com/RedhawkSDR/core-framework/tree/2.1.2/docs/shared-memory/shared-memory-ipc.md. FrontEnd Interfaces (FEI) Property definition change: For Devices, the FRONTEND::tuner_allocation FRONTEND::listener_allocation allocation properties are now writeonly instead of readwrite. Because the properties are now created as writeonly, they can no longer be queried. This change was made to prevent confusion with the actual state of the FrontEnd Device, which is reported by the FRONTEND::tuner status property. Existing Core Asset FEI Devices have been updated with this change. New FrontEnd Devices created with the IDE will automatically have this change. Adding support for a new type of Property, utctime, extending the list that includes types such as short or string. This timestamp Property is used in PropertyChangeEvents and can be queried from Components/Devices with the id QUERY_TIMESTAMP, which is useful when synchronizing the state of the system. utctime can be used by Component/Device developers as an additional type of Property. Adding functionality for capacity to be reserved for an entire host collocation on the SAD file. The reservation is a capacity floor for the Components in the host collocation, where the amount of capacity utilized by the aggregate set of Components is this reservation or actual, whichever is higher. This reservation is allocated against the target GPP running this Application, allowing the GPP to verify that the request can be satisfied, reducing the likelihood of over-subscription. Adding support for DCD files to have a startorder attribute, which functions similarly to the SAD file’s startorder. On startup, “start” is automatically called on Devices and Services (when possible), and on shutdown, reverse-order “stop” is called. The IDE’s tooling for DCD files has been updated to display and edit startorder. Adding support for the DeviceManager to resolve run time environment settings when deploying Devices and Services that have soft package dependencies. Resolving issue so that during Application release, calls to the Application object no longer result in misleading errors. Adding functionality within the code generators so they create C++, Java, or Python constants for enumerated values defined in the PRF. Improving flexibility to ignore GPP threshold checks when determining if the GPP should go into a BUSY state. Removing some obsolete options from the Core Framework and BulkIO configure scripts. Resolving issue where processes with spaces in the names would cause the GPP to terminate. Resolving issue to allow for slow startup conditions of OmniNames service before starting OmniEvents service. Adding the stop timeout control to the Application. Options, like the stop timeout, can be configured when designing Waveforms in the IDE. Resolving issue with incorrect exception being thrown during allocateCapacity. Resolving issue when shutting down orb from Python resources. Providing a warning in the logs if a message is too large. Resolving issue with the code generators so they can be run on systems with FIPS enabled. Resolving issue so generated C++ FEI Devices do not leak memory when deallocating listeners. Existing Devices must be regenerated and recompiled to apply this fix. Resolving a memory leak in FrontendTunerDevice::create(). Existing Devices must be recompiled to apply this fix. Resolving issue so the function returnRFInfoPkt transforms all fields between types frontend::RFInfoPkt and FRONTEND::RFInfoPkt. Adjusting the default tuner type for the Python Sandbox tuner allocation. It is now RX_DIGITIZER rather than DDC, matching the default tuner for a generated FEI Device. Preventing sb.DataSink from adding an empty timestamp when it receives EOS in an empty packet.  REDHAWK Systems\n Adding scripts and configuration files that allow REDHAWK core services to run as system services. In addition to these services, integrators can define REDHAWK Waveforms that are deployed during the system boot process.  Python Tooling and Sandbox\n Adding snapshot capability of network data and performing SDDS packet analysis on the captured data. Improving Python tooling to help manage REDHAWK systems. For example, these improvements include more intuitive event monitoring as well as new EventChannelManager, AllocationManager, and ConnectionManager helpers. Adding support for debugger options in the Python sandbox for C++ (Valgrind or gdb), Python (pdb), or Java (jdb) Components, Services, or Devices. Improving Python Sandbox tooling for new Domain features and resources. Specifically, extended DataSource to provide access to all the available SRI and the data timestamp. Adding an option to enable the Domain Manager’s logging level to be dynamically changed.  GPP\n Waveform Metrics support: Application objects now contain a “metrics” function that returns GPP usage metrics for individual Components as well as overall for the Application. Metrics are viewable in the Properties view of the IDE. Waveform metrics can now be accessed in the REDHAWK Driver Java and REST APIs.  IDE\n Adding the Components tab to the Waveform editor in the IDE to allow editing of Component instantiation details, including logging configuration. This information will be used to resolve the LOGGING_CONFIG_URI parameter during Component deployment. Improving the user experience when locating and connecting to existing REDHAWK Domains. Providing users with the option to copy Properties from other projects in their workspace or choose from pre-defined REDHAWK Properties when developing a Component or Device. Displaying a REDHAWK editor when double-clicking on SCD XML files. Adding a notification that is now displayed after exporting projects to the Target SDR. Providing better support for adding and editing Services in a DCD file. Resolving issue so Diagram shapes no longer stack if they are part of a feedback loop. Removing old code generation templates for REDHAWK 1.8 from the IDE. Old IDE diagrams for Waveforms and Nodes from pre-2.0.0 were also removed.  Documentation\n Adding a Connection Callbacks section to the REDHAWK Manual. Updating the REDHAWK Manual with accessibility rules for all properties. Updating the REDHAWK ICD with the description of the new “property” kind. Adding a Libraries chapter in the REDHAWK Manual to explain how to use shared libraries. Adding documentation explaining how to use the Allocation Manager.  Core Assets\n Creating a new MSDD Device released with bug fixes and enhancements and regenerated for REDHAWK 2.1. Updating the ‘rh.VITA49‘ REDHAWK shared library to include support for the VITA 49.2 standard. Initial release adheres to the draft specification, revision 00.51 dated 5 Dec 2016, which was available during development.  REDHAWK Enterprise Integration\n Ensuring the ‘getAllocIds‘ method return object is a List. Updating REDHAWK Driver to properly clean up driver-registered Device Managers on shutdown. Adding IDL source to appropriate Core Framework jars. Incorporated additional method to produce a jar bundle with a manifest built dynamically via the BnD Tools, source jar, and zip of XSDs. Adding implementations of ConnectionManager, AllocationManager interfaces to REDHAWK Driver. Adding utility methods for programatically setting the log level of Domain, Application, Device, and Component resources. Adding REST access to Event Channel Manager functionality. Updating REDHAWK Driver to have wrapper methods for retrieving state, connections, activeSRIs, and UsesPortStatistics from BULKIO objects. Updating REDHAWK REST to make connections, activeSRIs, UsesPortStatistics, and state available. Adding wrapper methods to RedhawkApplication and RedhawkComponent interfaces for easier access to aware(), componentDevices(), componentProcessIds(), and componentImplementations(). REST responses for Component and Application now display componentDevice, aware, componentProcessId, and componentImplementation information. Adding ability to get and set adminState from REDHAWK Driver and REDHAWK REST. Adding ability to view usageState and operationalState from REDHAWK Driver and REDHAWK REST. Adding ability to registerRemoteDomain, unregisterRemoteDomains, get device implementation information and a deviceConfiguration profile via REDHAWK Driver and REDHAWK REST. Adding ability to preconfigure HTTPS and WSS, and adding documentation to explain this functionality in the Web Server Configuration section in the REDHAWK Enterprise Integration User Guide. Adding a helper method to dynamically connect two Components; Improving methods used to set REDHAWK Properties; and Adding AllocationFactory to ease users’ ability to generate allocations. Adding functionality in REDHAWK REST and Websocket to support JAAS-based method level access.   New Features The following IDE and Core Framework new features were added in REDHAWK 2.1.2.\n The Python Sandbox DataSink object supports a stream API, allowing the DataSink to handle multiple incoming streams and variable SRI. The startorder attribute was added to the componentinstantiation element of DCD (node) files. When startorder is set, the Device or Service (if it supports the CF::Resource interface), will receive a start call on the Device Manager startup and a stop call on the Device Manager shutdown. Adding functionality in the Sandbox so when using “connect” on a REDHAWK object in a Python session, if the object is an FEI Device and it has a tuner allocated, a listener is automatically created and connected to that tuner. The “metrics” function on the Application object accepts two string sequences (components and attributes), and returns the current utilization by all Components of GPP resources. An aggregate consumption amount is also returned. Added ability to configure the timeout value for calls to an Application’s Components when the Application-level stop function is invoked. Added an editor for SCD files. Services can now be added when creating a Node project. Added a Details section for the Service selected in the Devices/Services tab of the Node editor. Added support to add Services to existing projects in the Node editor. Added startorder to DCD XML model. Added the ability to add well-known REDHAWK Properties when editing Properties. Added the ability to connect to a Domain Manager by selecting from a list. Added startorder support to the DCD diagram editor. Adding editor support to adjust GPP reservations for hostcollocations in a Waveform. Updated the CF.DomainManager IDL to include CF.Logging. Added the ability to view Waveform metrics in the Properties view. Added options to the SAD XML model. Providing the ability to edit SAD file options.  Improvements The following Core Framework and IDE improvements were completed in REDHAWK 2.1.2.\nCore Framework Improvements  A new stream API was added to DataSink to associate SRI with specific data sets. Removed the –disable-base-classes option to BulkIO’s configure script. Allocation Properties marked as writeonly cannot be queried.  IDE Improvements  Changed the definitions of the frontend_tuner_allocation and frontend_listener_allocation Properties to writeonly for new FEI Device projects. Adding the ability to clone Properties from other projects in the workspace when editing Properties. Updated text for Devices tab of the Node editor. A notification is now displayed after exporting projects to the Target SDR. The IDE now validates CORBA URIs for the naming service reference. Added the ability to specify the string “now” as a value for a utctime property. Debugging a shared address space Component no longer breaks on main by default. Included add/remove functionality for the new Components tab in the SAD editor. Added context-specific icons to the Devices tab of the Node editor. The Properties view for a running resource has been streamlined to only display Properties that can be configured or queried. When designing a Waveform or Node, only Properties that can be overridden are displayed. Added the Libraries chapter to the Redhawk IDE help. Added the System Service Configuration appendix to the Redhawk IDE help.  Fixes The following Core Framework, IDE, and documentation fixes were completed in REDHAWK 2.1.2.\nRelease notes for Core Assets are available on Github (https://github.com/RedhawkSDR/) in each Core Asset repository.\nCore Framework Fixes  Updated packaging to install %_localstatedir/log/omniEvents with correct ownership. Removed erroneous localtime offset in utctime properties. UTCTime sequence properties are represented correctly. Struct properties with a utctime member in C++ or Java now compile correctly. sb.DataSink no longer stores invalid timestamps. The Python Sandbox DataSource always calculates per-packet time stamps using floating point arithmetic, avoiding truncation errors when given an integer value for the sample rate. Writing to a C++ BulkIO output stream configured for complex data with real data and a list of time stamps now interprets the time stamp offsets in terms of complex samples, preserving the integrity of the time stamps. On the GPP, when nic_usage is disabled, no message is generated when the usage threshold is exceeded. Resolved issue so now files_available and threads are checked for GPP BUSY state. validateRequestVsDevice evaluates the requested frequency correctly if rfinfo_pkt indicates the spectrum is inverted. Clarified logging message regarding reservations. Removed superfluous warning messages on DeviceManager startup. Removed a superfluous message on DomainManager startup. Erroneous warning removed from Domain startup. The default implementation of runTest() for Python Components and Devices throws the correct CF.TestableObject.UnknownTest error. Changed runser for omniEvents to omniORB user. Library order for statically linked libraries fixed for new version of gcc. Removed traceback messages from qtbrowse. C++ components using the RH_LogEventAppender threw an exception during shutdown when the event service was terminated before the component. The severity of the log message when a C++ Device cannot connect to the IDM channel has been reduced from error to warning. Removed the –disable-xml-validation option to the Core Framework configure script. Resolved inconsistency of RFSource API to return frontend namespace defined data structures. Added namespace to property fields of hw_load_request structure.  Special Resolutions The following previously reported Known Issues have been closed in REDHAWK 2.1.2 with the following resolutions:\n Won’t Fix\n Make sendChangedProperty events safe for structs that have had attributes added - This issue was rejected. Unit test for Devices in 1.8.X returns Component object - This issue is not present in REDHAWK 2.0+ series. Query behavior for Optional Elements in Structs - All elements in struct properties are handled as a single configuration item. Struct_from_props fails during allocate_capacity in python deviceThis behavior is not an error. - This behavior is not an error.  Fixed By Other Issue\n GPP Valgrind Results - Fixed by improvements made to the GPP during development in the REDHAWK 2.0 series.  Cannot Reproduce\n –enableOctave test failed on codegen test test_02_EvaluateUnitTests [Component: octaveTest0]   IDE Fixes The following IDE bug fixes were completed in REDHAWK 2.1.2.\n When installing IDL projects with sudo privileges, the permissions are set on the installed artifacts such that they are visible to non-root users on the system. Corrected an issue where the IDE could hang or become sluggish while using the CORBA Name Browser view. When launching a Domain Manager with a name that is duplicated in another running Domain, the IDE now always shows an error. Deleting an aggregate Device removed references from associated compositepartofdevice tags. Removed shared libraries from the Property browser. Ensured that deleting a Component instantiation only cleans up the hosting Component placement if there are no remaining sibling instantiations. Corrected an NPE that occurred when using the Redhawk Import wizard for a shared library project. Limited refreshes of underline Port model objects. Deleting a resource in the Target SDR now closes any associated open editors. Corrected the software update links so they point at Eclipse Oxygen, not Eclipse Mars. Corrected an issue where values could not be added to a struct sequence in the Properties tab of the SAD editor. Updated Java environment specification to Java 8 for the plotter and editor applications. Improved error handling when a query of a resource’s Properties returns unexpected results. Corrected some configuration data for the IDE plotter application. Ensured that when plotting SDDS ports, a conneciton ID can be specified. This also corrects issues with plotting for SDDS Ports on FEI multi-out Devices. Displaying SRI for a FrontEnd tuner no longer prevents other IDEs from also displaying the SRI. Corrected an issue that could cause the CORBA name browser to slow the entire UI. Resolved a code quality issue. Corrected context menu icons for simple and simple sequence Properties. Log level combo in SAD editor is only enabled in design-time editors when the “Enabled” checkbox is selected. Corrected some information missing from Properties when creating new FEI Devices. Corrected the remove button in the new FrontEnd Device wizard so that it is not enabled when a Property cannot be removed. Corrected an error where the Property table in the new FrontEnd Device wizard was too small to see Properties on RHEL 7 systems. Removed runtime option from UsesDevice wizard in SAD diagram. Removed a work-around for a bug fixed in Eclipse Oxygen. Resolved ClassCastException when calling Expand All or Collapse All on a Waveform that includes a HostCollocation. Calling terminate on the Sandbox Chalkboard when it is empty terminates a running ComponentHost if it exists. Corrected the display of a spinner control in the new FEI Device wizard on RHEL 7. Resolved issue so Implementation tab now displays all usesdevice Property types. Removed an obsolete reference to the old Event viewer from the Show View menu. Ensured that some code intended only for debugging is not included in the IDE. Corrected the Event viewer so that CORBA calls are not made in the UI thread. Corrected the lightweight auto-refresh preference. Fixed NPE in FindComponentConstraint. Fixed error when terminating a C++ Component launched in debug mode. Clearing the “Usage Name” field in the SAD Editors Components tab removes the model element. Corrected several internal configuration issues with the code generation menus/buttons for Components. Ensured the New Control Panel Project button is displayed on the Components tab in the SAD editor. Ensured the Generate Waveform and Generate Node buttons displayed on all applicable SAD and DCD editor tabs. Updated SAD/DCD loggingconfig URI validation messages. Component usage name and naming service ID are now kept in sync after a graphical edit. Allocation IDs generated in the FEI usesdevice wizard of the SAD Diagram no longer contain user names. Resolved errors when adding and removing Devices and Services using the Devices tab in the Node editor. Removing a Device/Service instantiation removes the componentfile element from the DCD XML if it is not needed. Component project’s Generator combo box only displays applicable code generators. UsesDevice passes validation with any combination of accepted properties. The Sandbox Chalkboard now shows as stopped if all Components in it are released or terminated. Improved how HostCollocations are handled by the diagram layout algorithm.  Special Resolutions The following previously reported Known Issues have been closed in REDHAWK 2.1.2 with the following resolutions:\n Won’t Fix\n The IDE Help REDHAWK Content is not the released version of the documentation - The IDE Help REDHAWK Content includes the documentation during the IDE build process; therefore, the released version of the documentation cannot be included at that time.  Duplicate\n Hide the create control panel toolbar button for Shared Libraries (softpackage) projects - Duplicate of Control panel button shown when editing shared library in SPD editor.   Documentation NewFeatures/Improvements/Fixes The following documentation new features/improvements/fixes were completed in REDHAWK 2.1.2.\n Added MSDD STOCK information to the REDHAWK Manual. Added a Working with SDDS Data section to the Sandbox chapter of the REDHAWK Manual. Updated the REDHAWK Manual with information about loadable Component development and deployment. Added information in the REDHAWK Manual about connection management with FEI Devices in the Python Package. Added information about setting reservations using the IDE in the Specialized Reservation section of the Waveforms chapter of the REDHAWK Manual. Added information in the REDHAWK Manual about the stream API in DataSink. Added information in the REDHAWK Manual about the Waveform metrics function. Added information in the REDHAWK ICD and the SCA Specification about the metrics function. Added the Linux System Service Configuration appendix to REDHAWK manual. Added REDHAWK REST metrics information and a REDHAWK Metrics section to the REDHAWK Enterprise Integration Demos chapter of the REDHAWK Enterprise Integration User Guide. Added information in the REDHAWK manual about using Application options to set stop timeout and domain awareness. Added information in the REDHAWK Manual about using the debugger in the Sandbox. Added information in the REDHAWK ICD, the REDHAWK ICD Domain Profile, the SCA Specification, and the SCA Specification Domain Profile about stopTimeout. Added new images for the Domain Manager wizard and updated information about connecting to a running Domain. Added information in the REDHAWK ICD and the SCA Specification about the startorder attribute for Devices. Added startorder information to the REDHAWK Manual. Added Enumerations section to REDHAWK Manual to explain the generation of enumerated values for Component properties. Updated REDHAWK Enterprise Integration User Guide RedhawkPort and RedhawkApplication information for REDHAWK Driver and REDHAWK REST. Updated documentation to explain how to browse for and clone additional Component and Device Properties. Updated images for new DCD editor and new Node wizard and modified information to include new Services option. Moved the Working with the Shell section in the Getting Started chapter of the REDHAWK Enterprise Integration User Guide. It is now the Working with the Shell chapter located later in the manual, and the Getting Started chapter includes a link to it. Added information in the REDHAWK ICD and the SCA Specification about the behavior of write-only FEI allocation properties. Fixed trivial grammar issue in Logging Configuration Plugin Appendix. Added a note about avoiding reserved names in the REDHAWK IDL Project section of the REDHAWK Manual. Updated installation instructions to include RPM that installs the GPG key. Updated the Downloads page to support both LTS and Beta Series of REDHAWK. Added documentation for configuring the REDHAWK Integration assets with JacORB. Added domainName information to REDHAWK Connector and REDHAWK Camel documentation. Corrected base URI information, defined nameserver, and added connectionName information to REDHAWK REST documentation. Modified introductory text for RedhawkPort interface code examples. Added documentation about managing GPP BUSY state. Added a Components Tab section in the Waveforms chapter to document the new Components tab in the SAD editor. Updated REDHAWK Enterprise Integration User Guide to include code examples for ConnectionManager, Logging, and AllocationManager. Updated REDHAWK Enterprise Integration User Guide code examples of EventChannelListener functionality. Fixed display of level 5 headings. Updated Converting Complex Data in C++ and BulkIO High-speed data sections of User Manual. Updated the REDHAWK SCA and ICD documents to describe duplicate Device and DeviceManager registration behavior. Updated the REDHAWK SCA and ICD documents to describe Application release upon Device and Service unregistration.  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.1-beta/release-notes-2.1.1/",
	"title": "REDHAWK Release Notes - 2.1.1",
	"tags": [],
	"description": "",
	"content": " Core REDHAWK Features and APIs  Shared address space Components: Significant enhancement of Component model and BulkIO to support high performance I/O. Preliminary developer documentation for the REDHAWK 2.1.0 beta release is available here.  This feature will be under extensive evaluation during the 2.1.x beta release series and is expected to provide the ground work for several new major enhancements to REDHAWK.  Adding the API for a new type of tuner, a scanning Device. Adding support for a new type of Property, utctime, extending the list that includes types such as short or string. This timestamp Property is used in Property change events and can be queried from Components/Devices with the id QUERY_TIMESTAMP, which is useful when synchronizing the state of the system. The new type of Property can be used by Component/Device developers as an additional type of Property. Adding functionality for capacity to be reserved for an entire host collocation on the SAD file. The reservation is a capacity floor for the Components in the host collocation, where the amount of capacity utilized by the aggregate set of Components is this reservation or actual, whichever is higher. This reservation is allocated against the target GPP running this Application, allowing the GPP to verify that the request can be satisfied, reducing the likelihood of over-subscription. Adding functionality to allow Components that have a usesdevice dependency to now be launched on the same host (Device Manager/Node) as the Device satisfying the usesdevice requirement. This functionality is provided through an extension of the componentplacement hostcollocation. Extending DeviceManager to call configure() on Services at the time they register. This enables users to implement custom Property handling if so desired.  REDHAWK Systems  Changing the default logging directory for omniEvents service to reside in /var/log/omniEvents. Improving nodeBooter so it does not deploy if --user or --group are set while --daemon is not, and if the command-line arguments to nodeBooter are malformed, deployment fails. Adding support for the state of the Connection Manager and Event Channel Manager to be restored when persistence is enabled.  Project Code Generation  Fixing code generators for Port generation of C++ Components to correctly handle data structures returned from methods. Providing functionality to add custom headers to project files when generating code. Providing Generate Waveform and Generate Node buttons in the IDE editors to initiate file generation. This ensures that Waveform and Node project spec files are created or modified only when requested by the user.  Python Tooling and Sandbox  Adding snapshot capability of network data and performing SDDS packet analysis on the captured data. Improving Python tooling to help manage REDHAWK systems. For example, these improvements include eventChannelManager, allocationManager, and connectionManager helpers as well as simpler event monitoring. Improving Python Sandbox tooling for new Domain features and resources. Specifically, extended DataSource to provide access to all the available SRI and the data timestamp. Adding an option to enable the Domain Manager’s logging level to be dynamically changed. Correcting issue in the Python Sandbox so now when the BulkIO queue is full, the Python Sandbox no longer locks up when trying to release stopped Components.  GPP  Improving flexibility to ignore GPP threshold checks when determining if the GPP should go into a BUSY state.  IDE  Updating the IDE to use the latest available Eclipse tooling, Eclipse Oxygen. Providing the TM Terminal in the IDE, a full-featured terminal emulator that provides full ANSI cursor control, readline, and coloring. Adding the Components tab to the Waveform editor in the IDE to allow editing of Component instantiation details, including logging configuration. This information will be used to resolve the LOGGING_CONFIG_URIparameter during Component deployment. Showing IDL details when Ports are selected in the REDHAWK Explorer view. Providing validation of Property references in SAD and DCD files and flagging invalid Property references as errors. Adding the ability to terminate services in the Sandbox via the hover pad or the delete key and making the terminate icon more distinct throughout the IDE. Providing an option in the IDE to perform a FrontEnd Device allocation in the background to aid developers who are debugging their FrontEnd Devices. Improving the IDE’s Domain refresh logic to prevent the IDE from consuming excessive numbers of threads in some scenarios. Correcting the parsing of some numeric literals in Octave M files. Fixing links in the IDE’s help contents so REDHAWK help now displays correctly when links within the help are selected.  Documentation  Adding documentation for developing a logging configuration plug-in that will be used to resolve LOGGING_CONFIG_URI parameter during deployment of Devices, Services and Components. Renaming the Generating Code section to Generating Code for Components and explaining the code generation process and what occurs in the IDE when the code is generated. Revising the BulkIO High-speed data code example in User Manual.  REDHAWK Enterprise Integration  Updating REDHAWK Java Driver and REDHAWK REST to make it easier for users to access External Properties in Waveforms. Adding implementations of ConnectionManager, AllocationManager interfaces to REDHAWK Driver. Adding utility methods for programatically setting the log level of Domain, Application, Device, and Component Resources. Adding REST access to Event Channel Manager functionality. Resolving issue when activating local servants for MessageConsumerPort and MessageSupplierPort Java classes  New Features The following IDE and Core Framework new features were added in REDHAWK 2.1.1.\n C++ shared address space Components can be launched in debug mode. The configure() method is called when launching Services that support it. Added an icon and the refid of the Uses Device for host collocations with an associated Uses Device reference. The IDE is now built on Eclipse Oxygen, the latest version of Eclipse. When creating a Service project that makes use of the PropertySet IDL interface (either directly or via inheritance), a PRF file is generated. A link is now available in the SPD, SAD and DCD editors to add a header to the project’s files. An optional user-supplied header can now be added to files during the code generation process. A command-line terminal (\u0026ldquo;TM Terminal\u0026rdquo;) is now available in the IDE and can be opened via Ctrl+Alt+T. Added a Components tab to the SAD editor for editing Component instantiation details. The loggingconfig element can now be edited in the new SAD Components tab. In-editor validation of the logging configuration URI element is now provided in the Components tab. Added support for load and save of the reservation element in SAD files. Components launched in the Python Sandbox have an ID with the pattern similar to the ID when launched in a Waveform (for example, \u0026ldquo;instance_id:waveform_id\u0026rdquo;). The Python Sandbox function api() uses a pager to display Properties/Ports. The Python Sandbox DataSink object supports a stream API, allowing the DataSink to handle multiple incoming streams and variable SRI. Input Python Sandbox elements (for example, DataSink) can be customized with user-defined sinks. The sb.SRIKeyword function can now support sequence values for keywords as well as simple values. Added queryTimestamp() to the rhtime Python package to make it easier to retrieve the timestamp for the query call. The valid initialization string for utctime properties has been expanded from YYYY:MM:DD::HH:MM:SS.S to include now as a valid value. Added support for loggingconfig element contents when deploying a Component in a Waveform. Capacity reservations can now be added to host collocations, and reservations are checked with the GPP before deployment to avoid oversubscription.  Improvements The following Core Framework and IDE improvements were completed in REDHAWK 2.1.1.\nCore Framework Improvements  The Python Sandbox MessageSink includes a getMessages function. When storeMessages is set to True in the MessageSink constructor, getMessages can be used to retrieve the received messages even if a callback is not provided. Added support for a Java debugger (jdb) in the Python Sandbox when launching Components. A throttle option for DataSource and FileSource was added for data to be generated at the given sample rate. The Octave libraries are now located with the octave-config utility, which reduces the time taken to find them. Added tests to verify that the connection manager state is persisted when persistence is enabled. Added support for the state of the Event Channel Manager to be restored when persistence is enabled.  IDE Improvements  Improved the REDHAWK Explorer view to include an IDL section in the Properties view for selected Ports. RPM spec files for Waveforms and Nodes are now generated manually. The IDE now performs validation on the Properties assigned to Component/Devices in SAD/DCD files and reports an error if a Property does not exist in the Component/Device’s PRF file. Added a red trash can icon in the Device Manager Sandbox service button pad that terminates services running in the Device Manager Sandbox. Added functionality so delete hotkey now terminates a running Service in the IDE Sandbox. Added validation for the refid attribute of a usesdeviceref in a SAD file. Added functionality to enable FEI allocation to run in a background thread. Modified the icon for terminate so it is now distinct from the icon for stop.  Fixes The following Core Framework, IDE, and documentation fixes were completed in REDHAWK 2.1.1.\nCore Framework Fixes  RH::DEPLOYMENT_ROOT for deployed Components is the cache directory, not the working directory. Generated code for FEI Python Devices produces a properly-formed exception when the sample rate, center frequency, or bandwidth requested on the digital tuner control Port is less than 0. Added the function addChannels to the FEI base classes. This function enables the developer to add combinations of tuner types in the same Device. The function setNumChannels is still supported, but its functionality has been replaced by addChannels. Device Manager nodeBooter process no longer prints an error to stdout when a Service is included in the Node. GPP returns the current cacheDirectory and workingDirectory, even when not overridden on the DCD. Most typical shared library Components can be unloaded and relaunched without error. If a library is in use and has been modified, an exception is thrown when trying to create new Components using the library. The function set_rf_flow_id in the Python FEI code generators no longer uses a reserved word as an argument to the function. The Port name is now used as the default name for adding entries into the connection descriptor table. Corrected test that erroneously failed when Java is disabled. When a numerical property is initialized in either the SAD file or the DCD file, if the value contains illegal characters (for example: a, b, x), then the deployment fails. In the Sandbox, connecting a DataSink to an SDDS output Port now will return with a no matching Port exception. On CentOS 7, C++ LoadableDevices no longer throw a CORBA::COMM_FAILURE exception from load() when the file cannot be loaded. Added support to Python parsers for new elements: devicerequires, deployerrequires and usesdeviceref. Added support to allow LOGGING_CONFIG_URI to be passed on the command line during Component deployment irrespective of whether it was defined by the Component. When the BulkIO queue is full, the Python Sandbox no longer locks up when trying to release stopped Components. Thread management in the Python Component/Device base class is updated to better utilize the processor. Extended kickDomain API to include the ability to change the logging level for Domain and Device Manager processes. Changed runser for omniEvents to omniORB user.  IDE Fixes  Package names for Java Components now start with a lower-case letter by default, to adhere to standard Java conventions. In the Component editor, the contents of the XML tabs now reflect all changes made in the other tabs. A race condition was corrected that allowed a new project to be created with an invalid name. Updates to a Device\u0026rsquo;s usagename in the Node editor Devices tab are correctly reflected in the associated Devices table. Services in the Sandbox Device Manager now display in the Sandbox Node Diagram. Domains containing large numbers of Waveforms/Device Managers now re-sort their contents appropriately. When launching a Node on an existing Domain, the IDE now uses the Domain name instead of the Domain\u0026rsquo;s display name. An NPE no longer occurs if the M-file specified for a new Octave project does not contain a function. Ensured that CORBA calls that hang will timeout after a reasonable amount of time. Improved the Domain refresh process to prevent issues with too many threads and multiple simultaneous refreshes of the same object. Prevented the possibility of the IDE using too many threads when there are problems refreshing a domain. IDE Domain/Sandbox refresh code now better responds to cancellation. The CORBA Name Browser view now displays the kind of bound names. The CORBA Name Browser now consistently loads children in the view. Octave functions with arguments that have default values are now created as Properties (instead of Ports) by default in the New Component Project wizard. The IDE promptly displays an error if Octave\u0026rsquo;s include path cannot be found while generating code for an Octave project. Keep tree nodes expanded while navigating the Launch Waveform wizard. The IDE now displays Services in the Target SDR even if they duplicate the ID of another Service the IDE has already loaded. The IDE does not change the DCE ID of a project when it is renamed, which can cause problems if the user installs both the old and new versions of the project in the SDRROOT. The connect wizard now works with Waveforms\u0026rsquo; external Ports. References to non-existent struct simple properties are now handled gracefully. The editor action bar no longer attempts to load duplicate ActionHandlers. Fixed an occasional NPE that occured when using the Device Manager Explorer diagram. Multi-delete functionality race-condition is now handled gracefully. Corrected a potential code freeze when updating the Domain\u0026rsquo;s Waveform list. The IDE no longer displays a tree expander next to SRI keywords if there are no keywords to display. Clicking the Terminate context menu on the Sandbox Device Manager now terminates its services. Clicking the Shutdown context menu on the Sandbox Device Manager now terminates its services. Resolved issue where services launched via REDHAWK Explorer were receiving duplicate names. The OSSIEHOME Eclipse variable should not be expanded in the IDL project\u0026rsquo;s .ecpproperties file. Read-only Properties of kind \u0026lsquo;property\u0026rsquo; can now be overridden, and their values are passed to initializeProperties() in the Sandbox. Fixed bug that occurred when editing the namespace of existing projects. An error message was sometimes displayed after closing the \u0026ldquo;Allocate Tuner\u0026rdquo; wizard. Services launched in the Sandbox Device Manager diagram are now displayed in gray, and their menu options are disabled until they launch and register with the Device Manager. Corrected an inefficient monitoring of Devices by the Device Manager diagrams. Corrected a unit test failure that occurred when building in a docker container. A file descriptor which was being left open is now closed. A code quality issue was corrected. Removed an instance of double-checked locking. Corrected some internal domain model state inconsistencies. Fixed issue where the IDL Selection Wizard filter stopped working when the Show all interfaces button was checked. Fixed issue where Waveforms with external Ports were not being removed from the REDHAWK Explorer view on terminate. Corrected a link in the REDHAWK help that was not working. Message is now always a selectable kind type for Struct Properties. The icon for the PRF editor was corrected. Fixed issue with a ConcurrentModificationException occassionally occurring when using the \u0026ldquo;Monitor Ports\u0026rdquo; functionality. Diagrams now open without an error in the REDHAWK Explorer product. Corrected a warning that was logged about a command not having a category. Corrected a copyright notice about Eclipse software. Corrected an issue with CSS themes. Corrected some issues with product branding. A superfluous ODM event channel is no longer created when the display name differs from Domain name. Corrected issues with UI themes in the REDHAWK Explorer product. Corrected a potential code freeze when the IDE loses contact with a connected Domain. The release field in spec files created for Waveforms and Nodes is now correct. The IDE no longer attempts to read Device files when browsing the Sandbox file manager. Corrected a code issue that could have suppressed Sandbox errors. Updated Uses Device icon in the Edit Host Collocation wizard. The BULKIO SRI keyword CHAN_RF is now always preferred to COL_RF for center frequency when plotting. Corrected a rare bug that could cause the content in the pages of an editor to become un-synchronized. Shared address space components were always launched in the Sandbox Chalkboard, but can now be launched in other Sandbox Waveforms as well. Corrected an internal IDE issue that could prevent loading REDHAWK XML. The New Control Panel Project button is no longer displayed when editing a REDHAWK shared library project. Updated a missing environment specification to reflect the requirement for Java 8. Added missing icons in the DCD editor. Corrected internal IDE code to properly indicate when XML validation problems are found. Corrected an NPE that could occur when validating SAD or DCD files with references to non-existent struct sequence Properties.  Documentation New Features/Improvements/Fixes The following documentation new features/improvements/fixes were completed in REDHAWK 2.1.1.\n Added Managing Allocations and Managing Connections sections to document new helpers in the Python Sandbox. Corrected property definition shown in code for multi-out Ports by removing kind elements that were underneath the simple elements. Added information to explain that octave Component numerical properties are treated as complex. Corrected SAD file location in the SAD File section. Documented the new createProps function. Documented improved Python Sandbox tooling for new Domain features and resources. Added information to initializing timestamp properties to include the valid value string, \u0026ldquo;now\u0026rdquo;. Added information to describe how to add headers to files. Updated design-time SAD diagrams showing hostcollocation with usesdevices. Updated screenshots of Overview tabs in SPD, SAD, and DCD editors to show Header link in Project Documentation section. Updated screenshots of Waveform and Node editors and added text to explain button used to generate RPM spec files. Updated screenshot of SPD editor Properties to correctly display a drop-down for the \u0026ldquo;Kind\u0026rdquo;. Added documentation for capacity allocation on a per-hostcollocation basis. Updated Host Collocation procedure and replaced screenshots to correctly display collocation name created when adding a collocation. Updated procedure, Using the FEI Wizard to Create an FEI Device, to include the Setup Code Generation dialog and added screenshot. Updated FEI Allocation Wizard Tuner Allocation dialog screenshot and revised text to include new Run in background checkbox.  "
},
{
	"uri": "https://redhawksdr.github.io/release-notes/2.1-beta/release-notes-2.1.0/",
	"title": "REDHAWK Release Notes - 2.1.0",
	"tags": [],
	"description": "",
	"content": " The effort in REDHAWK 2.1.0 focused on:\n Adding support for Components to be deployed on a specific GPP, and conversely allowing the GPP to restrict deployments through a matching set of id/value pairs. These id/value pairs are defined in the Software Assembly Descriptor and Device Configuration Definition files respectively. Users may refer to this feature as the \u0026ldquo;special snowflake\u0026rdquo; deployment Property. Shared address space Components: Significant enhancement of Component model and BulkIO to support high performance I/O. Preliminary developer documentation for the REDHAWK 2.1.0 beta release is available at https://github.com/RedhawkSDR/core-framework/tree/develop-2.1/docs/shared-address. This feature will be under extensive evaluation during the 2.1.x beta release series and is expected to provide the ground work for several new major enhancements to REDHAWK. Adding support for a new type of Property, \u0026ldquo;utctime\u0026rdquo;, extending the list that includes types such as \u0026ldquo;short\u0026rdquo; or \u0026ldquo;string\u0026rdquo;. This timestamp Property is used in Property change events and can be queried from Components/Devices with the id QUERY_TIMESTAMP, which is useful when synchronizing the state of the system. The new type of Property can be used by Component/Device developers as an additional type of Property. Adding cacheDirectory and workingDirectory Properties to the GPP. These properties provide the deployer with control over where Components are stored (cacheDirectory) and the directory from which Components are executed (workingDirectory). Redesigning the IDE\u0026rsquo;s Event Viewer to improve the ability to monitor event channels. Ending support of Command-line interactive mode (-i) on Components, Services, and Devices. Terminal prompt interactions should be through the Python Sandbox. Improving Python tooling to help manage REDHAWK systems. For example, these improvements include eventChannelManager, allocationManager, and connectionManager helpers as well as simpler event monitoring. Adding functionality to allow Components that have a usesdevice dependency to now be launched on the same host (i.e., Device Manager/Node) as the Device satisfying the usesdevice requirement. This functionality is provided through an extension of the componentplacement hostcollocation. Improving recovery of a REDHAWK Domain after a catastrophic failure. The Device Manager reboots all associated Devices/Services when it detects a reset Domain Manager after a catastrophic failure in the Domain Manager. This reboot only happens if (1) persistence is enabled and (2) the name service log, event service log, and persistence database are emptied. Adding new concurrent logging appender for C++ Components to improve readability of logging messages when multiple processes are writing to the same log file. Improving the New Project Wizard to warn users if the project location selected already contains files that will become part of the project. Increase user awareness of files that may be moved, deleted, or packaged with a project. Updating the IDE to use the latest available Eclipse tooling, Eclipse Neon. For more information about Eclipse Neon, refer to http://www.eclipse.org/neon/noteworthy. Documenting a publisher/subscriber pattern when accessing an EventChannel from the Domain. Documenting available affinity processing directives when deploying Devices, Services, and Components. Adding support for the REDHAWK Core Framework, IDE, assets, and new REDHAWK projects to now compile against and run on Java 8. Extending DeviceManager to call configure() on Services at the time they register. This enables users to implement custom Property handling if so desired. Resolving issue when activating local servants for MessageConsumerPort and MessageSupplierPort Java classes. Improving Python Sandbox tooling for new Domain features and resources. Specifically, extended DataSource to provide access to all the available SRI and the data timestamp. Adding reservation schema graph in the documentation to enhance the text describing capacity allocation reservation for the GPP. Improving documentation of Signal Related Information (SRI). Updating Contributor License Agreement (CLA).  New Features Core Framework Features  Improved DeviceManager to call initalizeProperties or configure for Services that implement the CF::PropertyEmitter or CF::PropertySet interface. Added a rolling file appender that synchronizes access to a central file from multiple processes. Added support to allow executable Devices to restrict Component deployments during Application deployment. Added the implicit property QUERY_TIMESTAMP to all Components and Devices. When this property is queried, a UTCTime timestamp is returned. Furthermore, the PropertyChangeEvent has been extended with the member timestamp, also of UTCTime type. Added the ossie.utils.rhconnections package to make it simpler to generate endPoints for interactions between the Python Sandbox and the connectionManager. Added an allocations module to the Python ossie.utils module. This module contains a createProps function that performs type matches between a Device\u0026rsquo;s property set and the property set provided. Improved the usability of the Event Channel Manager in the Python package. Added new helpers in the Python Sandbox package to listen to Property change events. Added capability for the collocation of a usesdevice relationship and a Component on the same host.  IDE Features  Updated the IDE\u0026rsquo;s Event Viewer to provide additional clarity when displaying information for all event types. The Event Viewer displays a summary of basic event information, while the Properties view displays full details for a selected event. Added IDE support to generate new C++ Components as shared address space Components. Added the ability to launch shared address space Components in the Sandbox. Added a disconnect button to the IDE Event Viewer, which enables users to stop the viewer from updating with new events, while still persisting existing information. Added support to display devicerequires/deployerrequires information for runtime Components/Devices in the Advanced tab of the Properties view. Added support for load and save of the deployerrequires element in DCD files and the devicerequires element in SAD files. Added support for load and save of the usesdeviceref element in SAD files. Added runtime support for viewing/changing timestamp Properties. Added design-time support for editing timestamp Properties. Added support to display the new precision timestamp associated with a PropertyChangeEvent. Added editor support to specify the requirements of the GPP that launches a Component. Added editor support to filter Components that can be launched on a Device. Added support for editing Devices collocated with a host collocation.  Improvements Core Framework Improvements  Extended Sandbox DataSource to accept SRI and TimeStamp objects when push method is called. Moved start and stop Port calls from generated code into base classes. Improved sb.launch() to accept a single dictionary for all Property overrides and no longer require the user to distinguish between command line and initialization. Added support for new C++ Components to be created as shared libraries, which allow multiple Components to be deployed into the same process and enable faster, lower-cost I/O.  IDE Improvements  Added validaton for SPD files to check that referenced shared library Component files are present. Enhanced the IDE to recognize shared address space Components. Added support to display event messages when event channels are added or removed. Added the ability to display PropertyChangeEvent in the Event Viewer.  Fixes Core Framework Fixes  Message supplier Ports now support the CF.QueryablePort interface, which allows querying the current set of connection IDs and connected objects. If errors are encountered when installing an Waveform file, the ApplicationFactory will now throw an ApplicationInstallationError with the details of what error occurred. Improved error message when using the Python package to attach to a named domain when the name service has a stale reference to the missing Domain Manager. In Python FEI Devices, the default Port name used for matchAllocationIdToStreamId is populated correctly. Fixed a series of problems with Python FEI base classes, including :  Added validateRequestSingle and validateRequestVsDeviceStream to remap the Python base API close to the Java and C++ base API. In Python FEI Devices, when the user code generates an exception, that exception is correctly logged. When Python FEI Devices fail to allocate resources, they return a correctly-formatted exception. Resolved issues with listener management in Python FEI Devices. validateRequestVsRFInfo correctly scales the minimum sampling rate for scalar or complex data. Fixed typo in error messages for Python FEI Devices.  Added creation of sdr/dev/services directory when installing from source or the REDHAWK RPM package. Python FEI Device getTunerStatus call returns without errors. If the Java minimum is not met, the automake configure script exits before generating the Makefile. When an exception occurs during C++ FEI deallocation, updateUsageState is called to account for the deallocation(s) that succeeded. Fixed issue with C++ FEI Devices for failed allocations. Now, the C++ FEI Device base class returns false when the allocation fails instead of throwing an exception.  IDE Fixes  The IDE now automatically adds header files in REDHAWK shared library projects to the Makefile.am.ide. Properties of type ulonglong are now passed to resources launched in the Sandbox.  "
},
{
	"uri": "https://redhawksdr.github.io/_footer/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/_header/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "REDHAWK\n"
},
{
	"uri": "https://redhawksdr.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://redhawksdr.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]